//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace App1
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace App1.App1_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::App1.Common.LayoutAwarePage(); }

        private object Activate_1_addNewBookFilled() { return new global::App1.addNewBookFilled(); }

        private object Activate_2_allHomeworks() { return new global::App1.allHomeworks(); }

        private object Activate_3_SfRichTextBoxAdv() { return new global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv(); }

        private object Activate_4_DocumentAdv() { return new global::Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv(); }

        private object Activate_9_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>(); }

        private object Activate_10_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>(); }

        private object Activate_11_bookReader() { return new global::App1.bookReader(); }

        private object Activate_12_books() { return new global::App1.books(); }

        private object Activate_13_gradeManagement() { return new global::App1.gradeManagement(); }

        private object Activate_14_homework() { return new global::App1.homework(); }

        private object Activate_15_Login() { return new global::App1.Login(); }

        private object Activate_16_MainPage() { return new global::App1.MainPage(); }

        private object Activate_17_notebook() { return new global::App1.notebook(); }

        private object Activate_18_profileLockScreen() { return new global::App1.profileLockScreen(); }

        private object Activate_19_profilePage() { return new global::App1.profilePage(); }

        private object Activate_20_RichTextColumns() { return new global::App1.Common.RichTextColumns(); }

        private object Activate_21_settings() { return new global::App1.settings(); }

        private object Activate_22_settingsSnapped() { return new global::App1.settingsSnapped(); }

        private object Activate_23_sh() { return new global::App1.sh(); }

        private object Activate_24_singleHomework() { return new global::App1.singleHomework(); }

        private object Activate_25_singleNotebook() { return new global::App1.singleNotebook(); }

        private object Activate_26_singleSh() { return new global::App1.singleSh(); }

        private object Activate_27_snappedViewStart() { return new global::App1.snappedViewStart(); }

        private object Activate_28_subjects() { return new global::App1.subjects(); }

        private object Activate_29_todaySh() { return new global::App1.todaySh(); }

        private object Activate_30_toDoHomeworks() { return new global::App1.toDoHomeworks(); }

        private object Activate_31_tomorrowSh() { return new global::App1.tomorrowSh(); }

        private object Activate_32_weeklySh() { return new global::App1.weeklySh(); }

        private void VectorAdd_7_SectionAdvCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node)item;
            collection.Add(newItem);
        }

        private void VectorAdd_8_NodeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node)item;
            collection.Add(newItem);
        }

        private void VectorAdd_9_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node)item;
            collection.Add(newItem);
        }

        private void VectorAdd_10_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::App1.App1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Object":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Int32":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Double":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Boolean":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode));
                break;

            case "Windows.UI.Xaml.Input.ManipulationModes":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Input.ManipulationModes));
                break;

            case "Windows.UI.Xaml.Controls.Panel":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Panel));
                break;

            case "Windows.UI.Xaml.Controls.RichTextBlock":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.RichTextBlock));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "App1.Common.LayoutAwarePage":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "App1.addNewBookFilled":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.addNewBookFilled), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_1_addNewBookFilled;
                xamlType = userType;
                break;

            case "App1.allHomeworks":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.allHomeworks), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_2_allHomeworks;
                xamlType = userType;
                break;

            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_3_SfRichTextBoxAdv;
                userType.SetContentPropertyName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.Document");
                userType.AddMemberName("Document");
                userType.AddMemberName("DocumentTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PageCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ZoomFactor");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("VerticalScrollBarVisibility");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("HorizontalScrollBarVisibility");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsZoomEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ScrollBarIndicatorMode");
                userType.AddMemberName("ManipulationMode");
                xamlType = userType;
                break;

            case "Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv), GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.CompositeNode"));
                userType.Activator = Activate_4_DocumentAdv;
                userType.SetContentPropertyName("Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv.Sections");
                userType.AddMemberName("Sections");
                xamlType = userType;
                break;

            case "Syncfusion.UI.Xaml.RichTextBoxAdv.CompositeNode":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Syncfusion.UI.Xaml.RichTextBoxAdv.CompositeNode), GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.Node"));
                xamlType = userType;
                break;

            case "Syncfusion.UI.Xaml.RichTextBoxAdv.Node":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Owner");
                userType.AddMemberName("NextNode");
                userType.AddMemberName("PreviousNode");
                xamlType = userType;
                break;

            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SectionAdvCollection":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Syncfusion.UI.Xaml.RichTextBoxAdv.SectionAdvCollection), GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.NodeCollection"));
                userType.CollectionAdd = VectorAdd_7_SectionAdvCollection;
                xamlType = userType;
                break;

            case "Syncfusion.UI.Xaml.RichTextBoxAdv.NodeCollection":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Syncfusion.UI.Xaml.RichTextBoxAdv.NodeCollection), GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection<Syncfusion.UI.Xaml.RichTextBoxAdv.Node>"));
                userType.CollectionAdd = VectorAdd_8_NodeCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Syncfusion.UI.Xaml.RichTextBoxAdv.Node>":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Syncfusion.UI.Xaml.RichTextBoxAdv.Node>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Syncfusion.UI.Xaml.RichTextBoxAdv.Node>");
                userType.Activator = Activate_9_ObservableCollection;
                userType.CollectionAdd = VectorAdd_9_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Syncfusion.UI.Xaml.RichTextBoxAdv.Node>":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node>),
                                                   "System.Collections.ObjectModel.Collection<Syncfusion.UI.Xaml.RichTextBoxAdv.Node>");
                userType.Activator = Activate_10_Collection;
                userType.CollectionAdd = VectorAdd_10_Collection;
                xamlType = userType;
                break;

            case "App1.bookReader":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.bookReader), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_11_bookReader;
                xamlType = userType;
                break;

            case "App1.books":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.books), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_12_books;
                xamlType = userType;
                break;

            case "App1.gradeManagement":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.gradeManagement), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_13_gradeManagement;
                xamlType = userType;
                break;

            case "App1.homework":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.homework), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_14_homework;
                xamlType = userType;
                break;

            case "App1.Login":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.Login), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_15_Login;
                xamlType = userType;
                break;

            case "App1.MainPage":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.MainPage), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_16_MainPage;
                xamlType = userType;
                break;

            case "App1.notebook":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.notebook), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_17_notebook;
                xamlType = userType;
                break;

            case "App1.profileLockScreen":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.profileLockScreen), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_18_profileLockScreen;
                xamlType = userType;
                break;

            case "App1.profilePage":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.profilePage), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_19_profilePage;
                xamlType = userType;
                break;

            case "App1.Common.RichTextColumns":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.Common.RichTextColumns), GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_20_RichTextColumns;
                userType.SetContentPropertyName("App1.Common.RichTextColumns.RichTextContent");
                userType.AddMemberName("RichTextContent");
                userType.AddMemberName("ColumnTemplate");
                xamlType = userType;
                break;

            case "App1.settings":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.settings), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_21_settings;
                xamlType = userType;
                break;

            case "App1.settingsSnapped":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.settingsSnapped), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_22_settingsSnapped;
                xamlType = userType;
                break;

            case "App1.sh":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.sh), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_23_sh;
                xamlType = userType;
                break;

            case "App1.singleHomework":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.singleHomework), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_24_singleHomework;
                xamlType = userType;
                break;

            case "App1.singleNotebook":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.singleNotebook), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_25_singleNotebook;
                xamlType = userType;
                break;

            case "App1.singleSh":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.singleSh), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_26_singleSh;
                xamlType = userType;
                break;

            case "App1.snappedViewStart":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.snappedViewStart), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_27_snappedViewStart;
                xamlType = userType;
                break;

            case "App1.subjects":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.subjects), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_28_subjects;
                xamlType = userType;
                break;

            case "App1.todaySh":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.todaySh), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_29_todaySh;
                xamlType = userType;
                break;

            case "App1.toDoHomeworks":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.toDoHomeworks), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_30_toDoHomeworks;
                xamlType = userType;
                break;

            case "App1.tomorrowSh":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.tomorrowSh), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_31_tomorrowSh;
                xamlType = userType;
                break;

            case "App1.weeklySh":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.weeklySh), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_32_weeklySh;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Syncfusion.GridCommon.WinRT.Syncfusion_GridCommon_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Layout.Syncfusion_SfAccordion_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Barcode.Syncfusion_SfBarcode_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.BulletGraph.Syncfusion_SfBulletGraph_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Notification.Syncfusion_SfBusyIndicator_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Layout.Syncfusion_SfCarousel_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Charts.Syncfusion_SfChart_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Media.Syncfusion_SfColorPickers_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Diagram.Syncfusion_SfDiagram_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Gauges.Syncfusion_SfGauge_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Grid.Syncfusion_SfGrid_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.WinRT.Controls.Grid.Syncfusion_SfGridBase_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Notification.Syncfusion_SfHubTile_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Input.Syncfusion_SfInput_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Maps.Syncfusion_SfMaps_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Navigation.Syncfusion_SfRadialMenu_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Reports.Syncfusion_SfReportViewer_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.RichTextBoxAdv.Syncfusion_SfRichTextBoxAdv_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Syncfusion_SfShared_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Syncfusion_SfTabControl_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Layout.Syncfusion_SfTileView_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfsion.UI.Xaml.Controls.Navigation.Syncfusion_SfTreeNavigator_WinRT_2012_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_SfRichTextBoxAdv_Document(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.Document;
        }
        private void set_0_SfRichTextBoxAdv_Document(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.Document = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv)Value;
        }
        private object get_1_DocumentAdv_Sections(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv)instance;
            return that.Sections;
        }
        private object get_2_Node_Owner(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node)instance;
            return that.Owner;
        }
        private object get_3_Node_NextNode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node)instance;
            return that.NextNode;
        }
        private object get_4_Node_PreviousNode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.Node)instance;
            return that.PreviousNode;
        }
        private object get_5_SfRichTextBoxAdv_DocumentTitle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.DocumentTitle;
        }
        private void set_5_SfRichTextBoxAdv_DocumentTitle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.DocumentTitle = (global::System.String)Value;
        }
        private object get_6_SfRichTextBoxAdv_PageCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.PageCount;
        }
        private object get_7_SfRichTextBoxAdv_ZoomFactor(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.ZoomFactor;
        }
        private void set_7_SfRichTextBoxAdv_ZoomFactor(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.ZoomFactor = (global::System.Double)Value;
        }
        private object get_8_SfRichTextBoxAdv_VerticalScrollBarVisibility(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.VerticalScrollBarVisibility;
        }
        private void set_8_SfRichTextBoxAdv_VerticalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.VerticalScrollBarVisibility = (global::System.Boolean)Value;
        }
        private object get_9_SfRichTextBoxAdv_HorizontalScrollBarVisibility(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.HorizontalScrollBarVisibility;
        }
        private void set_9_SfRichTextBoxAdv_HorizontalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.HorizontalScrollBarVisibility = (global::System.Boolean)Value;
        }
        private object get_10_SfRichTextBoxAdv_IsZoomEnabled(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.IsZoomEnabled;
        }
        private void set_10_SfRichTextBoxAdv_IsZoomEnabled(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.IsZoomEnabled = (global::System.Boolean)Value;
        }
        private object get_11_SfRichTextBoxAdv_ScrollBarIndicatorMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.ScrollBarIndicatorMode;
        }
        private void set_11_SfRichTextBoxAdv_ScrollBarIndicatorMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.ScrollBarIndicatorMode = (global::Windows.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode)Value;
        }
        private object get_12_SfRichTextBoxAdv_ManipulationMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            return that.ManipulationMode;
        }
        private void set_12_SfRichTextBoxAdv_ManipulationMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv)instance;
            that.ManipulationMode = (global::Windows.UI.Xaml.Input.ManipulationModes)Value;
        }
        private object get_13_RichTextColumns_RichTextContent(object instance)
        {
            var that = (global::App1.Common.RichTextColumns)instance;
            return that.RichTextContent;
        }
        private void set_13_RichTextColumns_RichTextContent(object instance, object Value)
        {
            var that = (global::App1.Common.RichTextColumns)instance;
            that.RichTextContent = (global::Windows.UI.Xaml.Controls.RichTextBlock)Value;
        }
        private object get_14_RichTextColumns_ColumnTemplate(object instance)
        {
            var that = (global::App1.Common.RichTextColumns)instance;
            return that.ColumnTemplate;
        }
        private void set_14_RichTextColumns_ColumnTemplate(object instance, object Value)
        {
            var that = (global::App1.Common.RichTextColumns)instance;
            that.ColumnTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App1.App1_XamlTypeInfo.XamlMember xamlMember = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.Document":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Document", "Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_SfRichTextBoxAdv_Document;
                xamlMember.Setter = set_0_SfRichTextBoxAdv_Document;
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv.Sections":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.DocumentAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Sections", "Syncfusion.UI.Xaml.RichTextBoxAdv.SectionAdvCollection");
                xamlMember.Getter = get_1_DocumentAdv_Sections;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.Node.Owner":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.Node");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Owner", "Syncfusion.UI.Xaml.RichTextBoxAdv.Node");
                xamlMember.Getter = get_2_Node_Owner;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.Node.NextNode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.Node");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "NextNode", "Syncfusion.UI.Xaml.RichTextBoxAdv.Node");
                xamlMember.Getter = get_3_Node_NextNode;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.Node.PreviousNode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.Node");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PreviousNode", "Syncfusion.UI.Xaml.RichTextBoxAdv.Node");
                xamlMember.Getter = get_4_Node_PreviousNode;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.DocumentTitle":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "DocumentTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_SfRichTextBoxAdv_DocumentTitle;
                xamlMember.Setter = set_5_SfRichTextBoxAdv_DocumentTitle;
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.PageCount":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "PageCount", "Int32");
                xamlMember.Getter = get_6_SfRichTextBoxAdv_PageCount;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.ZoomFactor":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ZoomFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_SfRichTextBoxAdv_ZoomFactor;
                xamlMember.Setter = set_7_SfRichTextBoxAdv_ZoomFactor;
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.VerticalScrollBarVisibility":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "VerticalScrollBarVisibility", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_SfRichTextBoxAdv_VerticalScrollBarVisibility;
                xamlMember.Setter = set_8_SfRichTextBoxAdv_VerticalScrollBarVisibility;
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.HorizontalScrollBarVisibility":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "HorizontalScrollBarVisibility", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_SfRichTextBoxAdv_HorizontalScrollBarVisibility;
                xamlMember.Setter = set_9_SfRichTextBoxAdv_HorizontalScrollBarVisibility;
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.IsZoomEnabled":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "IsZoomEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_SfRichTextBoxAdv_IsZoomEnabled;
                xamlMember.Setter = set_10_SfRichTextBoxAdv_IsZoomEnabled;
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.ScrollBarIndicatorMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ScrollBarIndicatorMode", "Windows.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_SfRichTextBoxAdv_ScrollBarIndicatorMode;
                xamlMember.Setter = set_11_SfRichTextBoxAdv_ScrollBarIndicatorMode;
                break;
            case "Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv.ManipulationMode":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.RichTextBoxAdv.SfRichTextBoxAdv");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ManipulationMode", "Windows.UI.Xaml.Input.ManipulationModes");
                xamlMember.Getter = get_12_SfRichTextBoxAdv_ManipulationMode;
                xamlMember.Setter = set_12_SfRichTextBoxAdv_ManipulationMode;
                break;
            case "App1.Common.RichTextColumns.RichTextContent":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Common.RichTextColumns");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RichTextContent", "Windows.UI.Xaml.Controls.RichTextBlock");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_RichTextColumns_RichTextContent;
                xamlMember.Setter = set_13_RichTextColumns_RichTextContent;
                break;
            case "App1.Common.RichTextColumns.ColumnTemplate":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Common.RichTextColumns");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ColumnTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_RichTextColumns_ColumnTemplate;
                xamlMember.Setter = set_14_RichTextColumns_ColumnTemplate;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App1.App1_XamlTypeInfo.XamlSystemBaseType
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


