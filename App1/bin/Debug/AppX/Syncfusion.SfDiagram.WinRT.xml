<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfDiagram.WinRT</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.UI.Xaml.Diagram.CollectionExt">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> and <see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/> objects.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.CollectionExt.mcleared">
            <summary>
            Indicates whether the value is cleared.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.CollectionExt.dataInternal">
            <summary>
            Refers to the internal data (nodes and connectors)objects.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.CollectionExt.source">
            <summary>
            Refers to the Source collection object.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.CollectionExt.syncRoot">
            <summary>
            Object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.CollectionExt"/> class .
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.Add(System.Object)">
            <summary>Adds an item to the <see cref="T:System.Collections.IList"></see>.</summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.IList"></see>.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.</summary>
            <returns>true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.Insert(System.Int32,System.Object)">
            <summary>Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.</summary>
            <param name="index">The zero-based index at which value should be inserted. </param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.Remove(System.Object)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.</summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.CheckEmptySource">
            <summary>
            Checks whether the source is not set and raises an exception if the collection source is not null.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.GetItemAt(System.Int32)">
            <summary>
            Get an item by index from the internal or external source through the IList or IEnumerable interfaces.
            </summary>
            <param name="index">The integer value representing the index</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.HookCollection(System.Collections.IEnumerable)">
            <summary>
            Subscribes to the CollectionChanged event.
            </summary>
            <param name="collection">Represents the IEnumerable collection.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.OnChangesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Reraises notifications on collection change.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
            <remarks>Notifies of the collection change.</remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.UnhookCollection(System.Collections.IEnumerable)">
            <summary>
            Unsubscribes from the CollectionChanged event.
            </summary>
            <param name="collection">Represents the IEnumerable collection.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.CollectionExt.ValidateIListSupport">
            <summary>
            Checks whether current source supports the IList interface.
            </summary>
            <returns>The collection of objects in <see cref="T:System.Collections.IList"/></returns>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.CollectionExt.CollectionChanged">
            <summary>Occurs when the collection changes.</summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.Count">
            <summary>
            Gets the count of the items in the collection.
            </summary>        
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.</summary>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.SourceCollection">
            <summary>
            Gets or sets custom source collection.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.Cleared">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.UI.Xaml.Diagram.CollectionExt"/> is cleared.
            </summary>
            <value><c>true</c> if cleared; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.Data">
            <summary>
            Gets the source collection or internal data list  depending on the presence of the source collection.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.CollectionExt.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeCollection">
            <summary>
            Collection, used to store <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> objects.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeCollection.mmembers">
            <summary>
            Typed members storage.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeCollection.mdiagramPage">
            <summary>
            Represents the <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramPage"/>. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.#ctor(Windows.UI.Xaml.Controls.Panel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeCollection"/> class .
            </summary>
            <param name="mdiagramPage">Panel instance</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeCollection"/> class .
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range.
            </summary>
            <param name="icol">The <see cref="T:System.Collections.ICollection"/> object</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.Contains(System.Object)">
            <summary>
            Specifies whether the List contains the specified value.
            </summary>
            <param name="value">The value to be searched in the list.</param>
            <returns>True, if it contains value, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item at the specified index value.
            </summary>
            <param name="index">The location.</param>
            <param name="value">Item to be inserted.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.Remove(System.Object)">
            <summary>
            Removes the specified value from the list.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index value.
            </summary>
            <param name="index">The location.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.Select(System.Object)">
            <summary>
            Selects an item from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.SelectAll">
            <summary>
            Selects all the members of the list.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.GetGroupList(Syncfusion.UI.Xaml.Diagram.INodeGroup)">
            <summary>
            Gets the group list.
            </summary>
            <param name="node">The node object.</param>
            <returns>Gets the <see cref="T:System.Collections.IEnumerable"/> collection.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.AddValue(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.GetGroupList(System.Collections.Generic.IEnumerable{Syncfusion.UI.Xaml.Diagram.INodeGroup},Syncfusion.UI.Xaml.Diagram.INodeGroup)">
            <summary>
            Gets the group list.
            </summary>
            <param name="list">The collection of nodes.</param>
            <param name="parent">The parent node.</param>
            <returns>The node collection.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeCollection.GetRootNodeFromGroup(System.Collections.Generic.IEnumerable{Syncfusion.UI.Xaml.Diagram.INodeGroup},Syncfusion.UI.Xaml.Diagram.INodeGroup)">
            <summary>
            Gets the root node from group.
            </summary>
            <param name="list">The collection of nodes in the list.</param>
            <param name="node">The <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> object.</param>
            <returns>The root <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> object. </returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeCollection.Count">
            <summary>
            Gets the count of the members in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the List values are of fixed size.
            </summary>
            <returns>True, if it is of fixed size, false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the List values can be only read or written to.
            </summary>
            <returns>True, if it is read only, false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeCollection.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeCollection.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeCollection.Members">
            <summary>
            Gets the members of the list.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the node object at the specified location.
            </summary>
            <param name="index">The location</param>
            <returns>The member at the specified location.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Command.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="!:DelegateCommand"/> class.
            </summary>
            <param name="executeAction">The execute action.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Command.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command 
            can execute in its current state.
            </summary>
            <param name="parameter">
            Data used by the command. 
            If the command does not require data to be passed,
            this object can be set to null.
            </param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Command.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">
            Data used by the command. 
            If the command does not require data to be passed, 
            this object can be set to null.
            </param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.Command.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort">
             <summary>
             Represents a port which can be used to make connections to the node.
             </summary>
             <remarks>
             The <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/> class can be used for defining custom ports on the nodes.
             <para/>
             Any number of ports can be defined on a node.  By default every node has a center port. 
             </remarks>
             <example>
             C#:
             <para/>
             The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                    InitializeComponent ();
                    Control = new DiagramControl ();
                    Model = new DiagramModel ();
                    View = new DiagramView ();
                    Control.View = View;
                    Control.Model = Model;
                    View.Bounds = new Thickness(0, 0, 1000, 1000);
                    //Creates a node
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    Model.Nodes.Add(n);
                    //Define a Custom port for the node.
                    ConnectionPort port = new ConnectionPort();
                    port.Node=n;
                    port.Left=75;
                    port.Top=10;
                    port.PortShape = PortShapes.Arrow;
                    port.PortStyle.Fill = Brushes.Transparent;
                    port.Height = 11;
                    port.Width = 11;
                    n.Ports.Add(port);
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.OffsetX = 150;
                    n1.OffsetY = 125;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n1);
                    ConnectionPort port1 = new ConnectionPort();
                    port1.Node=n;
                    port1.Left=75;
                    port1.Top=50;
                    port1.PortShape = PortShapes.Arrow;
                    port1.PortStyle.Fill = Brushes.Transparent;
                    port1.Height = 11;
                    port1.Width = 11;
                    n1.Ports.Add(port1);
                    LineConnector o2 = new LineConnector();
                    o2.ConnectorType = ConnectorType.Straight;
                    o2.TailNode = n1;
                    o2.HeadNode = n;
                    o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
                    //Making connection to the ports.
                    o2.ConnectionHeadPort = port;
                    o2.ConnectionTailPort = port1;
                    Model.Connections.Add(o2);
                }
                }
                }
             </code>
             </example>
             <seealso cref="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.Node"/>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.CenterPositionProperty">
            <summary>
            Identifies the CenterPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.IsDragOverPortProperty">
            <summary>
            Identifies the IsDragOverPort dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.IsMouseOverProperty">
            <summary>
            Identifies the IsDragOverPort dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.LeftProperty">
            <summary>
            Identifies the Left dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.TopProperty">
            <summary>
            Identifies the Top dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.cportref">
            <summary>
            Refers to the center port reference number.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.mname">
            <summary>
            Refers to the name of the port.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.mnode">
            <summary>
            Represents the current node .
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.mshape">
            <summary>
            Represents the port shape.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.noderef">
            <summary>
            Refers to the node reference number.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionPort.portref">
            <summary>
            Represents the port reference number.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Windows.Foundation.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/> class .
            </summary>
            <param name="node">The node hosting this port.</param>
            <param name="position">Position of the port</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.#ctor(Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/> class.
            </summary>
            <param name="node">The node hosting this port.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/> class .
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call
            <see cref="!:System.Windows.FrameworkElement.ApplyTemplate"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.OnCenterPositionChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [center position changed].
            </summary>
            <param name="d">The dependency Object.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.OnOffsetXChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [offset X changed].
            </summary>
            <param name="d">The dependency Object.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.OnOffsetYChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [offset Y changed].
            </summary>
            <param name="d">The dependency Object..</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionPort.ConnectionPort_Loaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Is invoked when the port is loaded.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.CenterPortReferenceNo">
            <summary>
            Gets or sets the center port reference no.
            </summary>
            <value>The center port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.Left">
             <summary>
             Gets or sets the left position of the port. This is a dependency property.
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             Port left position.
             </value>
             <example>
             C#:
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                    InitializeComponent ();
                    Control = new DiagramControl ();
                    Model = new DiagramModel ();
                    View = new DiagramView ();
                    Control.View = View;
                    Control.Model = Model;
                    View.Bounds = new Thickness(0, 0, 1000, 1000);
                    //Creates a node
                    Node n = new Node(Guid.NewGuid(), "NewNode");
                    n.Shape = Shapes.Rectangle;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="New Node";
                    Model.Nodes.Add(n);
                    //Define a Custom port for the node.
                    ConnectionPort port = new ConnectionPort();
                    //Specifies the node
                    port.Node=n;
                    //Specifies the left position of the port.
                    port.Left=75;
                    port.Top=10;
                    //Specifies the port shape
                    port.PortShape = PortShapes.Arrow;
                    n.Ports.Add(port);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.Name">
            <summary>
            Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a XAML processor. This is a dependency property.
            </summary>
            <value></value>
            <returns>The name of the element. The default is an empty string.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.Node">
             <summary>
             Gets or sets the node which is hosting this port.
             </summary>
             <value>
             Type: <see cref="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.Node"/>
             Node object.
             </value>
             <remarks>
             Any number of <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/> can be specified for a <see cref="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.Node"/>.
             <para/>
             By default every node has a center port.
             </remarks>
             <example>
             C#:
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                    InitializeComponent ();
                    Control = new DiagramControl ();
                    Model = new DiagramModel ();
                    View = new DiagramView ();
                    Control.View = View;
                    Control.Model = Model;
                    View.Bounds = new Thickness(0, 0, 1000, 1000);
                    //Creates a node
                    Node n = new Node(Guid.NewGuid(), "NewNode");
                    n.Shape = Shapes.Rectangle;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="New Node";
                    Model.Nodes.Add(n);
                    //Define a Custom port for the node.
                    ConnectionPort port = new ConnectionPort();
                    //Specifies the node
                    port.Node=n;
                    port.Left=75;
                    port.Top=10;
                    //Specifies the port shape
                    port.PortShape = PortShapes.Arrow;
                    n.Ports.Add(port);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.PortNodeReference">
            <summary>
            Gets or sets the port node reference.
            </summary>
            <value>The port node reference.</value>
            <remarks>Used for serialization purpose</remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.PortReferenceNo">
            <summary>
            Gets or sets the port reference no.
            </summary>
            <value>The port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.PortShape">
             <summary>
             Gets or sets the port shape.
             </summary>
             <value>
             Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.PortShapes"/>
             Enum specifying the port shapes.
             </value>
             <remarks>
             By default the port shape is Diamond. 
             </remarks>
             <example>
             C#:
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                    InitializeComponent ();
                    Control = new DiagramControl ();
                    Model = new DiagramModel ();
                    View = new DiagramView ();
                    Control.View = View;
                    Control.Model = Model;
                    View.Bounds = new Thickness(0, 0, 1000, 1000);
                    //Creates a node
                    Node n = new Node(Guid.NewGuid(), "NewNode");
                    n.Shape = Shapes.Rectangle;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="New Node";
                    Model.Nodes.Add(n);
                    //Define a Custom port for the node.
                    ConnectionPort port = new ConnectionPort();
                    port.Node=n;
                    port.Left=75;
                    port.Top=10;
                    //Specifies the port shape
                    port.PortShape = PortShapes.Arrow;
                    n.Ports.Add(port);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.Top">
             <summary>
             Gets or sets the top position of the port. This is a dependency property.
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             Port top position.
             </value>
             <example>
             C#:
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                    InitializeComponent ();
                    Control = new DiagramControl ();
                    Model = new DiagramModel ();
                    View = new DiagramView ();
                    Control.View = View;
                    Control.Model = Model;
                    View.Bounds = new Thickness(0, 0, 1000, 1000);
                    //Creates a node
                    Node n = new Node(Guid.NewGuid(), "NewNode");
                    n.Shape = Shapes.Rectangle;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="New Node";
                    Model.Nodes.Add(n);
                    //Define a Custom port for the node.
                    ConnectionPort port = new ConnectionPort();
                    //Specifies the node
                    port.Node=n;
                    //Specifies the left position of the port.
                    port.Left=75;
                    //Specifies the top position of the port.
                    port.Top=10;
                    //Specifies the port shape
                    port.PortShape = PortShapes.Arrow;
                    n.Ports.Add(port);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.IsDragOverPort">
            <summary>
            Gets or sets a value indicating whether this instance is drag over port.
            </summary>
            <value>
            <c>true</c> if this instance is drag over port; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionPort.IsMouseOver">
            <summary>
            Gets or sets a value indicating whether this instance is drag over port.
            </summary>
            <value>
            <c>true</c> if this instance is drag over port; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LineConnector">
            <summary>
            Represents base abstract class for Connectors.
            </summary>
             <summary>
             Represents the Connectors to be used for making connections between the nodes. 
             </summary>
             <remarks>
             Connectors are objects that are used to create a link between two nodes. The node where the connection starts is known as the head node. The node where the connection ends is known as the tail node.
             <para>Three types of connectors are provided :Orthogonal, Straight and Bezier.</para>
             </remarks>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in C# and add nodes and connections.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Specifies the node
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    Model.Nodes.Add(n);
                    ConnectionPort port = new ConnectionPort();
                    port.Node=n;
                    port.Left=75;
                    port.Top=10;
                    port.PortShape = PortShapes.Arrow;
                    port.PortStyle.Fill = Brushes.Transparent;
                    port.Height = 11;
                    port.Width = 11;
                    n.Ports.Add(port);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n1);
                    ConnectionPort port1 = new ConnectionPort();
                    port1.Node=n;
                    port1.Left=75;
                    port1.Top=50;
                    port1.PortShape = PortShapes.Arrow;
                    port1.PortStyle.Fill = Brushes.Transparent;
                    port1.Height = 11;
                    port1.Width = 11;
                    n1.Ports.Add(port1);
                     LineConnector o = new LineConnector();
                     o.ConnectorType = ConnectorType.Straight;
                     o.TailNode = n1;
                     o.HeadNode = n;
                     o.LabelHorizontalAlignment = HorizontalAlignment.Center;
                     o.LabelVerticalAlignment = HorizontalAlignment.Center;
                     o.Label="Syncfusion";
                     o.ConnectionHeadPort = port;
                     o.ConnectionTailPort = port1;
                     o.HeadDecoratorShape=DecoratorShape.Arrow;
                     o.TailDecoratorShape=DecoratorShape.Arrow;
                     Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IEdge">
            <summary>
            Interface to a Connection in a hierarchy or graph of objects.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IEdge.AdjacentNode(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Given a Node upon which this Edge is incident, the opposite incident
            Node is returned. Throws an exception if the input node is not incident
            on this Edge.
            </summary>
            <param name="node">The node object.</param>
            <returns>The node at the other end.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.ConnectionHeadPort">
            <summary>
            Gets or sets the connection head port.
            </summary>
            <value>The connection head port.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.ConnectionTailPort">
            <summary>
            Gets or sets the connection tail port.
            </summary>
            <value>The connection tail port.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.HeadNode">
            <summary>
            Gets or sets the head node.
            </summary>
            <value>The head node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.TailNode">
            <summary>
            Gets or sets the tail node.
            </summary>
            <value>The tail node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.ConnectorType">
            <summary>
            Gets or sets the type of the connector.
            </summary>
            <value>The type of the connector.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.HeadDecoratorShape">
            <summary>
            Gets or sets the head decorator shape.
            </summary>
            <value>The head decorator shape.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.TailDecoratorShape">
            <summary>
            Gets or sets the tail decorator shape.
            </summary>
            <value>The tail decorator shape.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.HeadDecoratorStyle">
            <summary>
            Gets or sets the head decorator style.
            </summary>
            <value>The head decorator style.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.TailDecoratorStyle">
            <summary>
            Gets or sets the tail decorator style.
            </summary>
            <value>The tail decorator style.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IEdge.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ICommon">
            <summary>
            Represents common property for nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ICommon.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            <c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ICommon.OldZIndex">
            <summary>
            Gets or sets the old ZIndex value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ICommon.NewZIndex">
            <summary>
            Gets or sets the new ZIndex value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LineBridgingEnabledProperty">
            <summary>
            Identifies the LabelWidth LineBridgingEnabled dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnLineBridgingEnabledChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [line bridging enabled changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.CenterProperty">
            <summary>
            Identifies the Center dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionHeadPortProperty">
            <summary>
            Identifies the ConnectionHeadPort dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionPointsProperty">
            <summary>
            Identifies the ConnectionPoints dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionTailPortProperty">
            <summary>
            Identifies the ConnectionTailPort dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorTypeProperty">
            <summary>
            Identifies current ConnectorType.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.DistanceProperty">
            <summary>
            Identifies the Distance dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.EditorAngleProperty">
            <summary>
            Identifies the LabelAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadDecoratorPositionProperty">
            <summary>
            Identifies current HeadDecoratorPosition.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadDecoratorShapeProperty">
            <summary>
            Identifies current HeadDecoratorShape.  This is a dependency property.
            </summary>        
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadNodeProperty">
            <summary>
            Identifies current HeadNode.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.IsGroupedProperty">
            <summary>
            Identifies the IsGroup dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.IsLabelEditableProperty">
            <summary>
            Identifies the IsLabelEditable dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.IntermediatePointsProperty">
            <summary>
            Identifies current IntermediatePoints.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.IsVertexVisibleProperty">
            <summary>
            Identifies the IsVertexVisibleProperty dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.IsVertexMovableProperty">
            <summary>
            Identifies the IsVertexMovable dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.VertexStyleProperty">
            <summary>
            Identifies the VertexStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelAngleProperty">
            <summary>
            Identifies the LabelAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelBackgroundProperty">
            <summary>
             Identifies the LabelBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontFamilyProperty">
            <summary>
            Identifies the LabelFontFamily dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontSizeProperty">
            <summary>
            Identifies the LabelFontSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontStyleProperty">
            <summary>
            Identifies the LabelFontStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontWeightProperty">
            <summary>
            Identifies the LabelFontWeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelForegroundProperty">
            <summary>
             Identifies the LabelForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelHeightProperty">
            <summary>
            Identifies the LabelHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelHorizontalAlignmentProperty">
            <summary>
            Identifies the LabelHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplatePositionProperty">
            <summary>
            Identifies the LabelTemplatePosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateAngleProperty">
            <summary>
            Identifies the LabelTemplateAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelPositionProperty">
            <summary>
            Identifies the LabelPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateHorizontalAlignmentProperty">
            <summary>
            Identifies the LabelHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateProperty">
            <summary>
            Identifies the Label Template.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateVerticalAlignmentProperty">
            <summary>
            Identifies the LabelVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTextAlignmentProperty">
            <summary>
            Identifies the LabelTextAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTextWrappingProperty">
            <summary>
            Identifies the LabelTextWrapping dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelVerticalAlignmentProperty">
            <summary>
            Identifies the LabelVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelVisibilityProperty">
            <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelWidthProperty">
            <summary>
            Identifies the LabelWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.MeasurementUnitProperty">
            <summary>
            Identifies the MeasurementUnit dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.TailDecoratorShapeProperty">
            <summary>
            Identifies current TailDecoratorShape.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.TailNodeProperty">
            <summary>
            Identifies current TailNode.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.TextWidthProperty">
            <summary>
            Defines the TextWidth property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelOrientationProperty">
            <summary>
            Used to set LabelOrientation of the Line Connector.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateOrientationProperty">
            <summary>
            LabelTemplateOrientationProperty
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.mstartpointposition">
            <summary>
            Used to store start point position value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.mendpointposition">
            <summary>
            Used to store end point position value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.mgroups">
            <summary>
            Used to store the groups.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.mnewindex">
            <summary>
            Used to store the new ZIndex value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.moldindex">
            <summary>
            Used to store the old ZIndex value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.dview">
            <summary>
            Used to store the view object.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.hid">
            <summary>
            Used to store head node reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.hpid">
            <summary>
            Used to store head port reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.mdroppoint">
            <summary>
            Used to store the connector drop point.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.no">
            <summary>
            Used to store the reference number of the nodes and connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.tid">
            <summary>
            Used to store tail node reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.tpid">
            <summary>
            Used to store tail port reference no.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector._FirstLoaded">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnIntermediatePointsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [intermediate points changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnIsVertexVisibleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [is vertex visible changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnIsVertexMovableChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [is vertex movable changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnVertexStyleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [vertex style changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetLineIntersect(Syncfusion.UI.Xaml.Diagram.Node,Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Rect,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,Syncfusion.UI.Xaml.Diagram.ConnectorType)">
            <summary>
            Calculates the intersection point of the line with any of the node sides.
            </summary>
            <param name="node">The node with which the line intersects.</param>
            <param name="pt1">The start point of line.</param>
            <param name="pt2">The end point of the line.</param>
            <param name="rect">The rectangle which contains the node.</param>
            <param name="isTop">Flag to indicate the top side.</param>
            <param name="isBottom">Flag to indicate the bottom side.</param>
            <param name="isLeft">Flag to indicate the left side.</param>
            <param name="isRight">Flag to indicate the right side.</param>
            <param name="conType">Specifies the ConnectorType.</param>
            <returns>Intersection Point</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetOrthogonalLineIntersect(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Windows.Foundation.Rect,Windows.Foundation.Rect,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,Windows.Foundation.Point@,Windows.Foundation.Point@)">
            <summary>
            Calculates the intersection point of the orthogonal or Bezier line with any of the node sides.
            </summary>
            <param name="source">The head node.</param>
            <param name="target">The tail node.</param>
            <param name="rect">The rectangle which contains the head node.</param>
            <param name="trect">The rectangle which contains the tail node.</param>
            <param name="isTop">Flag to indicate the top side of rect.</param>
            <param name="isBottom">Flag to indicate the bottom side of rect.</param>
            <param name="isLeft">Flag to indicate the left side of rect.</param>
            <param name="isRight">Flag to indicate the right side of rect.</param>
            <param name="tisTop">Flag to indicate the top side of target rectangle.</param>
            <param name="tisBottom">Flag to indicate the bottom side of target rectangle.</param>
            <param name="tisLeft">Flag to indicate the left side of target rectangle.</param>
            <param name="tisRight">Flag to indicate the right side of target rectangle.</param>
            <param name="si">The intersection point with respect to head node.</param>
            <param name="ti">The intersection point with respect to tail node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetTreeOrthogonalLineIntersect(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Windows.Foundation.Rect,Windows.Foundation.Rect,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,Windows.Foundation.Point@,Windows.Foundation.Point@)">
            <summary>
            Gets the tree orthogonal line intersect.
            </summary>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <param name="rect">The source rect.</param>
            <param name="trect">The target target rectangle.</param>
            <param name="isTop">if set to <c>true</c> [is top].</param>
            <param name="isBottom">if set to <c>true</c> [is bottom].</param>
            <param name="isLeft">if set to <c>true</c> [is left].</param>
            <param name="isRight">if set to <c>true</c> [is right].</param>
            <param name="tisTop">if set to <c>true</c> [tis top].</param>
            <param name="tisBottom">if set to <c>true</c> [tis bottom].</param>
            <param name="tisLeft">if set to <c>true</c> [tis left].</param>
            <param name="tisRight">if set to <c>true</c> [tis right].</param>
            <param name="si">The start point.</param>
            <param name="ti">The end point.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.AdjacentNode(Syncfusion.UI.Xaml.Diagram.IShape)">
             <summary>
             Given a Node upon which this Edge is incident, the opposite incident
             Node is returned. Throws an exception if the input node is not incident
             on this Edge.
             </summary>
             <param name="node">The node whose adjacent node is to be found</param>
             <returns>The node at the other end.</returns>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             //Creating node
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             //Creating a connection.
             LineConnector o2 = new LineConnector();
             o2.ConnectorType = ConnectorType.Straight;
             o2.TailNode = n1;
             o2.HeadNode = n;
             IShape node = o2.AdjacentNode(n1);
             Model.Connections.Add(o2);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.LineSlope(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Calculates the slope.
            </summary>
            <param name="pt1">The start Point </param>
            <param name="pt2">The end point</param>
            <returns>The Slope value</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.UpdateDecoratorPosition">
            <summary>
            Updates the position of the decorator.
            </summary>
            <param name="line">line connector</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.SetShape(System.String)">
            <summary>
            Sets the shape.
            </summary>
            <param name="shape">sets the shape</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnConnectorTypeChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [connector type changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnHeadShapeChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnHeadShapeChanged method of the instance, notifies of the dependency property value changes .
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnHeadNodeChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnHeadNodeChanged method of the instance, notifies of the dependency property value changes .
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnHeadPortChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [head port changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnLabelChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnLabelPositionChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label position changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnLabelTemplatePositionChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label template position changed].
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnTailShapeChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)" -->
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnTailNodeChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnTailNodeChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnTailPortChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [tail port changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnTextWidthChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [text width changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnUnitsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [units changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.FindAngle(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            finds the angle     
            </summary>
            <param name="s">start point to find angle between</param>
            <param name="e">end point to find angle between</param>
            <returns>angle between the points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.FindHypo(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Finds the hypotenuse
            </summary>
            <param name="s">start point to find angle between</param>
            <param name="e">end point to find angle between</param>
            <returns>angle between the points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.FindPOIBetweenTwoPolyLine(System.Collections.Generic.List{Windows.Foundation.Point},System.Collections.Generic.List{Windows.Foundation.Point},System.Boolean)">
            <summary>
            Finds the POI between two poly line.
            </summary>
            <param name="polyLine1">The poly line1.</param>
            <param name="polyLine2">The poly line2.</param>
            <param name="self">if set to <c>true</c> [self].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.FindPOIBetweenLineAndPolyLine(Windows.Foundation.Point,Windows.Foundation.Point,System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            Finds the POI between line and poly line.
            </summary>
            <param name="lineStart">The line start.</param>
            <param name="lineEnd">The line end.</param>
            <param name="polyLine">The poly line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.FindPOIBetweenTwoLines2(Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Finds the POI between two lines2.
            </summary>
            <param name="startRect">The start rect.</param>
            <param name="endRect">The end rect.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.LiesWithin(Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point,System.Double)">
            <summary>
            Lieses the within.
            </summary>
            <param name="startRect">The start rect.</param>
            <param name="endRect">The end rect.</param>
            <param name="point">The point.</param>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetLengthAtFractionPoint(Windows.UI.Xaml.Media.PathFigure,Windows.Foundation.Point,System.Double@,System.Int32@)">
            <summary>
            Gets the length at fraction point.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="at">At.</param>
            <param name="fullLength">The full length.</param>
            <param name="segmentIndex">Index of the segment.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.getSlope(Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Gets the slope.
            </summary>
            <param name="st">The st.</param>
            <param name="en">The en.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.findHypo(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Finds the hypo.
            </summary>
            <param name="s">The s.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.findAngle(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Finds the angle.
            </summary>
            <param name="s">The s.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorPathGeometryProperty">
            <summary>
            Identifies the ConnectorPathGeometry dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadDecoratorAngleProperty">
            <summary>
            Identifies the HeadDecoratorAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.TailDecoratorAngleProperty">
            <summary>
            Identifies the TailDecoratorAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.dc">
            <summary>
            Used to store the DiagramControl instance
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.fixedNodeConnection">
            <summary>
            Represents the fixed node.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.movableNodeConnection">
            <summary>
            Represents the movable node.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.headthumb">
            <summary>
            Used to store the head thumb boolean
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.headThumb">
            <summary>
            Represents the head thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.tailThumb">
            <summary>
            Represents the tail thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.hitNodeConnector">
            <summary>
            Used to store node that is connected
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.isdefaulted">
            <summary>
            Used to check if default value is used for label width.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.isdoubleclicked">
            <summary>
            Used to check if mouse is double clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.linecanvas">
            <summary>
            Used to get the line canvas
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.linedragging">
            <summary>
            Used to store whether the line is dragging
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.mbendLength">
            <summary>
            Used to store the bend length.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.mconnectionEndSpace">
            <summary>
            Used to store connection end space
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.previousHitNode">
            <summary>
            Used to store previous hit node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.tailthumb">
            <summary>
            Used to store tail thumb
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.lastLineClick">
            <summary>
            Used to store the last node click instance
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LineConnector.lastLinePoint">
            <summary>
            Used to store the last node click point
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/> class.
            </summary>
            <param name="source">The source node.</param>
            <param name="sink">The sink node.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/> class.
            </summary>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.AddLinePoints(System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            Adds points to the collection in case of orthogonal line .
            </summary>
            <param name="linePoints">Collection of points.</param>
            <returns>The modified collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.AddPoints(System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            Adds points to the collection in case of orthogonal line .
            </summary>
            <param name="linePoints">Collection of points.</param>
            <returns>The modified collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.FindConnectionEnd(System.Collections.Generic.List{Windows.Foundation.Point},Windows.Foundation.Point,Windows.Foundation.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Makes the end connection to the respective node by finding the correct direction of the node.
            </summary>
            <param name="connectionPoints">Collection of points.</param>
            <param name="startPoint">The start point of the connector.</param>
            <param name="endPoint">The end point of the connector.</param>
            <param name="isTop">Flag indicating the top side of the source.</param>
            <param name="isBottom">Flag indicating the bottom side of the source.</param>
            <param name="isLeft">Flag indicating the left side of the source.</param>
            <param name="isRight">Flag indicating the right side of the source.</param>
            <param name="tisTop">Flag indicating the top side of the target.</param>
            <param name="tisBottom">Flag indicating the bottom side of the target.</param>
            <param name="tisLeft">Flag indicating the left side of the target.</param>
            <param name="tisRight">Flag indicating the right side of the target.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetAdornerLinePoints(Syncfusion.UI.Xaml.Diagram.Node,Windows.Foundation.Point,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Gets the line points when tail node is null.
            </summary>
            <param name="source">The source node</param>
            <param name="sinkPoint">sink point</param>
            <param name="e">mouse event position</param>
            <returns>The collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetAdornerLinePoints">
            <summary>
            Gets the line points when mouse event is raised.
            </summary>
            <param name="e">Mouse point</param>
            <returns>The collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetLinePoints(Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Gets the line points when tail node is null.
            </summary>
            <param name="source">The source node</param>
            <returns>The collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetLinePoints(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Calculates the points which form the path geometry. 
            </summary>
            <param name="source">The head node</param>
            <param name="target">The tail node</param>
            <returns>Collection of points.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetLinePoints(Syncfusion.UI.Xaml.Diagram.Node,System.Boolean)">
            <summary>
            Gets the line points when head node is null.
            </summary>
            <param name="target">The source node</param>
            <param name="istarget">true, if it is the target.</param>
            <returns>Collection Of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetLinePoints">
            <summary>
            Gets the line points when both head node and tail node are not specified.
            </summary>
            <returns>The collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.GetSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the Bezier segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point)of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <param name="num1">It specifies the amount of curve to be provided.Value is 150d.</param>
            <param name="isTop">Flag indicating the top side.</param>
            <param name="isBottom">Flag indicating the bottom side.</param>
            <param name="isLeft">Flag indicating the left side.</param>
            <param name="isRight">Flag indicating the right side.</param>
            <returns>The Bezier segment</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.HitTesting(Windows.Foundation.Point)">
            <summary>
            Hittesting 
            </summary>
            <param name="hitPoint">hit point</param>
            <returns>Returns the boolean value whether the hit testing is performed</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.Labeledit">
            <summary>
            Invoked when Label editing is started.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.Line_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Calls Line_PropertyChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.LineConnector_Loaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the LineConnector control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.IsDoubleClick(Windows.Foundation.Point)">
            <summary>
            Called when the mouse button is clicked twice.
            </summary>
            <param name="position">Mouse Position</param>
            <returns>true if double clicked, false otherwise</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.LineConnector_MouseLeftButtonDown(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonDown routed event that occurs when
            the mouse left button is released over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.Lineconnector_MouseLeftButtonUp(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Provides class handling for the MouseLeftButtonUp routed event that occurs when
            the mouse left button is released over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnMouseRightButtonDown(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.LineConnector_MouseMove(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Provides class handling for the MouseMove routed event that occurs when
            the mouse left button is released over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call
            <see cref="!:System.Windows.FrameworkElement.ApplyTemplate"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnConnectorPathGeometryChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when the connector path geometry is changed.
            </summary>
            <param name="d">object whose path geometry is changed</param>
            <param name="e">DependencyPropertyChanged event</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnHeadDecoratorAngleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when the head decorator angel is changed.
            </summary>
            <param name="d">object whose head decorator angel is changed</param>
            <param name="e">DependencyPropertyChanged event</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnIsSelectedChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when the IsSelected is changed.
            </summary>
            <param name="d">object whose IsSelected is changed</param>
            <param name="e">DependencyPropertyChanged event</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.OnTailDecoratorAngleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when the tail decorator angel is changed.
            </summary>
            <param name="d">object whose tail decorator angel is changed</param>
            <param name="e">DependencyPropertyChanged event</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.Segment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the segment.
            </summary>
            <param name="x1">The x coordinate of the starting point(first control point) of the curve.</param>
            <param name="y1">The y coordinate of the starting point(first control point) of the curve.</param>
            <param name="x2">The x coordinate of the end point of the curve.</param>
            <param name="y2">The y coordinate of the end point of the curve.</param>
            <param name="temp1">The x coordinate of the second control point of the curve.</param>
            <param name="temp2">The y coordinate of the second control point of the curve.</param>
            <returns>The segment.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.UpdateConnectorAdornerPathGeometry(Windows.Foundation.Point,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            updates connector path geometry
            </summary>
            <param name="position">line connector </param>
            <param name="e">MouseEventArgs</param>
            <returns>PathGeometry</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.UpdateConnectorPathGeometry">
            <summary>
            Called whenever the head node, tail node or position of the node is changed. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.findLength(System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            Finds the length.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.InitializeRelationship">
            <summary>
            Initialize the relationship.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.Delete">
            <summary>
            When connector is deleted from the Model, this funtion is called to update the relationship properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.Add">
            <summary>
            When connected added into the the Model, this funtion is called to update the relationship properties.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadNodeChanged(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Updated relationship properties when HeadNode is changed.
            </summary>
            <param name="OldNode">OldNode</param>
            <param name="NewNode">NewNode</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorBase_HeadNodeChangedEvent(System.Object,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)" -->
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.TailNodeChanged(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Update relationship properties when TailNode is changed.
            </summary>
            <param name="OldNode">OldNode</param>
            <param name="NewNode">NewNode</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorBase_TailNodeChangedEvent(System.Object,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)" -->
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LineBridgingEnabled">
            <summary>
            Gets or sets a value indicating whether [line bridging is enabled].
            </summary>
            <value><c>true</c> if [line bridging is enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.LineConnector.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadNodeChangedEvent">
            <summary>
            Occurs when HeadNode is changed. 
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.LineConnector.TailNodeChangedEvent">
            <summary>
            Occurs when TailNode is changed. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionHeadPort">
             <summary>
             Gets or sets the head port of the connector.
             </summary>
             <value>The port to which the connection is to be made.</value>
             <remarks>
             When specifying the <see cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionHeadPort"/>, the <see cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadNode"/> should also be specified.
             </remarks>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             //Creating node
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             Model.Nodes.Add(n);
             //Adding a port to the node
             ConnectionPort port = new ConnectionPort();
             port.Node=n;
             port.Left=75;
             port.Top=10;
             port.PortShape = PortShapes.Arrow;
             port.PortStyle.Fill = Brushes.Transparent;
             port.Height = 11;
             port.Width = 11;
             n.Ports.Add(port);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             ConnectionPort port1 = new ConnectionPort();
             port1.Node=n;
             port1.Left=75;
             port1.Top=50;
             port1.PortShape = PortShapes.Arrow;
             port1.PortStyle.Fill = Brushes.Transparent;
             port1.Height = 11;
             port1.Width = 11;
             n1.Ports.Add(port1);
             //Creating a connection.
             LineConnector o2 = new LineConnector();
             o2.ConnectorType = ConnectorType.Straight;
             o2.TailNode = n1;
             o2.HeadNode = n;
             o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
             //Specifying the port to connect to.
             o2.ConnectionHeadPort = port;
             o2.ConnectionTailPort = port1;
             o2.HeadDecoratorShape=DecoratorShape.Arrow;
             o2.TailDecoratorShape=DecoratorShape.Arrow;
             Model.Connections.Add(o2);
             }
             }
             }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionTailPort">
             <summary>
             Gets or sets the tail port of the connector.
             </summary>
             <value>The port to which the connection is to be made.</value>
             <remarks>
             When specifying the <see cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionTailPort"/>, the <see cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailNode"/> should also be specified.
             </remarks>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             //Creating node
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             Model.Nodes.Add(n);
             //Adding a port to the node
             ConnectionPort port = new ConnectionPort();
             port.Node=n;
             port.Left=75;
             port.Top=10;
             port.PortShape = PortShapes.Arrow;
             port.PortStyle.Fill = Brushes.Transparent;
             port.Height = 11;
             port.Width = 11;
             n.Ports.Add(port);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             ConnectionPort port1 = new ConnectionPort();
             port1.Node=n;
             port1.Left=75;
             port1.Top=50;
             port1.PortShape = PortShapes.Arrow;
             port1.PortStyle.Fill = Brushes.Transparent;
             port1.Height = 11;
             port1.Width = 11;
             n1.Ports.Add(port1);
             //Creating a connection.
             LineConnector o2 = new LineConnector();
             o2.ConnectorType = ConnectorType.Straight;
             o2.TailNode = n1;
             o2.HeadNode = n;
             o2.LabelHorizontalAlignment = HorizontalAlignment.Center;
             //Specifying the port to connect to.
             o2.ConnectionHeadPort = port;
             o2.ConnectionTailPort = port1;
             Model.Connections.Add(o2);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorType">
             <summary>
             Gets or sets the type of connection to be used.This is a dependency property.
             </summary>
             <value>
             Type: <see cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorType"/>
             Enum specifying the type of the connector to be used.
             </value>
             <remarks>
             Three types of connectors are provided namely Orthogonal, Bezier and Straight. Default value is Orthogonal.
             </remarks>
             <example>
             <para/>This example shows how to set ConnectorType in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.Label = "Alarm Rings";
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                     Model.Nodes.Add(n1);
                     LineConnector connObject = new LineConnector();
                     connObject.ConnectorType = ConnectorType.Straight;
                     connObject.TailNode = n1;
                     connObject.HeadNode = n;
                     connObject.ConnectorType = ConnectorType.Orthogonal;
                     Model.Connections.Add(connObject);
                }
                }
                }
             </code>
             </example>
             <seealso cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorType"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.EndPointPosition">
             <summary>
             Gets or sets the end point position.
             </summary>
             <value>The end point position.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Specifies the node
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n1);
                     LineConnector o = new LineConnector();
                     o.ConnectorType = ConnectorType.Straight;
                     o.TailNode = n1;
                     o.HeadNode = n;
                     o.StartPointPosition=new Point(100,100);
                     o.EndPointPosition=new Point(200,200);
                     Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.Groups">
            <summary>
            Gets the groups to which the INodeGroup objects belong.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadDecoratorShape">
             <summary>
             Gets or sets the shape to be used as the head decorator.
             </summary>
             <value>
             Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.DecoratorShape"/>
             Enum specifying the shape of the head decorator.
             </value>
             <example>
             <para/>This example shows how to set HeadDecoratorShape in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.Label = "Alarm Rings";
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                     Model.Nodes.Add(n1);
                     LineConnector connObject = new LineConnector();
                     connObject.ConnectorType = ConnectorType.Straight;
                     connObject.TailNode = n1;
                     connObject.HeadNode = n;
                     connObject.ConnectorType = ConnectorType.Orthogonal;
                     connObject.HeadDecoratorShape = DecoratorShape.Arrow;
                     Model.Connections.Add(connObject);
                }
                }
                }
             </code>
             </example>
             <remarks>
             Several shapes like None, Arrow, Diamond and Circle have been provided. Default shape is None.
             </remarks>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DecoratorShape"/>
             
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadDecoratorStyle">
             <summary>
             Gets or sets the  style to be used for the head decorator.
             </summary>
             <value>
             Type: <see cref="!:DecoratorStyle"/>
             HeadDecoratorStyle for the connector.
             </value>
             <remarks>
             The decorator shapes can be customized by using the various DecoratorStyle properties like Fill, Stroke, StrokeThickness, StrokeStartLineCap, StrokeEndLineCap, StrokeLineJoin .
             </remarks>
             <example>
             <para/>This example shows how to set HeadDecoratorStyle in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LineStyle.Fill = Brushes.Red;
             connObject.HeadDecoratorStyle.Fill = Brushes.Orange; 
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
             <seealso cref="!:DecoratorStyle"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadNode">
             <summary>
             Gets or sets the first, or source, node upon which this Edge is incident.
             </summary>
             <value>The head node of the connection</value>
             <remarks>
             Every node should have a unique name.
             </remarks>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             //Creating node
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             //Creating a connection.
             LineConnector o2 = new LineConnector();
             o2.ConnectorType = ConnectorType.Straight;
             o2.TailNode = n1;
             o2.HeadNode = n;
             Model.Connections.Add(o2);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadNodeReferenceNo">
            <summary>
            Gets or sets the head node reference no.
            </summary>
            <value>The head node reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadPortReferenceNo">
            <summary>
            Gets or sets the head port reference no.
            </summary>
            <value>The head port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ReferenceID">
            <summary>
            This is used for Internal Purpose to save the GUID value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ID">
            <summary>
            Gets or sets a unique identifier for the connector.
            </summary>
            <value>
            Type: <see cref="T:System.Guid"/>
            Unique ID for the connector.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.IsGrouped">
            <summary>
            Gets or sets a value indicating whether the connector is grouped.
            </summary>
            <value>
            <c>true</c> if this instance is grouped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.IsLabelEditable">
             <summary>
             Gets or sets a value indicating whether this instance is label editable.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if it can be edited, false otherwise.
             </value>
             <example>
             <para/>This example shows how to set IsLabelEditable in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelVisibility = Visibility.Visible;
             connObject.IsLabelEitable = true;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
             <remarks>
             Default Value is true. When this is false, HitTest is also set to false.
             When set to true, clicking on the label will make the editable textbox visible.
             Enter the new label and press ENTER to apply the changed label,
             or press ESC to ignore the new label and revert back to the old one.
             </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.IntermediatePoints">
            <summary>
            Gets or sets the intermediate points.
            </summary>
            <value>The intermediate points.</value>        
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.IsVertexVisible">
            <summary>
            Gets or sets a value indicating whether this instance is vertex visible.
            </summary>
            <value>
            	<c>true</c> if this instance is vertex visible; otherwise, <c>false</c>.
            </value>        
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.IsVertexMovable">
            <summary>
            Gets or sets a value indicating whether this instance is vertex movable.
            </summary>
            <value>
            	<c>true</c> if this instance is vertex movable; otherwise, <c>false</c>.
            </value>        
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.VertexStyle">
            <summary>
            Gets or sets the vertex style.
            </summary>
            <value>The vertex style.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.IsSelected">
             <summary>
             Gets or sets a value indicating whether the connector has been selected or not.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True if the connector is selected, false otherwise.
             </value>
             <example>
             <para/>This example shows how to set  LabelTemplate   in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.IsSelected = true;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.Label">
             <summary>
             Gets or sets the Label for the connector.
             </summary>
             <value>
             Type: <see cref="T:System.Object"/>
             Label for the connector.
             </value>
             <example>
             <para/>This example shows how to set Label in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.Label = "Alarm Rings";
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                     Model.Nodes.Add(n1);
                     LineConnector connObject = new LineConnector();
                     connObject.ConnectorType = ConnectorType.Straight;
                     connObject.TailNode = n1;
                     connObject.HeadNode = n;
                     connObject.ConnectorType = ConnectorType.Orthogonal;
                     connObject.Label="Syncfusion";
                     Model.Connections.Add(connObject);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelBackground">
             <summary>
             Gets or sets the label background.
             </summary>
             <value>The label background. Default value is White</value>
             <example>
             <para/>This example shows how to set LabelBackground in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.Label = "Alarm Rings";
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                     Model.Nodes.Add(n1);
                     LineConnector connObject = new LineConnector();
                     connObject.ConnectorType = ConnectorType.Straight;
                     connObject.TailNode = n1;
                     connObject.HeadNode = n;
                     connObject.ConnectorType = ConnectorType.Orthogonal;
                     connObject.LabelBackground=Brushes.Beige;
                     Model.Connections.Add(connObject);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontFamily">
             <summary>
             Gets or sets the label font family.
             </summary>
             <value>Default value is Arial.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelFontFamily = new FontFamily("Verdana");
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontSize">
             <summary>
             Gets or sets the label font size.
             </summary>
             <value>Default value is 11d.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelFontSize = 14;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontStyle">
             <summary>
             Gets or sets the label font style.
             </summary>
             <value>Default value is Normal.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelFontStyle = FontStyles.Italic;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelFontWeight">
             <summary>
             Gets or sets the label font weight.
             </summary>
             <value>Default value is SemiBold.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelFontWeight = FontWeights.Bold;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelForeground">
             <summary>
             Gets or sets the Label Foreground.
             </summary>
             <value>The label foreground. Default value is Black.</value>
             <example>
             <para/>This example shows how to set LabelForeground in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.Label = "Alarm Rings";
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                     Model.Nodes.Add(n1);
                     LineConnector connObject = new LineConnector();
                     connObject.ConnectorType = ConnectorType.Straight;
                     connObject.TailNode = n1;
                     connObject.HeadNode = n;
                     connObject.ConnectorType = ConnectorType.Orthogonal;
                     connObject.LabelForeground=Brushes.Beige;
                     Model.Connections.Add(connObject);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplate">
             <summary>
             Gets or sets  the LabelTemplate for the connector.This is a dependency property.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Controls.ControlTemplate"/>
             LabelTemplate for the connector.
             </value>
             <example>
             <para/>This example shows how to set  LabelTemplate   in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelTemplate = (ControlTemplate)FindResource( "LabelCustomTemplate" );
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             <para/>This example shows how to write a  LabelTemplate in XAML.
             <code language="XAML">
             &lt;ControlTemplate x:Key="LabelCustomTemplate"&gt;
             &lt;StackPanel Orientation="Horizontal"&gt;
             &lt;Image Source="text.png" Width="20" Height="20"/&gt;
             &lt;TextBlock Text="Hello"/&gt;
             &lt;/StackPanel&gt;
             &lt;/ControlTemplate&gt;
             </code>
             </example>
             <seealso cref="T:Windows.UI.Xaml.Controls.ControlTemplate"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateHorizontalAlignment">
             <summary>
             Gets or sets the label template horizontal alignment.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.HorizontalAlignment"/>
             Enum specifying the alignment position.
             </value>
             <remarks>Default HorizontalAlignment is at the Center.</remarks>
             <example>
             <para/>This example shows how to set LabelTemplateHorizontalAlignment in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.Label="Syncfusion";
             connObject.LabelTemplateHorizontalAlignment= HorizontalAlignment.Left;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateVerticalAlignment">
             <summary>
             Gets or sets the label template vertical alignment.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.VerticalAlignment"/>
             Enum specifying the alignment position.
             </value>
             <remarks>Default VerticalAlignment is at the Top.</remarks>
             <example>
             <para/>This example shows how to set LabelTemplateVerticalAlignment in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelTemplateVerticalAlignment= VerticalAlignment.Left;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTextAlignment">
             <summary>
             Gets or sets the label text alignment.
             </summary>
             <value>Default value is Center.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelTextAlignment = TextAlignment.Left;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTextWrapping">
             <summary>
             Gets or sets the label text wrapping.
             </summary>
             <value>Default value is NoWrap.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelTextWrapping = TextWrapping.Wrap;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelVerticalAlignment">
             <summary>
             Gets or sets the label vertical alignment.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.VerticalAlignment"/>
             Enum specifying the alignment position.
             </value>
             <remarks>Default VerticalAlignment is at the Top.</remarks>
             <example>
             <para/>This example shows how to set LabelVerticalAlignment in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.Label="Syncfusion";
             connObject.LabelVerticalAlignment= VerticalAlignment.Left;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelVisibility">
             <summary>
             Gets or sets the label visibility.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Visibility"/>
             Enum specifying the visibility.
             </value>
             <example>
             <para/>This example shows how to set LabelVisibility in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.Label = "Alarm Rings";
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                     Model.Nodes.Add(n1);
                     LineConnector connObject = new LineConnector();
                     connObject.ConnectorType = ConnectorType.Straight;
                     connObject.TailNode = n1;
                     connObject.HeadNode = n;
                     connObject.ConnectorType = ConnectorType.Orthogonal;
                     connObject.LabelVisibility = Visibility.Visible;
                     Model.Connections.Add(connObject);
                }
                }
                }
             </code>
             </example>
             <remarks>
             By default label visibility is set to visible.
             </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelWidth">
             <summary>
             Gets or sets the width of the label.
             </summary>
             <value>The width of the label. By default it is set to the line width.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LabelWidth=50;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LineStyle">
             <summary>
             Gets or sets the line style to be used for the connector.
             </summary>
             <value>
             Type: <see cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LineStyle"/>
             LineStyle for the connector.
             </value>
             <remarks>
             The line connectors can be customized by using the various LineStyle properties like Fill, Stroke, StrokeThickness, StrokeStartLineCap, StrokeEndLineCap, StrokeLineJoin .
             </remarks>
             <example>
             <para/>This example shows how to set LineStyle in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LineStyle.Fill = Brushes.Red;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
             <seealso cref="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LineStyle"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelHorizontalAlignment">
             <summary>
             Gets or sets the label horizontal alignment.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.HorizontalAlignment"/>
             Enum specifying the alignment position.
             </value>
             <remarks>Default HorizontalAlignment is at the Center. This property will take effect only if the LabelWidth is set.</remarks>
             <example>
             <para/>This example shows how to set LabelHorizontalAlignment in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.Label="Syncfusion";
             connObject.LabelHorizontalAlignment= HorizontalAlignment.Left;
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.Syncfusion#UI#Xaml#Diagram#ICommon#NewZIndex">
            <summary>
            Gets or sets the new ZIndex value.
            </summary>
            <value>The new ZIndex value.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.Syncfusion#UI#Xaml#Diagram#ICommon#OldZIndex">
            <summary>
            Gets or sets the old ZIndex value.
            </summary>
            <value>The old ZIndex value.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ParentID">
            <summary>
            Gets or sets the parent ID.
            </summary>
            <value>The parent ID.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ReferenceNo">
            <summary>
            Gets or sets the reference number of the INodeGroup objects. Used for serialization purposes..
            </summary>
            <value>The reference no.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.StartPointPosition">
             <summary>
             Gets or sets the start point position.
             </summary>
             <value>The start point position.</value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Specifies the node
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n1);
                     LineConnector o = new LineConnector();
                     o.ConnectorType = ConnectorType.Straight;
                     o.TailNode = n1;
                     o.HeadNode = n;
                     o.StartPointPosition=new Point(100,100);
                     o.EndPointPosition=new Point(200,200);
                     Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadShape">
            <summary>
            Gets or sets the head path of the line.
            </summary>
            <remarks>
            Default path of the head.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailShape">
            <summary>
            Gets or sets the tail path of the line.
            </summary>
            <remarks>
            Default path of the tail.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailDecoratorShape">
             <summary>
             Gets or sets the shape to be used as the tail decorator.
             </summary>
             <value>
             Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.DecoratorShape"/>
             Enum specifying the shape of the tail decorator.
             </value>
             <example>
             <para/>This example shows how to set TailDecoratorShape in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.Label = "Alarm Rings";
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                     Model.Nodes.Add(n1);
                     LineConnector connObject = new LineConnector();
                     connObject.ConnectorType = ConnectorType.Straight;
                     connObject.TailNode = n1;
                     connObject.HeadNode = n;
                     connObject.ConnectorType = ConnectorType.Orthogonal;
                     connObject.TailDecoratorShape = DecoratorShape.Arrow;
                     Model.Connections.Add(connObject);
                }
                }
                }
             </code>
             </example>
             <remarks>
             Several shapes like None, Arrow, Diamond and Circle have been provided. Default shape is Arrow.
             </remarks>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DecoratorShape"/>
             
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailDecoratorStyle">
             <summary>
             Gets or sets the  style to be used for the tail decorator.
             </summary>
             <value>
             Type: <see cref="!:DecoratorStyle"/>
             TailDecoratorStyle for the connector.
             </value>
             <remarks>
             The decorator shapes can be customized by using the various DecoratorStyle properties like Fill, Stroke, StrokeThickness, StrokeStartLineCap, StrokeEndLineCap, StrokeLineJoin .
             </remarks>
             <example>
             <para/>This example shows how to set TailDecoratorStyle in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.Label = "Alarm Rings";
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             LineConnector connObject = new LineConnector();
             connObject.ConnectorType = ConnectorType.Straight;
             connObject.TailNode = n1;
             connObject.HeadNode = n;
             connObject.ConnectorType = ConnectorType.Orthogonal;
             connObject.LineStyle.Fill = Brushes.Red;
             connObject.TailDecoratorStyle.Fill = Brushes.Orange; 
             Model.Connections.Add(connObject);
             }
             }
             }
             </code>
             </example>
             <seealso cref="!:DecoratorStyle"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailNode">
             <summary>
             Gets or sets the second, or target, node upon which this Edge is incident.
             </summary>
             <value>The tail node of the connection</value>
             <remarks>
             Every Node should have unique name.
             </remarks>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             //Creating node
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             Model.Nodes.Add(n);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             //Creating a connection.
             LineConnector o2 = new LineConnector();
             o2.ConnectorType = ConnectorType.Straight;
             o2.TailNode = n1;
             o2.HeadNode = n;
             Model.Connections.Add(o2);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailNodeReferenceNo">
            <summary>
            Gets or sets the tail node reference no.
            </summary>
            <value>The tail node reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailPortReferenceNo">
            <summary>
            Gets or sets the tail port reference no.
            </summary>
            <value>The tail port reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionPoints">
            <summary>
            Gets or sets the list of connection points
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.Distance">
            <summary>
            Gets or sets the distance of the label from the nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.DropPoint">
            <summary>
            Gets or sets the point at which the Connector was dropped.
            </summary>
            <value>The drop point.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelAngle">
            <summary>
            Gets or sets the angle at which the Label is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:Windows.Foundation.Point"/>
            The angle .
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelHeight">
            <summary>
            Gets or sets the height of the label.
            </summary>
            <value>The height of the label.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplateAngle">
            <summary>
            Gets or sets the label template angle.
            </summary>
            <value>The label template angle.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelPosition">
            <summary>
            Gets or sets the point where the Label is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:Windows.Foundation.Point"/>
            The point of the Label position.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LabelTemplatePosition">
            <summary>
            Gets or sets the label template position.
            </summary>
            <value>The label template position.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.MeasurementUnit">
            <summary>
            Gets or sets the measurement unit.
            <value>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.MeasureUnits"/>
            Current Measurement unit.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TextWidth">
            <summary>
            Gets or sets the text width.
            </summary>
            <value>
            Type: <see cref="T:Windows.Foundation.Point"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectionEndSpace">
             <summary>
             Gets or sets the distance between the connector end position and the node.
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             Value indicating the distance.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   //Specifies the node
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    Model.Nodes.Add(n);
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n1);
                     LineConnector o = new LineConnector();
                     o.ConnectorType = ConnectorType.Straight;
                     o.TailNode = n1;
                     o.HeadNode = n;
                     o.Label="Syncfusion";
                     o.ConnectionEndSpace= 6d; 
                     Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
             <remarks>
              Default value is 6. 
              In case, if a decorator shape other than none is specified, 
              a value &gt;=6 should be given to make the connection start from the edge of the node,
              or else the connector may cross the edge of the node .
             </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.ConnectorPathGeometry">
            <summary>
            Gets or sets the PathGeometry of te connector.
            </summary>
            <value>
            Type: <see cref="T:Windows.UI.Xaml.Media.Geometry"/>
            PathGeometry of the connector.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.HeadDecoratorAngle">
            <summary>
            Gets or sets the angle at which the head decorator is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Angle of the head decorator.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.TailDecoratorAngle">
            <summary>
            Gets or sets the angle at which the tail decorator is to be positioned.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Angle of the tail decorator.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.BendLength">
            <summary>
            Gets or sets the bent line length which is used only for Orthogonal Line ConnectorType.
            </summary>
            <remarks>
            Default value is 10d.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LineConnector.LineCanvas">
            <summary>
            Gets or sets the line canvas.Used for internal assignments.
            </summary>
            <remarks>
            Default value is 10d.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LineConnector.SlopeUndefinedException">
            <summary>
            Represents the slope undefined exception .
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LineConnector.SlopeUndefinedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector.SlopeUndefinedException"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LoopBackConnectionSettings">
            <summary>
            LoopBackConnectionSettings class is used to set the LoopBackConnection properties and Enable the Autoupdate of the LoopBackConnection
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LoopBackConnection">
            <summary>
            LoopBackConnection class is used to set/get PositionAlignment and Offset of the LoopBackConnection
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.BooleanToVisibilityConverter">
            <summary>
            Convertor class for converting Boolean value to Visibility property value
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Method for performing the conversion
            </summary>
            <param name="value">converts this value object into bool type</param>
            <param name="targetType">passing target type</param>
            <param name="parameter">passing parameter object</param>
            <param name="culture">passing culture CultureInfo</param>
            <returns>Type : Visibility</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Method for performing the conversion  in the reverse direction
            </summary>
            <param name="value">passing value object</param>
            <param name="targetType">passing target type</param>
            <param name="parameter">passing parameter object</param>
            <param name="culture">passing culture CultureInfo</param>
            <returns>Type : throw</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:DelegateCommand"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DelegateCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="!:DelegateCommand"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ChildDataParser">
            <summary>
            Converts collection of objects to Hierarchical Data format.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ChildDataParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ChildDataParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ChildDataParser.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ChildDataParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ChildDataParser.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ChildDataParser.ChildItems">
            <summary>
            Gets or sets the child items.
            </summary>
            <value>The child items.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventHandler">
            <summary>
            Represents PreviewNodeDrop Event Handler. Invoked just before the node object is created in the Drop opeartion.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventRoutedEventArgs">
            <summary>
            Represents PreviewNodeDrop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventRoutedEventArgs.Cancel">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventRoutedEventArgs.Node">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="P:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventRoutedEventArgs.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventHandler">
            <summary>
            Represents PreviewConnectorDrop Event Handler. Invoked just before the LineConnector object is created in the Drop opeartion.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventRoutedEventArgs">
            <summary>
            Represents PreviewConnectorDrop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventRoutedEventArgs.conn">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventRoutedEventArgs.Cancel">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LabelChangedEventHandler">
            <summary>
            Represents Node Label Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Diagram.LabelRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs">
            <summary>
            Represents Node Label Changed Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.oldval">
            <summary>
            Used to store old value
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.newval">
            <summary>
            Used to store new value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.c_node">
            <summary>
            Used to store the node
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="node">The node object.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.OldLabelValue">
            <summary>
            Gets or sets the old label value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.NewLabelValue">
            <summary>
            Gets or sets the new label value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.Node">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="P:Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LabelConnChangedEventHandler">
            <summary>
            Represents Connector Label Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.LabelConnRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs">
            <summary>
            Represents Connector Label Changed Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.oldval">
            <summary>
            Used to store old value
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.newval">
            <summary>
            Used to store new value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.conn">
            <summary>
            Used to store the connector
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.UI.Xaml.Diagram.LineConnector,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.#ctor(System.String,System.String,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="newvalue">The new value.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.OldLabelValue">
            <summary>
            Gets or sets the old label value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.NewLabelValue">
            <summary>
            Gets or sets the new label value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.HeadNode">
            <summary>
            Gets or sets the HeadNode object.
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs.TailNode">
            <summary>
            Gets or sets the TailNode object.
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LabelEditConnChangedEventHandler">
            <summary>
            Represents  Label Edit Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.LabelEditConnRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs">
            <summary>
            Represents  Label Edit Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.oldval">
            <summary>
            Used to store old value
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.conn">
            <summary>
            Used to store the connector
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.UI.Xaml.Diagram.LineConnector,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.#ctor(System.String,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs"/> class.
            </summary>
            <param name="oldvalue">The old value.</param>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.OldLabelValue">
            <summary>
            Gets or sets the old label value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.HeadNode">
            <summary>
            Gets or sets the HeadNode object.
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.TailNode">
            <summary>
            Gets or sets the TailNode object.
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler">
            <summary>
            Represents Node Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.NodeRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs">
            <summary>
            Represents Node Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs.Node">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="P:Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeChangedEventHandler">
            <summary>
            Represents Node Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.NodeChangedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs">
            <summary>
            Represents  Node Changed Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.PreviousNode">
            <summary>
            Gets or sets the Node object.
            <value>
            The previous  Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs.CurrentNode">
            <summary>
            Gets or sets the Node object.
            <value>
            The current Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeDroppedEventHandler">
            <summary>
            Represents Node Drop Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.NodeDroppedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs">
            <summary>
            Represents  Node Drop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs.h_node">
            <summary>
            Used to store the head node.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs.itemname">
            <summary>
            Used to store the <see cref="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem"/> name.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.IShape,System.String,Windows.Foundation.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs"/> class.
            </summary>
            <param name="node">The node object.</param>
            <param name="name">The symbolpalette item name.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs.DroppedNode">
            <summary>
            Gets or sets the Node object.
            <value>
            The dropped Node .<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs.SymbolPaletteItemName">
            <summary>
            Gets or sets the name of the symbol palette item.
            </summary>
            <value>The name of the symbol palette item.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnectorDroppedEventHandler">
            <summary>
            Represents Connector Drop Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.ConnectorDroppedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnectorDroppedRoutedEventArgs">
            <summary>
            Represents  Connector Drop Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectorDroppedRoutedEventArgs.line">
            <summary>
            Used to store the line connector
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectorDroppedRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectorDroppedRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectorDroppedRoutedEventArgs.DroppedConnector">
            <summary>
            Gets or sets the LineConnector object.
            <value>
            The dropped Node .<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnChangedEventHandler">
            <summary>
            Represents Connector Changed Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.ConnRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs">
            <summary>
            Represents  Connector Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node .</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="hnode">The head node.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.HeadNode">
            <summary>
            Gets or sets the HeadNode .
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs.TailNode">
            <summary>
            Gets or sets the TailNode .
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnDragChangedEventHandler">
            <summary>
            Represents Connection Drag Start Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.ConnDragRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs">
            <summary>
            Represents  Connector Drag Start Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="tnode">The tail node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.FixedNodeEnd">
            <summary>
            Gets or sets the Fixed Node .
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs.MovableNodeEnd">
            <summary>
            Gets or sets the MovableNode .
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnDragEndChangedEventHandler">
            <summary>
            Represents Connection Drag End Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.ConnDragEndRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs">
            <summary>
            Represents  Connector Drag End Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.h_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.t_node">
            <summary>
            Used to store the tail node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.conn">
            <summary>
            Used to store the line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector,Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="tnode">The tail node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
            <param name="tnode">The tail node.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.FixedNodeEnd">
            <summary>
            Gets or sets the Fixed Node .
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs.HitNodeEnd">
            <summary>
            Gets or sets the HitNode .
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionEventHandler">
            <summary>
            Represents Before Connection Create Event Handler.Invoked just before the connection is created.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.BeforeCreateConnectionRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionRoutedEventArgs">
            <summary>
            Represents  BeforeCreateConnection Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionRoutedEventArgs.conn">
            <summary>
            Used to store the Line connector
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionRoutedEventArgs"/> class.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionRoutedEventArgs.Connector">
            <summary>
            Gets or sets the Connector object.
            <value>
            Connector object.<see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteEventHandler">
            <summary>
            Represents Connection Delete Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.ConnectionDeleteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs">
            <summary>
            Represents  Connector Delete Event argument class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs"/> class.
            </summary>
            <param name="line">The line object.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs.line">
            <summary>
            Refers to the line instance.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs.DeletedLineConnector">
            <summary>
            Gets or sets the deleted line connector.
            </summary>
            <value>The deleted line connector.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeDeleteEventHandler">
            <summary>
            Represents Node Delete Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs">
            <summary>
            Represents  Node Delete Event argument class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs.#ctor(Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs"/> class.
            </summary>
            <param name="deletednode">The deleted node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs.node">
            <summary>
            Refers to the <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> instance.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs.DeletedNode">
            <summary>
            Gets or sets the deleted node.
            </summary>
            <value>The deleted node.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeNudgeEventHandler">
            <summary>
            Represents Node Nudge Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LineNudgeEventHandler">
            <summary>
            Represents Line Nudge Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.NodeDeleteRoutedEventArgs"/> instance containing the event data.</param>    
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LineNudgeEventArgs">
            <summary>
            Represents Node Nudge Event argument class.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.NodeNudgeEventArgs">
            <summary>
            Represents Line Nudge Event argument class.
            </summary>    
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DrawingToolEventHandler">
            <summary>
            Represents DrawingTool Event Handler.
            </summary>
            <param name="sender">The sender Object.</param>
            <param name="evtArgs">The <see cref="!:Syncfusion.Windows.Diagram.NodeRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DrawingToolEventArgs">
            <summary>
            Represents Node Event argument class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DrawingToolEventArgs.drawing_node">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DrawingToolEventArgs.drawing_tool">
            <summary>
            Used to store the head node
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DrawingToolEventArgs.#ctor(System.Object,Syncfusion.UI.Xaml.Diagram.DrawingTools)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs"/> class.
            </summary>
            <param name="hnode">The head node.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DrawingToolEventArgs.DrawingObject">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DrawingToolEventArgs.DrawingTool">
            <summary>
            Gets or sets the Node object.
            <value>
            Node object.<see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.SfDiagram">
             <summary>
             Represents the Diagram control.
             <toolboxitem>true</toolboxitem>
             <toolboxvscategory>Syncfusion controls for Metro</toolboxvscategory>
             <toolboxblendcategory>Syncfusion controls for Metro</toolboxblendcategory>
             </summary>
             <remarks>
             <para>The Diagram control is the base class which contains the view and the this.Model. 
             It receives user input and translates it into actions and commands on the this.Model and view.  
             It also implements symbol palette and scrolling, and enables horizontal and vertical scrollbars when the size of the view exceeds the size of the window. 
             </para>
             </remarks>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.SfDiagram"/> in XAML.
             <code language="XAML">
             &lt;Window x:Class="RulersAndUnits.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                          lt;syncfusion:DiagramControl.this.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.this.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                    Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    ShowHorizontalGridLine="False" 
                                                    ShowVerticalGridLine="False"
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.SfDiagram"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel this.Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   this.Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.this.Model = this.Model;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.dc">
            <summary>
            Used to store DiagramControl instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.exe">
            <summary>
            Used to check if executed once.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.isnodepresent">
            <summary>
            Checks if any node object is available for deletion.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.ispagesaved">
            <summary>
            Used to check if page is saved or not.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.IsSymbolPaletteEnabledProperty">
            <summary>
            Identifies whether the SymbolPalette is enabled or not. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.isunloaded">
            <summary>
            Used to check if Diagram Control is unloaded.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.mispageloaded">
            <summary>
            Used to check if page is loaded.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.mispalettechanged">
            <summary>
            Used to store SymbolPalette visibility changed value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.ModelProperty">
            <summary>
            Identifies the this.Model .  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.nodecleared">
            <summary>
            Used to check if Nodes.Clear() is called.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.SymbolPaletteProperty">
            <summary>
            Identifies  the SymbolPalette . This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.ViewProperty">
            <summary>
            Identifies the View.  This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.SfDiagram"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.Connections_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls Connections_CollectionChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.DiagramControl_Loaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Calls DiagramControl_Loaded method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.DiagramView_LayoutUpdated(System.Object,System.Object)">
            <summary>
            Calls DiagramView_LayoutUpdated method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.DrawConnectios">
            <summary>
            Draws the connections on the DiagramPage.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.DrawNodes">
            <summary>
            Draws the nodes on the DiagramPage.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SfDiagram.saveDialog">
            <summary>
            Used to store the group count.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.Clone(System.Object,System.Int32)">
            <summary>
            Clones the specified obj.
            </summary>
            <param name="obj">The object to be cloned.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.IsPresentationFrameworkCollection(System.Type)">
            <summary>
            Determines whether [is presentation framework collection] [the specified type].
            </summary>
            <param name="type">The type of the object.</param>
            <returns>
            <c>true</c> if [is presentation framework collection] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.ClonePath(System.Object,System.Object)">
            <summary>
            Clones the Path object
            </summary>
            <param name="element">Element to be clone</param>
            <param name="obj">object that is cloned</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.InternalNodes_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls InternalNodes_CollectionChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.OnApplyTemplate">
            <summary>
            Overrides the OnApplyTemplate().
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.OnModelChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnModelChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.OnShowPalleteChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowPalleteChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.OnViewChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnViewChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SfDiagram.CanExecute(System.Object)">
            <summary>
            Determines whether this instance [command] the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if this instance [command] the specified parameter; 
            	otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SameSize">
            <summary>
            SameSize Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SameHeight">
            <summary>
            SameHeight Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SameWidth">
            <summary>
            SameWidth Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.AlignBottom">
            <summary>
            AlignBottom Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.AlignTop">
            <summary>
            AlignTop Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.AlignLeft">
            <summary>
            AlignLeft Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.AlignCenter">
            <summary>
            AlignCenter Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.AlignRight">
            <summary>
            AlignRight Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.AlignMiddle">
            <summary>
            AlignMiddle Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SpaceAcross">
            <summary>
            SpaceAcross Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SpaceDown">
            <summary>
            SpaceDown Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SendToBack">
            <summary>
            SendToBack Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SendBackward">
            <summary>
            SendBackward Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.BringToFront">
            <summary>
            BringToFront Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.BringForward">
            <summary>
            BringForward Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.MoveDown">
            <summary>
            MoveDown Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.MoveUp">
            <summary>
            MoveDown Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.MoveLeft">
            <summary>
            MoveDown Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.MoveRight">
            <summary>
            MoveDown Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.Cut">
            <summary>
            Cut Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.Copy">
            <summary>
            Copy Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.Paste">
            <summary>
            Paste Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.Delete">
            <summary>
            Delete Command
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.IsPageLoaded">
            <summary>
            Gets or sets a value indicating whether this instance is page loaded.
            </summary>
            <value>
            <c>true</c> if this instance is page loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.IspageSaved">
            <summary>
            Gets or sets a value indicating whether page is saved.
            </summary>
            <value><c>true</c> if page is saved; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.IsSymbolPaletteEnabled">
             <summary>
             Gets or sets a value indicating whether this instance is symbol palette enabled.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if SymbolPalette is enabled, false otherwise.
             </value>
             <example>
             <code language="XAML">
             &lt;UserControl x:Class="Sample.MainPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                 xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight"
                xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows" 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                          lt;syncfusion:DiagramControl.this.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.this.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/UserControl&gt;
             </code>
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel this.Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   this.Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.this.Model = this.Model;
                   SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
                   sfilter.Label = "Custom";
                    Control.SymbolPalette.SymbolFilters.Add(sfilter);
                   SymbolPaletteGroup s = new SymbolPaletteGroup();
                   s.Label = "Custom";
                   SymbolPalette.SetFilterIndexes(s, new Int32Collection(new int[] { 0, 5}));
                   Control.SymbolPalette.SymbolGroups.Add(s);
                   SymbolPaletteItem ss = new SymbolPaletteItem();
                   Path path = this.Resources["CustomShape"] as Path;
                   ss.Content = path;
                   s.Items.Add(ss);
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                }
                }
                }
             </code>
             </example>
             <seealso cref="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SymbolPalette"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.IsSymbolPaletteVisibilityChanged">
            <summary>
            Gets or sets a value indicating whether the Symbol Palette
            </summary>
            <value>
            <c>true</c> if this instance is symbol palette visibility changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.IsUnloaded">
            <summary>
            Gets or sets a value indicating whether the Diagram Control is unloaded.
            </summary>
            <value>
            <c>true</c> if the Diagram Control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.Model">
             <summary>
             Gets or sets the this.Model property.
             </summary>
             <value>
             Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/>
             </value>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.SfDiagram"/> in XAML.
             <code language="XAML">
             &lt;UserControl x:Class="Sample.MainPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                 xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight"
                xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows" 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                          lt;syncfusion:DiagramControl.this.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.this.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                    Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    ShowHorizontalGridLine="False" 
                                                    ShowVerticalGridLine="False"
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/UserControl&gt;
             </code>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.SfDiagram"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel this.Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   this.Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.this.Model = this.Model;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SymbolPalette">
             <summary>
             Gets the SymbolPalette property.
             </summary>
             <value>
             Type: <see cref="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SymbolPalette"/>
             </value>
             <example>
             <code language="XAML">
             &lt;UserControl x:Class="Sample.MainPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                 xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight"
                xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows" 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                          lt;syncfusion:DiagramControl.this.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.this.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/UserControl&gt;
             </code>
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel this.Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   this.Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.this.Model = this.Model;
                   SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
                   sfilter.Label = "Custom";
                    Control.SymbolPalette.SymbolFilters.Add(sfilter);
                   SymbolPaletteGroup s = new SymbolPaletteGroup();
                   s.Label = "Custom";
                   SymbolPalette.SetFilterIndexes(s, new Int32Collection(new int[] { 0, 5}));
                   Control.SymbolPalette.SymbolGroups.Add(s);
                   SymbolPaletteItem ss = new SymbolPaletteItem();
                   Path path = this.Resources["CustomShape"] as Path;
                   ss.Content = path;
                   s.Items.Add(ss);
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                }
                }
                }
             </code>
             </example>
             <seealso cref="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.SymbolPalette"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SfDiagram.View">
             <summary>
             Gets or sets the view.
             </summary>
             <value>Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/></value>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> in XAML.
             <code language="XAML">
             &lt;UserControl x:Class="Sample.MainPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                 xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight"
                xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows" 
                         &gt;
             &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
             IsSymbolPaletteEnabled="True"
             Background="WhiteSmoke"&gt;
             lt;syncfusion:DiagramControl.this.Model&gt;
             &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
             &lt;/syncfusion:DiagramModel&gt;
             &lt;/syncfusion:DiagramControl.this.Model&gt;
             &lt;syncfusion:DiagramControl.View&gt;
             &lt;syncfusion:DiagramView  IsPageEditable="True"
             Background="LightGray"
             Bounds="0,0,12,12"
             ShowHorizontalGridLine="False"
             ShowVerticalGridLine="False"
             Name="diagramView"  &gt;
             &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
             &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
             &lt;syncfusion:DiagramView.VerticalRuler&gt;
             &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
             &lt;/syncfusion:DiagramView.VerticalRuler &gt;
             &lt;/syncfusion:DiagramView&gt;
             &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/USerControl&gt;
             </code>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel this.Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             this.Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.this.Model = this.Model;
             HorizontalRuler hruler = new HorizontalRuler();
             View.HorizontalRuler = hruler;
             View.ShowHorizontalGridLine = false;
             View.ShowVerticalGridLine = false;
             VerticalRuler vruler = new VerticalRuler();
             View.VerticalRuler = vruler;
             View.Bounds = new Thickness (0, 0, 1000, 1000);
             View.IsPageEditable = true;
             }
             }
             }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DiagramPage">
            <summary>
            Represents the diagram page .
            <para> The DiagramPage is just a container to hold the objects(nodes and connectors) added through model.
            The DiagramView uses the page to display the diagram objects.
            </para>
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IDiagramPage">
            <summary>
            Provides the interface to the page.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IDiagramPage.InvalidateMeasure">
            <summary>
            Invalidates the measure.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IDiagramPage.SelectionList">
            <summary>
            Gets the selection list.
            </summary>
            <value>The selection list.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IDiagramPage.ActualWidth">
            <summary>
            Gets the actual width.
            </summary>
            <value>The actual width.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IDiagramPage.ActualHeight">
            <summary>
            Gets the actual height.
            </summary>
            <value>The actual height.</value>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.EnableResizingCurrentNodeOnMultipleSelectionProperty">
            <summary>
            Identifies the AllowSelect dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.LayoutTypeProperty">
            <summary>
            Defines the LayoutType property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.mselectionList">
            <summary>
            Used to store selection list
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.o">
            <summary>
            Used to store a static object.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.childcount">
            <summary>
            Used to refer to the child count value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.diagctrl">
            <summary>
            Used to refer to the diagram control instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.dview">
            <summary>
            Used to store the View instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.href">
            <summary>
            Used to store the horizontal spacing reference.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.i">
            <summary>
            Used to store the int value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.lstyleref">
            <summary>
            Used to store the line style reference value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.ltref">
            <summary>
            Used to store the layout type.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.mconnectionType">
            <summary>
            Used to store the connector type.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.namecount">
            <summary>
            Used to refer to the name count
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.no">
            <summary>
            Used to refer to the children count.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.oref">
            <summary>
            Used to store the  tree orientation
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.sref">
            <summary>
            Used to store the space between the sub-trees.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.startPoint">
            <summary>
            Used to store the start point.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.styleref">
            <summary>
            Used to store the resize bool value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.vref">
            <summary>
            Used to store the vertical spacing reference.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramPage.spoint">
            <summary>
            Used to Start Point of the Page.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramPage"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.Copyitem(System.Object,Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem)">
            <summary>
            Creates a clone of the object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.GetDiagramControl(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the Diagram Control object.
            </summary>
            <param name="element">The element.</param>
            <returns>The Diagram Control object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures elements.
            </summary>
            <param name="availableSize">The available size</param>
            <returns>The available size.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Positions child elements and determines a size for the control.
            </summary>
            <param name="finalSize">The final area within the parent
            that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.OnUnitsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [units changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.DropLine(Syncfusion.UI.Xaml.Diagram.ConnectorType,Windows.Foundation.Point,Syncfusion.UI.Xaml.Diagram.SfDiagram)">
            <summary>
            Drops the line.
            </summary>
            <param name="connectortype">The connector type.</param>
            <param name="position">The position.</param>
            <param name="diagctrl">The diagram control object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.DiagramPage_Loaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Is called when the diagram page gets loaded.
            </summary>
            <param name="sender">Diagram page</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.UpdateDrawingTool(Syncfusion.UI.Xaml.Diagram.LineConnector,Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Updating HeadNode and TailNode[Click and Drag ,Point to Point and Point to Node
            </summary>
            <param name="line">LineConnector</param>
            <param name="point">Point -CurrentPoint</param>
            <param name="Start">StartPoint</param>
            <param name="end">EndPoint</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramPage.UpdateConnectorType(Syncfusion.UI.Xaml.Diagram.LineConnector)">
            <summary>
            Updating the ConnectorType
            </summary>
            <param name="line">LineConnector</param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramPage.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.ConnectorType">
            <summary>
            Gets or sets the the type of connection to be used.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.ConnectorType"/>
            Enum specifying the type of the connector to be used.
            </value>
            <example>
            <para/>This example shows how to set ConnectorType in C#.
            <code language="C#">
            connObject.ConnectorType = ConnectorType.Orthogonal;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.EnableResizingCurrentNodeOnMultipleSelection">
            <summary>
            Gets or sets a value indicating whether [enable resizing current node on multiple selection].
            </summary>
            <value>
            <c>true</c> if [enable resizing current node on multiple selection]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.HorizontalSpacingref">
            <summary>
            Gets or sets the Horizontal spacing reference.Used for Serialization purpose.
            </summary>
            <value>The horizontal spacing reference.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.LayoutTyperef">
            <summary>
             Gets or sets the SpaceBetweenSubTreeSpacing reference .Used for Serialization purpose.
            </summary>
            <value>The sub tree spacing reference.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.LineStyleRef">
            <summary>
            Gets or sets the LineStyleRef reference. Used for Serialization purpose.
            </summary>
            <value>The line style ref.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.OrientationRef">
            <summary>
            Gets or sets the orientation reference. Used for Serialization purpose.
            </summary>
            <value>The orientation ref.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.ReferenceCount">
            <summary>
            Gets or sets the reference count. Used for serialization purposes
            </summary>
            <value>The reference count.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.SelectionList">
            <summary>
            Gets the Selection List of the items.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeCollection"/>
            The list containing the selected items.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.StyleRef">
            <summary>
            Gets or sets the style reference. Used for Serialization purpose.
            </summary>
            <value>The style ref.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.SubTreeSpacingref">
            <summary>
             Gets or sets the SpaceBetweenSubTreeSpacing reference .Used for Serialization purpose.
            </summary>
            <value>The sub tree spacing reference.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramPage.VerticalSpacingref">
            <summary>
            Gets or sets the vertical spacing reference .Used for Serialization purpose.
            </summary>
            <value>The vertical spacing reference.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.HandleRenderer">
            <summary>
            Represents Resize helper class which helps in the resizing operation.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HandleRenderer.ComputeDragBoundaries(System.Collections.Generic.IEnumerable{Syncfusion.UI.Xaml.Diagram.Node},System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the drag limits.
            </summary>
            <param name="selectedItems">IEnumerable Collection instance.</param>
            <param name="minoffx">The minoffx.</param>
            <param name="minoffy">The minoffy.</param>
            <param name="minimumHorDelta">The minimum horizontal delta.</param>
            <param name="minimumVertDelta">The minimum vertical delta.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HandleRenderer.ResizeBottom(System.Double,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.IDiagramPage,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Resizes the bottom side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="munits">The measure units..</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HandleRenderer.ResizeLeft(System.Double,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.IDiagramPage,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Resizes the left side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="munits">The measure units.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HandleRenderer.ResizeRight(System.Double,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.IDiagramPage,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Resizes the right side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="munits">The measure units..</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HandleRenderer.ResizeTop(System.Double,Syncfusion.UI.Xaml.Diagram.Node,Syncfusion.UI.Xaml.Diagram.IDiagramPage,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Resizes the top side of the node.
            </summary>
            <param name="scale">Scale factor.</param>
            <param name="item">Node instance.</param>
            <param name="designer">IDiagramPage instance.</param>
            <param name="munits">The measure units..</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter">
            <summary>
            Represents the measurement units converter class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.m_lock">
            <summary>
            Used to get a lock on the object.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.mDpiX">
            <summary>
            Used to store current x coordinate points.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.mDpiY">
            <summary>
            Used to store current y coordinate points.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.s_proportionsX">
            <summary>
            Used to store x converted points.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.s_proportionsY">
            <summary>
            Used to store y converted points.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ToPixelX(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to pixels
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ToPixelY(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to pixels
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.FromPixelX(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in pixels, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.FromPixelY(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in pixels, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ConvertX(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ConvertY(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.Convert(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.Convert(Windows.Foundation.Size,Syncfusion.UI.Xaml.Diagram.MeasureUnits,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.Convert(Windows.Foundation.Point,Syncfusion.UI.Xaml.Diagram.MeasureUnits,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ToPixels(Windows.UI.Xaml.Thickness,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts the Thickness value to pixels
            </summary>
            <param name="rect">bounding rectangle.</param>
            <param name="from">measure unit to convert from.</param>
            <returns>The converted rect.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ToPixels(Windows.Foundation.Rect,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts the Thickness value to pixels
            </summary>
            <param name="rect">bounding rectangle.</param>
            <param name="from">measure unit to convert from.</param>
            <returns>The converted rect.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ToPixels(Windows.Foundation.Point,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Convert point from specified measure units to pixels
            </summary>
            <param name="point">source point for convert</param>
            <param name="from">measure units</param>
            <returns>point in pixels coordinates</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ToPixels(Windows.Foundation.Size,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Convert size from specified measure units to pixels
            </summary>
            <param name="size">source size</param>
            <param name="from">measure units</param>
            <returns>size in pixels</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.ToPixels(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            To the pixels.
            </summary>
            <param name="value">The value.</param>
            <param name="from">From measurement unit.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.FromPixels(Windows.UI.Xaml.Thickness,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts from pixels to specified unit.
            </summary>
            <param name="rect">The Rectangle.</param>
            <param name="to">The unit to be converted to.</param>
            <returns>output Rectangle in specified units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.FromPixels(Windows.Foundation.Rect,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts from pixels to specified unit.
            </summary>
            <param name="rect">The Rectangle.</param>
            <param name="to">The unit to be converted to.</param>
            <returns>output Rectangle in specified units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.FromPixels(Windows.Foundation.Point,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle from pixels to specified units
            </summary>
            <param name="point">point in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Point in specified units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.FromPixels(System.Double,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Converts from pixels to specified unit.
            </summary>
            <param name="value">The value.</param>
            <param name="to">convert to units.</param>
            <returns>output value in specified units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.FromPixels(Windows.Foundation.Size,Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Convert Size in pixels to size in specified measure units
            </summary>
            <param name="size">source size</param>
            <param name="to">convert to units</param>
            <returns>output size in specified measure units</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.GetAbbreviation(Syncfusion.UI.Xaml.Diagram.MeasureUnits)">
            <summary>
            Get the measure unit abbreviation.
            </summary>
            <param name="units">The measure units.</param>
            <returns>The abbreviation.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.UpdateProportionsX(System.Double)">
            <summary>
            Update the x proportion.
            </summary>
            <param name="dDpiX">The x points</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.UpdateProportionsY(System.Double)">
            <summary>
            Update the y proportion.
            </summary>
            <param name="dDpiY">The y points</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.DpiX">
            <summary>
            Gets or sets the dot per inch value by X axis.
            </summary>
            <value>The dpi X.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.DpiY">
            <summary>
            Gets or sets the dot per inch value by Y axis.
            </summary>
            <value>The dpi Y.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MeasureUnitsConverter.MeasureUnitAbbreviation">
            <summary>
            Gets the measure unit abbreviations.
            </summary>
            <value>The measure unit abbreviations.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.Resizer">
            <summary>
            Represents the Resizer class which enables resizing of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Resizer.dc">
            <summary>
            Used to store the DiagramControl instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Resizer.dview">
            <summary>
            Refers to the <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Resizer.node">
            <summary>
            Used to store the current node.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Resizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Resizer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Resizer.Resizer_DragDelta(System.Object,Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the DragDelta event of the Resizer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Resizer.ResizerThumb_DragStarted(System.Object,Windows.UI.Xaml.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Handles the DragStarted event of the ResizerThumb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.Controls.Primitives.DragStartedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.WrapPanel">
            <summary>
            Represents the Resizer class which enables resizing of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.WrapPanel.OrientationProperty">
            <summary>
            Defines the Orientation property.  This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.WrapPanel"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.UI.Xaml.Diagram.WrapPanel.ArrangeOverride(Windows.Foundation.Size)" -->
        <member name="M:Syncfusion.UI.Xaml.Diagram.WrapPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures elements.
            </summary>
            <param name="availableSize">The available size</param>
            <returns>The available size.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.WrapPanel.Orientation">
            <summary>
            Gets or sets the HierarchicalDataTemplate for items.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.BowtieLayout">
            <summary>
            Represents the Directed Tree layout used for the automatic arrangement of nodes. The tree is created based on the Layout root specified.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.TreeLayoutBase">
            <summary>
            Abstract base class providing convenience methods for tree layout algorithms.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LayoutBase">
            <summary>
            Represents base abstract class for the tree layout .
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ILayout">
            <summary>
            Represents the layout. Provides properties for creating the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ILayout.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ILayout.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ILayout.LayoutBounds">
            <summary>
            Gets or sets the Layoutbounds.
            </summary>
            <value>The bounds value is   Rect  .</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ILayout.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutBase.graph">
            <summary>
            Used to store the graph
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutBase.mbounds">
            <summary>
            Used to store the bounds
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutBase.mcenter">
            <summary>
             Used to store the center point.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutBase.mcontroller">
            <summary>
             Used to store the DiagramControl instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutBase.mmodel">
            <summary>
             Used to store the DiagramModel instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutBase.mview">
            <summary>
            Used to store the DiagramView instance.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutBase.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LayoutBase"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutBase.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.LayoutBase"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutBase.SetX(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double)">
            <summary>
            Sets the OffsetX value for the IShape item.
            </summary>
            <param name="item">IShape item.</param>
            <param name="referrer">The IShape referrer</param>
            <param name="x">Double value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutBase.SetY(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double)">
            <summary>
             Sets the OffsetY value.
            </summary>
            <param name="item">IShape item.</param>
            <param name="referrer">The IShape referrer.</param>
            <param name="y">Double Value.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.LayoutBounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.Controller">
            <summary>
            Gets or sets the DiagramControl.
            Type:<see cref="T:Syncfusion.UI.Xaml.Diagram.SfDiagram"/>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.Edges">
            <summary>
            Gets the collection of edges.
            Type:<see cref="T:Syncfusion.UI.Xaml.Diagram.CollectionExt"/>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.Graph">
            <summary>
            Gets or sets the graph.
            </summary>
            <value>The graph.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.Model">
            <summary>
            Gets or sets the Model property.
            Type:<see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.Nodes">
            <summary>
            Gets the collection of nodes.
            Type:<see cref="T:Syncfusion.UI.Xaml.Diagram.CollectionExt"/>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutBase.View">
            <summary>
            Gets or sets the View property.
            Type:<see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/>
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TreeLayoutBase.mlayoutRoot">
            <summary>
            The root of the tree
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TreeLayoutBase.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:TreeLayoutBase"/> class.
            </summary>
            <param name="model">DiagramModel instance.</param>
            <param name="view">DiagramView instance</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TreeLayoutBase.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.TreeLayoutBase"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.TreeLayoutBase.LayoutRoot">
            <summary>
            Gets or sets the layout root.
            </summary>
            <value>The layout root.</value>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieLayout.equalities">
            <summary>
            Used to store the equalities.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieLayout.mdepths">
            <summary>
            Used to store the depths
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieLayout.mtempAnchorPoint">
            <summary>
            Used to store the temporary anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieLayout.mmaxDepth">
            <summary>
            Used to store the maximum depth
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.DoLayout">
            <summary>
            Generates the tree layout.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.PrepareActivity(Syncfusion.UI.Xaml.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.PrepareActivity(tree);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    DirectedTreeLayout tree=new DirectedTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.AdjacentLeft(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the left node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent left Node object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.AdjacentRight(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the right node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent right Node object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.AllocateSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Allocates the space between nodes.
            </summary>
            <param name="v">The shape 1.</param>
            <param name="a">The shape 2.</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.AncestorShape(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the parent shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="shape1">The shape1.</param>
            <param name="adjacentShape">The adjacent shape.</param>
            <returns>THe ancestor shape</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.CheckDepths">
            <summary>
            Checks the depth.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.DoFirstWalk(Syncfusion.UI.Xaml.Diagram.IShape,System.Int32,System.Int32)">
            <summary>
            First traversal.
            </summary>
            <param name="shape">The Node object. </param>
            <param name="number">layout info number</param>
            <param name="depth">integer depth value</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.DoSecondWalk(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Second Traversal of the tree.
            </summary>
            <param name="node">The node object.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space value.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.GetSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Boolean)">
            <summary>
            Gets the space between nodes.
            </summary>
            <param name="l"> Left node object</param>
            <param name="r"> Right node object</param>
            <param name="siblings">Has siblings</param>
            <returns>The space between nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.InitializeLayout">
            <summary>
            Initializes the  tree layout.
            </summary>
            <returns>true if initialization succeeds.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.SetBreadthSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="shapeNext">This node object </param>
            <param name="previousShape">The previous node </param>
            <param name="space">The spacing value </param>
            <param name="depth">The depth value </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.SetDepthSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the depth space between each node.
            </summary>
            <param name="shapeNext">this node object</param>
            <param name="previousShape">previous node object</param>
            <param name="space">spacing value</param>
            <param name="depth">depth value</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.ShiftSubTree(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double)">
            <summary>
            Shifts the tree.
            </summary>
            <param name="shape">Node object</param>
            <param name="shape2">The shape2.</param>
            <param name="shift">The shift .</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.TranslateShapePosition(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Translates the node position.
            </summary>
            <param name="shape">Shape object</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.BowtieLayout.UpdateDepths(System.Int32,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Updates the depth of the tree.
            </summary>
            <param name="depth">Depth value </param>
            <param name="item">Node object </param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.BowtieLayout.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.BowtieLayout.LayoutAnchor">
            <summary>
            Gets or sets the layout anchor.
            </summary>
            <value>The layout anchor.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DiagramModel">
             <summary>
             Represents the Diagram Model.
             </summary>
             <remarks>
             <para>A model represents data for an application and contains the logic for adding, accessing, and manipulating the data.
             Nodes and connectors are added to the Diagram Control using the Model property.
             A predefined layout can be applied using the LayoutType property of DiagramModel or the position of the  nodes can be  manually specified.</para>
             </remarks>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in XAML.
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/>
             <summary>
             Represents the Diagram Model.
             </summary>
             <remarks>
             <para>A model represents data for an application and contains the logic for
             adding, accessing, and manipulating the data. Nodes and connectors are added to
             the Diagram Control using the Model property. A predefined layout can be applied
             using the LayoutType property of DiagramModel or the position of the nodes can
             be manually specified.</para>
             </remarks>
             <example>
             <para>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel">DiagramModel</see> in XAML. </para>
             <para></para>
             <code>&lt;UserControl x:Class="Sample.MainPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                 xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight"
                xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows" 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
                                            IsSymbolPaletteEnabled="True"
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="None"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"
                                                    Bounds="0,0,12,12"
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/UserControl&gt;</code>
             <para></para>
             <para>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel">DiagramModel</see> in C#. </para>
             <para></para>
             <code>using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }</code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ITree">
            <summary>
            This interface describes the additional members useful if the underlying graph is a tree.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IGraph">
            <summary>
            Provides an interface to the tree graph .
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.FromNode(Syncfusion.UI.Xaml.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node from which the connection started.
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the head node.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.ToNode(Syncfusion.UI.Xaml.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node to which the connection ended. 
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the tail node.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.AdjacentNode(Syncfusion.UI.Xaml.Diagram.IEdge,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Given a Node upon which this Edge is incident, the opposite incident
            Node is returned. Throws an exception if the input node is not incident
            on this Edge.
            </summary>
            <param name="edge">The edge object.</param>
            <param name="node">The node object.</param>
            <returns>The adjacent node</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.InNeighbors(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The in coming neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.OutNeighbors(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The out going neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.Neighbors(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Get an iterator over all nodes connected to this node.
            </summary>
            <param name="node">The node object.</param>
            <returns>The neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.EdgesOf(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Returns a collection of the edges of the node.
            </summary>
            <param name="node">The node object</param>
            <returns>The total number of edges.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.InEdges(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.OutEdges(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.InDegree(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The in degree .</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.OutDegree(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The out degree.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.Degree(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Get the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.MakeTraversing(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Traverse all the internal nodes of the specified parent node and also their edges.
            </summary>
            <param name="node">Parent Node</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.IGraph.ClearTraversing">
            <summary>
            Clear the traversed tree.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IGraph.IsDirected">
            <summary>
            Gets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IGraph.Nodes">
            <summary>
            Gets a collection of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IGraph.Tree">
            <summary>
            Gets the Spanning tree.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IGraph.Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.Children(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the Collection of the Node's Children.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The Children of the node</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.ChildEdges(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets a collection of Node's Children's edges.
            </summary>
            <param name="node">The node object</param>
            <returns>The Child edges of the node</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.NextSibling(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the  node placed next to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The next sibling.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.PreviousSibling(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the node placed previous to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The previous sibling</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.LastChild(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the last child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The last child</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.FirstChild(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the immediate child as the First child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The First Child</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.ChildCount(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets a count of the number of children of the parent node.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The child count</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.Depth(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the number of levels from this Node as the Depth of the current node.
            </summary>
            <param name="node">Node object.</param>
            <returns>The depth value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.ParentEdge(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Parents the edge.
            </summary>
            <param name="node">The node object.</param>
            <returns>The parent edge</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ITree.ForEach``1(System.Action{``0},Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Takes a specified action on each node starting from the start node.
            </summary>
            <typeparam name="T">The type of action</typeparam>
            <param name="action">The action.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ITree.IsDirected">
            <summary>
            Gets or sets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ITree.Root">
            <summary>
            Gets or sets the root.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ITree.LayoutType">
            <summary>
            Gets or sets the type of the layout.
            </summary>
            <value>The type of the layout.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IModel">
            <summary>
            Provides an interface to the model.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IModel.LayoutRoot">
            <summary>
            Gets or sets the layout root.
            </summary>
            <value>The layout root.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IModel.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IModel.Nodes">
            <summary>
            Gets the shapes.
            </summary>
            <value>The shapes.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IDiagramModel">
            <summary>
            Represents the model.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.ColumnCountProperty">
            <summary>
            Identifies the ColumnCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.EnableCycleDetectionProperty">
            <summary>
            Identifies the EnableCycleDetection dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.EnableLayoutWithVariedSizesProperty">
            <summary>
            Identifies the EnableLayoutWithVariedSizes dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.RowCountProperty">
            <summary>
            Identifies the RowCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.TableExpandModeProperty">
            <summary>
            Identifies the TableExpandMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.OrderedNodesProperty">
            <summary>
            Defines the OrderedNodes property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.morientation">
            <summary>
            Used to store the orientation value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.mhorizontalSpacing">
            <summary>
             Used to store the horizontal spacing.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.misDirected">
            <summary>
            Used to store IsDirected property value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.mlayoutRoot">
            <summary>
             Used to store the layout root.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.mspanningTree">
            <summary>
             Used to store the tree.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.msubTreeSpacing">
            <summary>
             Used to store the sub tree spacing.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.mverticalSpacing">
            <summary>
             Used to store the vertical spacing.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#AdjacentNode(Syncfusion.UI.Xaml.Diagram.IEdge,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Given a Node upon which this Edge is incident, the opposite incident
            Node is returned. Throws an exception if the input node is not incident
            on this Edge.
            </summary>
            <param name="edge">The edge object.</param>
            <param name="node">The node object.</param>
            <returns>The adjacent node</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#ClearTraversing">
            <summary>
            Clear the traversed tree.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#Degree(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Get the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#EdgesOf(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Returns a collection of the edges of the node.
            </summary>
            <param name="node">The node object</param>
            <returns>The node edges</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#FromNode(Syncfusion.UI.Xaml.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node from which the connection started. 
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the head node.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#InDegree(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Get the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
            <param name="node">The node object.</param>
            <returns>The in degree .</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#InEdges(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#InNeighbors(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The in coming neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#MakeTraversing(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Traverse all the internal nodes of the specified parent node and also their edges.
            </summary>
            <param name="node">Parent Node</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#Neighbors(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Get an iterator over all nodes connected to this node.
            </summary>
            <param name="node">The node object.</param>
            <returns>The neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#OutDegree(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Get the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The out degree.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#OutEdges(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
            <param name="node">The node object.</param>
            <returns>The outgoing edges</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#OutNeighbors(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
            <param name="node">The node object.</param>
            <returns>The out going neighbor nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#ToNode(Syncfusion.UI.Xaml.Diagram.IEdge)">
            <summary>
            Gets the edge of the Node to which the connection ended. 
            </summary>
            <param name="edge">The edge of the node</param>
            <returns>Edge of the tail node.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#ChildCount(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets a count of the number of children of the parent node.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The child count</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#ChildEdges(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets a collection of Node's Children's edges.
            </summary>
            <param name="node">The node object</param>
            <returns>The Child edges of the node</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#Children(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the Collection of the Node's Children.
            </summary>
            <param name="node">Parent Node</param>
            <returns>The Children of the node</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#Depth(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the number of levels from this Node as the Depth of the current node.
            </summary>
            <param name="node">Node object.</param>
            <returns>The depth value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#FirstChild(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the immediate child as the First child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The First Child</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#ForEach``1(System.Action{``0},Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Takes a specified action on each node starting from the start node.
            </summary>
            <typeparam name="T">The type of action</typeparam>
            <param name="action">The action.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#LastChild(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the last child of the ParentNode.
            </summary>
            <param name="node">Parent Node.</param>
            <returns>The last child</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#NextSibling(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the node placed next to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The next sibling.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#ParentEdge(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the parent edge
            </summary>
            <param name="node">The node object.</param>
            <returns>The parent edge</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#PreviousSibling(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the node placed previous to this node and at the same level as this node.
            </summary>
            <param name="node">Node object</param>
            <returns>The previous sibling</returns>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.m_units">
            <summary>
            Used to store the units.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.m_Nodes">
            <summary>
            Collection of all nodes that are to be managed by the container.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.m_Connection">
            <summary>
            Collection of all connections that are to be linked between nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.m_rootNodes">
            <summary>
            Maintaining Root node list from node collection
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.LayoutVerticalAlignmentProperty">
            <summary>
            Identifies the LayoutVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.LayoutHorizontalAlignmentProperty">
            <summary>
            Identifies the LayoutHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.ItemsSourceProperty">
            <summary>
             Defines the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.ItemTemplateProperty">
            <summary>
             Defines the ItemTemplate property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.LayoutTypeProperty">
            <summary>
            Defines the LayoutType property.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramModel.HierarchicalDataTemplateProperty">
            <summary>
            Defines the HierarchicalDataTemplate property.  This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.ParseItemSourceIntoParser(Windows.UI.Xaml.UIElement)">
            <summary>
            Parses the items from the items source.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.OnItemSourceChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [ItemSource  changed].
            </summary>
            <param name="d">Dependency object.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramModel.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.ColumnCount">
             <summary>
             Gets or sets the Column Count for the table layout.
             </summary>
             <remarks>
             ColumnCount is automatically set when TableExpandMode is set to Vertical.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="TableLayout" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.TableLayout;
                    Model.RowCount = 3;
                    Model.ColumnCount = 3;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Connections">
             <summary>
             Gets the connections.
             </summary>
             <value>The connections.</value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.OffsetX = 150;
                     n1.OffsetY = 125;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.EnableCycleDetection">
             <summary>
             Gets or sets a value indicating whether Cycle detection is enabled or not.
             </summary>
             <value>
             <c>true</c> if cycle detection is enabled; otherwise, <c>false</c>.
             </value>
             <remarks>
             In case of <see cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"></see> , if there exists a cycle in the input , then EnableCycleDetection property should be set to true. 
             A cycle is said to exist when for example: say three nodes n1,n2,n3 are there such that, n1 is connected to n2, n2 is connected to n3 and n3 is again connected to n1.(n1--&gt;n2--&gt;n3--&gt;n1) n1,n2,n3 are said to form a cycle then.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel EnableCycleDetection="True" Orientation="TopBottom" LayoutType="HierarchicalTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.Orientation = TreeOrientation.TopBottom;
                    Model.EnableCycleDetection=true;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    LineConnector o1 = new LineConnector();
                    o1.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n;
                    o.HeadNode = n1;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o1);        
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.EnableLayoutWithVariedSizes">
             <summary>
             Gets or sets a value indicating whether to enable the varied size algorithm. In case the Model consists of the nodes of different sizes, this property can be set to true. This will align the differently sized nodes with respect to the centre.
             </summary>
             <value>
             <c>true</c> if [enable layout with varied sizes]; otherwise, <c>false</c>.
             </value>
             <remarks>
             Default value is false. 
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow"
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
             IsSymbolPaletteEnabled="True"
             Background="WhiteSmoke"&gt;
             &lt;syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramModel LayoutType="TableLayout" TableExpandMode="Vertical" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
             &lt;/syncfusion:DiagramModel&gt;
             &lt;/syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramControl.View&gt;
             &lt;syncfusion:DiagramView   Background="LightGray"
             Bounds="0,0,12,12"
             Name="diagramView"  &gt;
             &lt;/syncfusion:DiagramView&gt;
             &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.Width = 150;
             n.Height = 75;
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n);
             Model.Nodes.Add(n1);
             Model.LayoutType = LayoutType.TableLayout;
             Model.TableExpandMode=ExpandMode.Vertical;
             Model.RowCount = 3;
             Model.ColumnCount = 3;
             Model.LayoutRoot=n;
             LineConnector o = new LineConnector();
             o.ConnectorType = ConnectorType.Straight;
             o.TailNode = n1;
             o.HeadNode = n;
             o.HeadDecoratorShape = DecoratorShape.None;
             Model.Connections.Add(o);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.HorizontalSpacing">
             <summary>
             Gets or sets the Horizontal spacing between nodes.
             </summary>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
            <value>The connections</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#IsDirected">
            <summary>
            Gets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#IGraph#Tree">
            <summary>
            Gets the Spanning tree.
            </summary>
            <value>The graph .</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#IsDirected">
            <summary>
            Gets or sets a value indicating whether this instance is directed.
            </summary>
            <value>
            <c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Syncfusion#UI#Xaml#Diagram#ITree#Root">
            <summary>
            Gets or sets the root.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.LayoutRoot">
             <summary>
             Gets or sets the layout root.
             </summary>
             <value>The layout root.</value>
             <remarks>
             The Layout Root specifies the starting point of the layout. It has to be specified when the <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> is used.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                     Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.LayoutType">
             <summary>
             Gets or sets the type of Layout to be used.
             </summary>
             <value>
             Enum specifying the type of layout.
             </value>
             <remarks>
             The LayoutType selects the layout to be used. <see cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/>, <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> and None are the supported layout types. Default type is None. 
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                     Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Nodes">
             <summary>
             Gets the shapes.
             </summary>
             <value>The shapes.</value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.Orientation">
             <summary>
             Gets or sets the orientation.
             </summary>
             <value>
             Type:<see cref="T:Syncfusion.UI.Xaml.Diagram.TreeOrientation"/>
             Enum specifying the orientation.
             </value>
             <remarks>
             The Layout Manager lets you orient the tree in many directions and can be used for the creation of many sophisticated arrangements. 
              <para>TopBottom - Places the root node at the top and the child nodes are arranged below the root node.</para>
              <para>BottomTop - Places the root node at the Bottom and the child nodes are arranged above the root node. </para>
              <para>LeftRight - Places the root node at the Left and the child nodes are arranged on the right side of the root node. </para>
              <para>RightLeft - Places the root node at the Right and the child nodes are arranged on the left side of the root node. </para>
             Default orientation is TopBottom.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel Orientation="TopBottom" LayoutType="DirectedTreeLayout"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.Orientation = TreeOrientation.TopBottom;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.RowCount">
             <summary>
             Gets or sets the Row Count for the table layout.
             </summary>
             <remarks>
             RowCount is automatically set when TableExpandMode is set to Horizontal.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="TableLayout" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.TableLayout;
                    Model.RowCount = 3;
                    Model.ColumnCount = 3;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.SpaceBetweenSubTrees">
             <summary>
             Gets or sets the space between sub trees.
             </summary>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" SpaceBetweenSubTrees="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.TableExpandMode">
             <summary>
             Gets or sets the table expand mode.
             </summary>
             <value>The table expand mode.</value>
             <remarks>
             Default value is  Horizontal.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow"
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl"
             IsSymbolPaletteEnabled="True"
             Background="WhiteSmoke"&gt;
             &lt;syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramModel LayoutType="TableLayout" TableExpandMode="Vertical" RowCount="3" ColumnCount="3" HorizontalSpacing="50" VerticalSpacing="50" x:Name="diagramModel" &gt;
             &lt;/syncfusion:DiagramModel&gt;
             &lt;/syncfusion:DiagramControl.Model&gt;
             &lt;syncfusion:DiagramControl.View&gt;
             &lt;syncfusion:DiagramView   Background="LightGray"
             Bounds="0,0,12,12"
             Name="diagramView"  &gt;
             &lt;/syncfusion:DiagramView&gt;
             &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.Width = 150;
             n.Height = 75;
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n);
             Model.Nodes.Add(n1);
             Model.LayoutType = LayoutType.TableLayout;
             Model.TableExpandMode=ExpandMode.Vertical;
             Model.RowCount = 3;
             Model.ColumnCount = 3;
             Model.LayoutRoot=n;
             LineConnector o = new LineConnector();
             o.ConnectorType = ConnectorType.Straight;
             o.TailNode = n1;
             o.HeadNode = n;
             o.HeadDecoratorShape = DecoratorShape.None;
             Model.Connections.Add(o);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.VerticalSpacing">
             <summary>
             Gets or sets the Vertical spacing between nodes.
             </summary>
             <example>
             <code language="XAML">
             &lt;Window x:Class="Sample.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
              WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                              &lt;syncfusion:DiagramModel LayoutType="DirectedTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                     Node n1 = new Node(Guid.NewGuid(), "Decision1");
                     n1.Shape = Shapes.FlowChart_Process;
                     n1.IsLabelEditable = true;
                     n1.Label = "Alarm Rings";
                     n1.Level = 2;
                     n1.Width = 150;
                     n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.DirectedTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    Model.LayoutRoot=n;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.MeasurementUnits">
            <summary>
            Gets or sets the Measurement unit property.
            <value>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.MeasureUnits"/>
            Enum specifying the unit to be used.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.RootNodes">
            <summary>
            Gets or sets the root nodes.
            </summary>
            <value>The root nodes.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.ItemsSource">
            <summary>
            Gets or sets the source for the list of the items, the containers about to represent.
            </summary>
            <remarks>
            Items source can not be set while the Items collection contains manually added items.
            </remarks>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="Sample.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;Window.Resources&gt;
               &lt;!--The business object which contains the data to be binded.--&gt;
               &lt;local:CountrySalesList x:Key="myList"/&gt;
               &lt;!--Creating a hierarchical data from the XML data for generating a tree view--&gt;
               &lt;HierarchicalDataTemplate x:Key="dataTemplate" ItemsSource="{Binding Path=RegionSales}" DataType="{x:Type local:CountrySale}"&gt;
                   &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;HierarchicalDataTemplate ItemsSource="{Binding Path=Earnings}"   DataType="{x:Type local:RegionSale}"&gt;
                          &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                         &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                              &lt;DataTemplate DataType="{x:Type local:Sale}"&gt;
                                  &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                             &lt;/DataTemplate&gt;
                         &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;/HierarchicalDataTemplate&gt;
                  &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
              &lt;/HierarchicalDataTemplate&gt;
             &lt;/Window.Resources&gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                        &lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None" "  ItemsSource="{Binding Source={StaticResource myList}}" ItemTemplate="{StaticResource dataTemplate}"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                         &lt;/syncfusion:DiagramView&gt;
                     &lt;/syncfusion:DiagramControl.View&gt;
                &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in C#.
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   CountrySalesList list= this.Resources["myList"] as CountrySalesList;
                   Model.ItemsSource=list;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.ItemTemplate">
            <summary>
            Gets or sets the ItemTemplate for items.
            </summary>
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in XAML.
            <code language="XAML">
            &lt;Window x:Class="Sample.Window1"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             WindowState="Maximized" Name="mainwindow" 
             xmlns:local="clr-namespace:Sample" FontWeight="Bold"
             Icon="Images/App.ico" &gt;
             &lt;Window.Resources&gt;
               &lt;!--The business object which contains the data to be binded . --&gt;
               &lt;local:CountrySalesList x:Key="myList"/&gt;
               &lt;!--Creating a hierarchical data from the XML data for generating a tree view--&gt;
               &lt;HierarchicalDataTemplate x:Key="dataTemplate" ItemsSource="{Binding Path=RegionSales}" DataType="{x:Type local:CountrySale}"&gt;
                   &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;HierarchicalDataTemplate ItemsSource="{Binding Path=Earnings}"   DataType="{x:Type local:RegionSale}"&gt;
                          &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                         &lt;HierarchicalDataTemplate.ItemTemplate&gt;
                              &lt;DataTemplate DataType="{x:Type local:Sale}"&gt;
                                  &lt;TextBlock Text="{Binding Path=Name}" /&gt;
                             &lt;/DataTemplate&gt;
                         &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
                      &lt;/HierarchicalDataTemplate&gt;
                  &lt;/HierarchicalDataTemplate.ItemTemplate&gt;
              &lt;/HierarchicalDataTemplate&gt;
             &lt;/Window.Resources&gt;
              &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                           IsSymbolPaletteEnabled="True" 
                                           Background="WhiteSmoke"&gt;
                        &lt;syncfusion:DiagramControl.Model&gt;
                             &lt;syncfusion:DiagramModel LayoutType="None" "  ItemsSource="{Binding Source={StaticResource myList}}" ItemTemplate="{StaticResource dataTemplate}"  x:Name="diagramModel" &gt;
                             &lt;/syncfusion:DiagramModel&gt;
                        &lt;/syncfusion:DiagramControl.Model&gt;
                      &lt;syncfusion:DiagramControl.View&gt;
                         &lt;syncfusion:DiagramView   Background="LightGray"  
                                                   Bounds="0,0,12,12"  
                                                   Name="diagramView"  &gt;
                         &lt;/syncfusion:DiagramView&gt;
                     &lt;/syncfusion:DiagramControl.View&gt;
                &lt;/syncfusion:DiagramControl&gt;
            &lt;/Window&gt;
            </code>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in C#.
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   CountrySalesList list= this.Resources["myList"] as CountrySalesList;
                   Model.ItemsSource=list;
                   Model.ItemTemplate=this.Resources["dataTemplate"] as DataTemplate;
               }
               }
               }
            </code>
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.LayoutVerticalAlignment">
            <summary>
            Gets or sets LayoutVerticalAlignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramModel.LayoutHorizontalAlignment">
            <summary>
            Gets or sets LayoutHorizontalAlignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramModel.PropertyChanged">
            <summary>
            Calls propertychanged event handler.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout">
            <summary>
            Represents the Directed Tree layout used for the automatic arrangement of nodes. The tree is created based on the Layout root specified.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.equalities">
            <summary>
            Used to store the equalities.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.mdepths">
            <summary>
            Used to store the depths
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.mtempAnchorPoint">
            <summary>
            Used to store the temporary anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.mmaxDepth">
            <summary>
            Used to store the maximum depth
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.DoLayout">
            <summary>
            Generates the tree layout.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.PrepareActivity(Syncfusion.UI.Xaml.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    DirectedTreeLayout tree = new DirectedTreeLayout();
                    tree.PrepareActivity(tree);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    DirectedTreeLayout tree=new DirectedTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.AdjacentLeft(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the left node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent left Node object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.AdjacentRight(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the right node.
            </summary>
            <param name="shape">Node object</param>
            <returns>Adjacent right Node object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.AllocateSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Allocates the space between nodes.
            </summary>
            <param name="v">The shape 1.</param>
            <param name="a">The shape 2.</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.AncestorShape(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the parent shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="shape1">The shape1.</param>
            <param name="adjacentShape">The adjacent shape.</param>
            <returns>THe ancestor shape</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.CheckDepths">
            <summary>
            Checks the depth.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.DoFirstWalk(Syncfusion.UI.Xaml.Diagram.IShape,System.Int32,System.Int32)">
            <summary>
            First traversal.
            </summary>
            <param name="shape">The Node object. </param>
            <param name="number">layout info number</param>
            <param name="depth">integer depth value</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.DoSecondWalk(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Second Traversal of the tree.
            </summary>
            <param name="node">The node object.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space value.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.GetSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Boolean)">
            <summary>
            Gets the space between nodes.
            </summary>
            <param name="l"> Left node object</param>
            <param name="r"> Right node object</param>
            <param name="siblings">Has siblings</param>
            <returns>The space between nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.InitializeLayout">
            <summary>
            Initializes the  tree layout.
            </summary>
            <returns>true if initialization succeeds.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.SetBreadthSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="shapeNext">This node object </param>
            <param name="previousShape">The previous node </param>
            <param name="space">The spacing value </param>
            <param name="depth">The depth value </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.SetDepthSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the depth space between each node.
            </summary>
            <param name="shapeNext">this node object</param>
            <param name="previousShape">previous node object</param>
            <param name="space">spacing value</param>
            <param name="depth">depth value</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.ShiftSubTree(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double)">
            <summary>
            Shifts the tree.
            </summary>
            <param name="shape">Node object</param>
            <param name="shape2">The shape2.</param>
            <param name="shift">The shift .</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.TranslateShapePosition(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Translates the node position.
            </summary>
            <param name="shape">Shape object</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.UpdateDepths(System.Int32,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Updates the depth of the tree.
            </summary>
            <param name="depth">Depth value </param>
            <param name="item">Node object </param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout.LayoutAnchor">
            <summary>
            Gets or sets the layout anchor.
            </summary>
            <value>The layout anchor.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LayoutInfo">
            <summary>
            Contains information about the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutInfo.mancestor">
            <summary>
            Used to store ancestor shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutInfo.mchange">
            <summary>
            Used to store change.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutInfo.mmod">
            <summary>
            Used to store mod;
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutInfo.mnumber">
            <summary>
            Used to store number.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutInfo.mprelim">
            <summary>
            Used to store Prelim.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutInfo.mshift">
            <summary>
            Used to store shift.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutInfo.mthread">
            <summary>
            Used to store thread
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutInfo.ClearInfo">
            <summary>
            Clears the info.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutInfo.SetupInfo(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Stores info value.
            </summary>
            <param name="item">The Node item.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutInfo.Ancestor">
            <summary>
            Gets or sets the ancestor.
            </summary>
            <value>The ancestor.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutInfo.Change">
            <summary>
            Gets or sets the change.
            </summary>
            <value>The change.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutInfo.Mod">
            <summary>
            Gets or sets the mod.
            </summary>
            <value>The mod value.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutInfo.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutInfo.Prelim">
            <summary>
            Gets or sets the prelim.
            </summary>
            <value>The prelim.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutInfo.Shift">
            <summary>
            Gets or sets the shift.
            </summary>
            <value>The shift.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutInfo.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout">
             <summary>
             Represents the Hierarchical Tree layout. 
             </summary>
             <remarks>
             The Hierarchical Tree Layout also arranges nodes in a tree-like structure however unlike the directed tree layout, the nodes in hierarchical layout may have multiple parents. As a result, there is no need to specify the layout root. 
             Nodes can have multiple parents in this layout.
             </remarks>
             <example>
             <code language="XAML">
            &lt;UserControl x:Class=&quot;Sample.MainPage&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; 
                 xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; 
                 xmlns:syncfusion=&quot;clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight&quot;
                xmlns:vsm=&quot;clr-namespace:System.Windows;assembly=System.Windows&quot; 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                               &lt;syncfusion:DiagramModel LayoutType="HierarchicalTreeLayout" HorizontalSpacing="30" VerticalSpacing="50" SpaceBetweenSubTrees="50" x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.equalities">
            <summary>
            Used to store the equalities.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.mdepths">
            <summary>
            Used to store the depths
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.mtempAnchorPoint">
            <summary>
            Used to store the temporary anchor point
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.maxrank">
            <summary>
            Used to store the maximum rank.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.mmaxDepth">
            <summary>
            Used to store the maximum depth
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.virtualnode">
            <summary>
            Used to store the virtual node.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.DoLayout">
            <summary>
            Generates the tree layout.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.PrepareActivity(Syncfusion.UI.Xaml.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    HierarchicalTreeLayout tree=new HierarchicalTreeLayout();
                    tree.PrepareActivity(tree);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    HierarchicalTreeLayout tree=new HierarchicalTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    HierarchicalTreeLayout tree=new HierarchicalTreeLayout();
                    tree.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.AdjacentLeft(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the adjacent left node.
            </summary>
            <param name="shape">The shape.</param>
            <returns>The Adjacent Left shape</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.AdjacentRight(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the adjacent right node.
            </summary>
            <param name="shape">Current shape</param>
            <returns>The Adjacent Right shape</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.AllocateSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Allocates the space.
            </summary>
            <param name="v">The previous sibling.</param>
            <param name="a">The current node.</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.AncestorShape(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the ancestor shape.
            </summary>
            <param name="shape">The shape object.</param>
            <param name="shape1">The shape1 object.</param>
            <param name="adjacentShape">The adjacent shape.</param>
            <returns>The ancestor shape</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.AssignRank(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Assign rank to each node . The nodes get arranged based on the ranks assigned to them.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.CheckDepths">
            <summary>
            Assigns the depth to the layout.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.CycleCheck(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Checks if any cycle exists in the given input.
            </summary>
            <param name="shape">The current shape.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.DoFirstWalk(Syncfusion.UI.Xaml.Diagram.IShape,System.Int32,System.Int32)">
            <summary>
            Initial Traversal of the tree.
            </summary>
            <param name="shape">The shape object.</param>
            <param name="number">The number.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.DoSecondWalk(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Second traversal of the tree . Assigns the position to the nodes.
            </summary>
            <param name="node">The node object.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space object.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.GetPredecessor(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Gets the predecessor of the current shape.
            </summary>
            <param name="shape">The current shape.</param>
            <returns>The predecessor</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.GetSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Boolean)">
            <summary>
            Gets the space.
            </summary>
            <param name="l">The left shape.</param>
            <param name="r">The right shape.</param>
            <param name="siblings">if set to <c>true</c> [siblings].</param>
            <returns>The spacing between nodes</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
            <returns>Boolen value true if initialization succeeded; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.SetBreadthSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="shapeNext">The shape next.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space value.</param>
            <param name="depth">The depth value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.SetDepthSpace(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double,System.Int32)">
            <summary>
            Sets the depth space.
            </summary>
            <param name="shapeNext">The shape next.</param>
            <param name="previousShape">The previous shape.</param>
            <param name="space">The space.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.ShiftSubTree(Syncfusion.UI.Xaml.Diagram.IShape,Syncfusion.UI.Xaml.Diagram.IShape,System.Double)">
            <summary>
            Shifts the sub tree.
            </summary>
            <param name="shape">Shape1 object</param>
            <param name="shape2">Shape2 object</param>
            <param name="shift">Shift value</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.TranslateShapePosition(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Translates the nodes .
            </summary>
            <param name="shape">Current shape</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.UpdateDepths(System.Int32,Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Updates the depths.
            </summary>
            <param name="depth">The depth value.</param>
            <param name="item">The item value.</param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.PropertyChanged">
            <summary>
            Property Changed Event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.HierarchicalTreeLayout.LayoutAnchor">
            <summary>
            Gets or sets the layout anchor.
            </summary>
            <value>The layout anchor.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IDiagramView">
            <summary>
            Provides the interface to the view.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.INode">
            <summary>
            Represents node collection properties.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.INodeGroup">
            <summary>
            Represents node collection properties.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.INodeGroup.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID of the node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.INodeGroup.ParentID">
            <summary>
            Gets or sets the parent ID.
            </summary>
            <value>The parent ID.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.INodeGroup.IsGrouped">
            <summary>
            Gets or sets a value indicating whether this instance is grouped.
            </summary>
            <value>
            <c>true</c> if this instance is grouped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.INodeGroup.Groups">
            <summary>
            Gets the groups to which the INodeGroup objects belong.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.INodeGroup.ReferenceNo">
            <summary>
            Gets or sets the reference number of the INodeGroup objects. Used for serialization purposes..
            </summary>
            <value>The reference no.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IShape">
            <summary>
            Interface to a node in a hierarchy or graph of objects.
            </summary>
            <remarks>
            <para>
            A node is a named object in a hierarchical tree structure. Each node
            has a child and a parent. A node's name must is unique within the scope of its
            parent node. The Full name of a node is unique within the scope of the entire node hierarchy.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name of the object.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.OffsetX">
            <summary>
            Gets or sets the logical offset X.
            </summary>
            <value>The logical offset X.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.OffsetY">
            <summary>
            Gets or sets the logical offset Y.
            </summary>
            <value>The logical offset Y.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.InDegree">
            <summary>
            Gets the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.OutDegree">
            <summary>
            Gets the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Degree">
            <summary>
            Gets the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.InEdges">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the target.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            <c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.ID">
            <summary>
            Gets the unique identifier of this node.
            </summary>
            <value>The unique identifier value.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.OutEdges">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.InNeighbors">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.OutNeighbors">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Neighbors">
            <summary>
            Gets the neighbors.
            </summary>
            <value>The neighbors.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.ParentNode">
            <summary>
            Gets or sets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.ParentEdge">
            <summary>
            Gets or sets the edge between this node and its parent node in a tree
            structure.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Depth">
            <summary>
            Gets or sets the tree depth of this node.
            <remarks>The root's tree depth is
            zero, and each level of the tree is one depth level greater.
            </remarks> 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.ChildCount">
            <summary>
            Gets the number of tree children of this node.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.FirstChild">
            <summary>
            Gets this node's first tree child.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.LastChild">
            <summary>
            Gets this node's last tree child.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.PreviousSibling">
            <summary>
            Gets this node's previous tree sibling.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.NextSibling">
            <summary>
            Gets this node's next tree sibling.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Children">
            <summary>
            Gets or sets an iterator over this node's tree children.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.IsDragConnectionOver">
            <summary>
            Gets or sets a value indicating whether this instance is drag connection over.
            </summary>
            <value>
            <c>true</c> if this instance is drag connection over; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Parents">
            <summary>
            Gets or sets the parent nodes  based on the connections in a hierarchical layout.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.PreviousShape">
            <summary>
            Gets the previous shape.
            </summary>
            <value>The previous shape.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Row">
            <summary>
            Gets or sets the row number.
            </summary>
            <value>The row number.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IShape.Column">
            <summary>
            Gets or sets the column number.
            </summary>
            <value>The column number.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.RadialTreeLayout">
            <summary>
            Represents the Directed Tree layout used for the automatic arrangement of nodes. The tree is created based on the Layout root specified.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.RadialTreeLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.RadialTreeLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DirectedTreeLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.RadialTreeLayout.RefreshLayout">
            <summary>
            Refreshes the layout.
            </summary>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Label = "Start";
                   n.Level = 1;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "Decision1");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                   Model.HorizontalSpacing = 30;
                   Model.VerticalSpacing = 50;
                   Model.SpaceBetweenSubTrees = 50;
                   DirectedTreeLayout tree=new DirectedTreeLayout();
                   tree.RefreshLayout();
                   LineConnector o = new LineConnector();
                   o.ConnectorType = ConnectorType.Straight;
                   o.TailNode = n1;
                   o.HeadNode = n;
                   o.HeadDecoratorShape = DecoratorShape.None;
                   Model.Connections.Add(o);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.RadialTreeLayout.PrepareActivity(Syncfusion.UI.Xaml.Diagram.ILayout)">
            <summary>
            Prepares for the activity
            </summary>
            <param name="layout">ILayout instance.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Label = "Start";
                   n.Level = 1;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "Decision1");
                   n1.Shape = Shapes.FlowChart_Process;
                   n1.IsLabelEditable = true;
                   n1.Label = "Alarm Rings";
                   n1.Level = 2;
                   n1.Width = 150;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                   Model.HorizontalSpacing = 30;
                   Model.VerticalSpacing = 50;
                   Model.SpaceBetweenSubTrees = 50;
                   LineConnector o = new LineConnector();
                   o.ConnectorType = ConnectorType.Straight;
                   o.TailNode = n1;
                   o.HeadNode = n;
                   o.HeadDecoratorShape = DecoratorShape.None;
                   Model.Connections.Add(o);
                   DirectedTreeLayout tree = new DirectedTreeLayout();
                   tree.PrepareActivity(tree);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.TableLayout">
             <summary>
             Represents the Tablelayout used for the automatic arrangement of nodes. 
             </summary>
             <remarks>
             TableLayout  arranges the nodes  in a tabular structure based on specified intervals between them. The number of nodes in each row and column could be specified and the layout will take place accordingly. The nodes are assigned rows and columns based on the order in which they are added to the model and based on the maximum nodes allowed in that row and column. This layout enables to layout nodes automatically without the need to specify offset positions for each node.
             </remarks>
             <example>
             <code language="XAML">
            &lt;UserControl x:Class=&quot;Sample.MainPage&quot;
             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; 
                 xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; 
                 xmlns:syncfusion=&quot;clr-namespace:Syncfusion.Windows.Diagram;assembly=Syncfusion.Diagram.Silverlight&quot;
                xmlns:vsm=&quot;clr-namespace:System.Windows;assembly=System.Windows&quot; 
                         &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                         &lt;syncfusion:DiagramControl.Model&gt;
                               &lt;syncfusion:DiagramModel LayoutType="TableLayout" EnableLayoutWithVariedSizes="False" TableExpandMode="Horizontal" HorizontalSpacing="50" VerticalSpacing="50" RowCount="3" ColumnCount="3"  x:Name="diagramModel" &gt;
                              &lt;/syncfusion:DiagramModel&gt;
                         &lt;/syncfusion:DiagramControl.Model&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView   Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                          &lt;/syncfusion:DiagramView&gt;
                      &lt;/syncfusion:DiagramControl.View&gt;
                 &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Node1");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Node2");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Width = 150;
                    n1.Height = 75;
                    Node n2 = new Node(Guid.NewGuid(), "Node3");
                    n2.Shape = Shapes.FlowChart_Process;
                    n2.Width = 150;
                    n2.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.Nodes.Add(n2);
                    Model.LayoutType = LayoutType.TableLayout;
                    Model.TableExpandMode = ExpandMode.Horizontal;
                    Model.EnableLayoutWithVariedSizes = false;
                    Model.HorizontalSpacing = 50;
                    Model.VerticalSpacing = 50;
                    Model.RowCount = 10;
                    Model.ColumnCount = 3;
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TableLayout.hspace">
            <summary>
            Uset to store the horizontal spacing value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TableLayout.manchorX">
            <summary>
            Used to store the anchor x value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TableLayout.manchorY">
            <summary>
            Used to store the anchor y value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TableLayout.vspace">
            <summary>
            Used to store the vertical spacing value.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel,Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.TableLayout"/> class.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.#ctor(Syncfusion.UI.Xaml.Diagram.DiagramModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.TableLayout"/> class.
            </summary>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.DoLayout">
            <summary>
            Generates the layout for nodes of same size.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.SetLayoutPosition">
            <summary>
            Set the SelectionBase layout starting position
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.DoLayoutWIthDifffentSizes">
            <summary>
            Does the layout for the nodes of difffent sizes.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.PrepareActivity(Syncfusion.UI.Xaml.Diagram.ILayout)">
             <summary>
             Prepares for the activity
             </summary>
             <param name="layout">ILayout instance.</param>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    TableLayout tree = new TableLayout(View,Model);
                    table.PrepareActivity(table);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.RefreshLayout">
             <summary>
             Refreshes the layout.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    DirectedTreeLayout tree=new DirectedTreeLayout();
                    tree.RefreshLayout();
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.StartNodeArrangement">
             <summary>
             Starts arranging the nodes.
             </summary>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                    Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.Label = "Start";
                    n.Level = 1;
                    n.Width = 150;
                    n.Height = 75;
                    Node n1 = new Node(Guid.NewGuid(), "Decision1");
                    n1.Shape = Shapes.FlowChart_Process;
                    n1.IsLabelEditable = true;
                    n1.Label = "Alarm Rings";
                    n1.Level = 2;
                    n1.Width = 150;
                    n1.Height = 75;
                    Model.Nodes.Add(n);
                    Model.Nodes.Add(n1);
                    Model.LayoutType = LayoutType.HierarchicalTreeLayout;
                    Model.HorizontalSpacing = 30;
                    Model.VerticalSpacing = 50;
                    Model.SpaceBetweenSubTrees = 50;
                    LineConnector o = new LineConnector();
                    o.ConnectorType = ConnectorType.Straight;
                    o.TailNode = n1;
                    o.HeadNode = n;
                    o.HeadDecoratorShape = DecoratorShape.None;
                    Model.Connections.Add(o);
                    TableLayout table = new TableLayout(View,Model);
                    table.StartNodeArrangement();
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.CalculateMaximumSize(Syncfusion.UI.Xaml.Diagram.IShape[0:,0:],System.Collections.ObjectModel.ObservableCollection{Windows.Foundation.Size},System.Collections.ObjectModel.ObservableCollection{Windows.Foundation.Size})">
            <summary>
            Calculates the maximum size of the node in each row and column.
            </summary>
            <param name="array">The node array.</param>
            <param name="rowsizecollection">The rowsizecollection.</param>
            <param name="columnsizecollection">The columnsizecollection.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.GetX(Syncfusion.UI.Xaml.Diagram.Node,System.Double,Syncfusion.UI.Xaml.Diagram.Node,System.Double)">
            <summary>
            Calculates the offsetX values.
            </summary>
            <param name="node">The node object.</param>
            <param name="maxwidth">The maximum width of the column.</param>
            <param name="previousNode">The previous node.</param>
            <param name="previouscolumnwidth">The previous column width.</param>
            <returns>The offsetX value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.GetY(Syncfusion.UI.Xaml.Diagram.Node,System.Double,Syncfusion.UI.Xaml.Diagram.Node,System.Double)">
            <summary>
            Calculates the offsetY values.
            </summary>
            <param name="node">The node object.</param>
            <param name="maxheight">The maximum height of the row.</param>
            <param name="previousNode">The previous node.</param>
            <param name="previousrowHeight">Height of the previous row.</param>
            <returns>The offsety value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.LayoutNodes(Syncfusion.UI.Xaml.Diagram.IShape[0:,0:],System.Collections.ObjectModel.ObservableCollection{Windows.Foundation.Size},System.Collections.ObjectModel.ObservableCollection{Windows.Foundation.Size})">
            <summary>
            Layouts the nodes.
            </summary>
            <param name="array">The node array.</param>
            <param name="rowsizecollection">The rowsizecollection.</param>
            <param name="columnsizecollection">The columnsizecollection.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.SetBreadthSpace(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Sets the breadth space.
            </summary>
            <param name="currentShape">The current shape.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.TableLayout.SetDepthSpace(Syncfusion.UI.Xaml.Diagram.IShape)">
            <summary>
            Sets the depth space.
            </summary>
            <param name="currentShape">The current shape.</param>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.TableLayout.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.Group">
            <summary>
            Represents the Group class which enables grouping of the node.
            </summary>
            Groups enable to combine two or more objects so that the same operation gets performed on all the children of the group. 
            Group is essentially just another node added which acts as a container for other objects.
            <example>
            <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.Group"/> in C# and add nodes to it..
            <code language="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Windows;
            using System.Windows.Controls;
            using System.Windows.Data;
            using System.Windows.Documents;
            using System.Windows.Input;
            using System.Windows.Media;
            using System.Windows.Media.Imaging;
            using System.Windows.Navigation;
            using System.Windows.Shapes;
            using System.ComponentModel;
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "End");
                   n1.Shape = Shapes.FlowChart_Start;
                   n1.Level = 1;
                   n1.OffsetX = 350;
                   n1.OffsetY = 325;
                   n1.Width = 100;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Group g = new Group(Guid.NewGuid(), "group1");
                   g.AddChild(n);
                   g.AddChild(n1);
                   diagramModel.Nodes.Add(g);
               }
               }
               }
            </code>
            <para/> Groups can also be added using the Group Command as follows in C#:
            <code language="C#">
             DiagramCommandManager.Group.Execute(diagramView.Page, diagramView);
            </code>
            <para/> Groups can be removed using the Ungroup Command as follows in C#:
            <code language="C#">
             DiagramCommandManager.Ungroup.Execute(diagramView.Page, diagramView);
            </code>
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.Node">
             <summary>
             Represents the node class.
             </summary>
             <remarks>
             Nodes are graphical objects that can be drawn on the page by selecting them from the Symbol Palette and dropping them on the page, or they can be added through code behind.
             </remarks>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/> in C# and add nodes to it.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.LabelVerticalAlignment = VerticalAlignment.Center;
                    n.LabelHorizontalAlignment = HorizontalAlignment.Center;
                    n.ToolTip="Start Node";
                    Model.Nodes.Add(n);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DiagramModel"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.dc">
            <summary>
            Used to store Diagram Control object
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mgroups">
            <summary>
            used to store the groups.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mrank">
            <summary>
            Used to store the rank
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.no">
            <summary>
            Used to store the count of nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.startPoint">
            <summary>
            Used to store the start point.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mnodePosition">
            <summary>
            Used to store the node position.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.minEdges">
            <summary>
            Used to store the in edges
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.moutEdges">
            <summary>
            Used to store the out edges.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.medges">
            <summary>
            Used to store the edges
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mports">
            <summary>
            Used to store the ports.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mParentNode">
            <summary>
            Used to store the parent node
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mParentEdge">
            <summary>
            Used to store the parent edge.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.treeChildren">
            <summary>
            Used to store the tree children
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mDepth">
            <summary>
            Used to store the depth.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.model">
            <summary>
            Used to store the model.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mIsFixed">
            <summary>
            Used to store the IsFixed property value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mIsExpanded">
            <summary>
            Used to store the IsExpanded property value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mPage">
            <summary>
            Used to store the page.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.dview">
            <summary>
            Used to store the View.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mouseup">
            <summary>
            Used to store the mouse up state
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.lastNodeClick">
            <summary>
            Used to store the last node click instance
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.lastNodePoint">
            <summary>
            Used to store the last node click point
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.resizenode">
            <summary>
            Used to store the resize node property setting.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.portItems">
            <summary>
            Used to store the port items
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.moldindex">
            <summary>
            Used to store the old ZIndex
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.mnewindex">
            <summary>
            Used to store the new ZIndex
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.misexe">
            <summary>
            Used to store node offset assignment check value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.state">
            <summary>
            Used to store the state of the node in case of cycle detection.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.canconn">
            <summary>
            Used to check if this node is to be connected o its parent or not.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.isdoubleclicked">
            <summary>
            Used to check if mouse is double clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.osize">
            <summary>
            Used to store the old size of node.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.hittest">
            <summary>
            Used to check if HitTestVisibility is true or not.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.row">
            <summary>
            Used to store the row count.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.col">
            <summary>
            Used to store the column count.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.pwidth">
            <summary>
            Used to store the node width in pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.pheight">
            <summary>
            Used to store the node height in pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.resize">
            <summary>
            Used to check if the node was resized.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> class.
            </summary>
            <param name="id">The Guid id.</param>
            <param name="name">The node name.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> class.
            </summary>
            <param name="id">The Guid id.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.Node_Loaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Calls Node_Loaded method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="sender"> object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.TreatAsObstacleProperty">
            <summary>
            Identifies the Node's Obstacle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelAngleProperty">
            <summary>
            Identifies the LabelAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.OffsetYProperty">
            <summary>
            Identifies the OffsetY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.OffsetXProperty">
            <summary>
            Identifies the OffsetX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.RotateAngleProperty">
            <summary>
            Identifies the RotateAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelWidthProperty">
            <summary>
            Identifies the LabelWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelHeightProperty">
            <summary>
            Identifies the LabelHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelTextWrappingProperty">
            <summary>
            Identifies the LabelTextWrapping dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelFontSizeProperty">
            <summary>
            Identifies the LabelFontSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelFontFamilyProperty">
            <summary>
            Identifies the LabelFontFamily dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelFontWeightProperty">
            <summary>
            Identifies the LabelFontWeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelFontStyleProperty">
            <summary>
            Identifies the LabelFontStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelTextAlignmentProperty">
            <summary>
            Identifies the LabelTextAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.GripperVisibilityProperty">
            <summary>
            Identifies the GripperVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.GripperStyleProperty">
            <summary>
            Identifies the GripperStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelBackgroundProperty">
            <summary>
             Identifies the LabelBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelForegroundProperty">
            <summary>
             Identifies the LabelForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.IsLabelEditableProperty">
            <summary>
            Identifies the IsLabelEditable dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.AllowSelectProperty">
            <summary>
            Identifies the AllowSelect dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.AllowMoveProperty">
            <summary>
            Identifies the AllowMove dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.AllowRotateProperty">
            <summary>
            Identifies the AllowRotate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.AllowResizeProperty">
            <summary>
            Identifies the AllowResize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.AllowPortDragProperty">
            <summary>
            Identifies the AllowPortDrag dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.MeasurementUnitsProperty">
            <summary>
            Identifies the MeasurementUnits property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.IsGroupedProperty">
            <summary>
            Identifies the IsGroup dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.DragProviderTemplateProperty">
            <summary>
            Identifies the DragProviderTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.IsDragConnectionOverProperty">
            <summary>
            Identifies the IsDragConnectionOver dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.ShapeProperty">
            <summary>
            Identifies the Shape dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.CustomPathStyleProperty">
            <summary>
            Identifies the CustomPathStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LevelProperty">
            <summary>
            Identifies the Level dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelVerticalAlignmentProperty">
            <summary>
            Identifies the LabelVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelHorizontalAlignmentProperty">
            <summary>
            Identifies the LabelHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.LabelVisibilityProperty">
            <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.PortVisibilityProperty">
            <summary>
            Identifies the PortVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.IsDoubleClickedProperty">
            <summary>
            Identifies the IsDoubleClicked dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.RaiseClickEvent">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.x">
            <summary>
            Raises the drag start event.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Node.y">
            <summary>
            Raises the drag start event.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.RaiseNodeDragEndEvent">
            <summary>
            Raises the drag end event.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.RaiseDoubleClickEvent">
            <summary>
            Raises the double click event.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.IsDoubleClick(Windows.Foundation.Point)">
            <summary>
            Called when the mouse button is clicked twice.
            </summary>
            <param name="position">Mouse Position</param>
            <returns>true if double clicked, false otherwise</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.Node_MouseLeftButtonUp(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the Node control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.UpdateConnectorType">
            <summary>
            Updating the ConnectorType based on the DrawingTool
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnPointerMoved(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Provides class handling for the MouseMove routed event that occurs when the mouse 
            pointer  is over this control.
            </summary>
            <param name="e">The MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnUnitsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [units changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnIsDragConnectionOverChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [IsDragConnectionOver changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnIsSelectedChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [IsSelected changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnRotateAngleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when rotate angle is changed.
            </summary>
            <param name="d">The dependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnLogicalOffsetXChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [logical offset X changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnLogicalOffsetYChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [logical offset Y changed].
            </summary>
            <param name="d">The DependencyObject .</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnLabelChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [label changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.Node_LayoutUpdated">
            <summary>
            Calls Node_LayoutUpdated method of the instance, notifies of the sender value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>       
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.GetDiagramView(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the diagram view.
            </summary>
            <param name="element">The element.</param>
            <returns>The DiagramView instance.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.GetPanel(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the panel.
            </summary>
            <param name="element">The element.</param>
            <returns>The panel instance</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.Move(Windows.Foundation.Point)">
            <summary>
            Moves the node, the argument being the motion vector.
            </summary>
            <param name="p">The point p.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.UpdateConnectorAdornerPathGeometry(Windows.Foundation.Point,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            updates connector path geometry
            </summary>
            <param name="position">line connector </param>
            <param name="e">MouseEventArgs</param>
            <returns>PathGeometry</returns>
            
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.CalculteAngle(Syncfusion.UI.Xaml.Diagram.Node,Windows.Foundation.Point)">
            <summary>
            CalCulate the Angle between Points for updating the Position
            </summary>
            <param name="node">Node</param>
            <param name="po"> Point</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.LineAdorner(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Preview of the LineConnector
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.GetAdornerLinePoints(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Gets the line points when mouse event is raised.
            </summary>
            <param name="e">Mouse point</param>
            <returns>The collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.AddPoints(System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            Adds points to the collection .
            </summary>
            <param name="linePoints">Collection of points.</param>
            <returns>The modified collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.GetAdornerLinePoints(Syncfusion.UI.Xaml.Diagram.Node,Windows.Foundation.Point,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Gets the line points when tail node is null.
            </summary>
            <param name="source">The source node</param>
            <param name="sinkPoint">sink point</param>
            <param name="e">mouse event position</param>
            <returns>The collection of points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.FindConnectionEnd(System.Collections.Generic.List{Windows.Foundation.Point},Windows.Foundation.Point,Windows.Foundation.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Makes the end connection to the respective node by finding the correct direction of the node.
            </summary>
            <param name="connectionPoints">Collection of points.</param>
            <param name="startPoint">The start point of the connector.</param>
            <param name="endPoint">The end point of the connector.</param>
            <param name="isTop">Flag indicating the top side of the source.</param>
            <param name="isBottom">Flag indicating the bottom side of the source.</param>
            <param name="isLeft">Flag indicating the left side of the source.</param>
            <param name="isRight">Flag indicating the right side of the source.</param>
            <param name="tisTop">Flag indicating the top side of the target.</param>
            <param name="tisBottom">Flag indicating the bottom side of the target.</param>
            <param name="tisLeft">Flag indicating the left side of the target.</param>
            <param name="tisRight">Flag indicating the right side of the target.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Node.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.RotateAngle">
            <summary>
            Gets or sets the rotate angle.
            </summary>
            <value>The rotate angle.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ContentHitTestVisible">
            <summary>
            Gets or sets a value indicating whether content is hit test visible. Used for serialization purposes internally.
            </summary>
            <value>
            <c>true</c> if [content hit test visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.PortReferenceCount">
            <summary>
            Gets or sets the reference count. Used for serialization purposes
            </summary>
            <value>The reference count.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Resized">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> is resized.
            </summary>
            <value><c>true</c> if resized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Oldsize">
            <summary>
            Gets or sets the old size.
            </summary>
            <value>The old size.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Groups">
            <summary>
            Gets the groups to which the INodeGroup objects belong.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.GripperVisibility">
             <summary>
             Gets or sets the gripper visibility.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Visibility"/>
             Default value is Collapsed.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.GripperVisibility=Visibility.Visible;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
             <seealso cref="!:Gripper"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.GripperStyle">
             <summary>
             Gets or sets the gripper style.  
             </summary>
             <remarks>
             When the gripper style is set, it is necessary to specify the Width, Height, HorizontalAlignment, VerticalAlignment and the Margin properties because GripperStyle property overrides the default settings.
             </remarks>
             <example>
             <para/>The following example shows how to write a style for the Gripper in Window.Resources.
             <code language="XAML">
              &lt;Style x:Key="GripperStyle"  TargetType="{x:Type syncfusion:Gripper}"&gt;
                    &lt;Setter Property="Width" Value="30"/&gt;
                    &lt;Setter Property="Height" Value="30"/&gt;
                    &lt;Setter Property="HorizontalAlignment" Value="Left"/&gt;
                    &lt;Setter Property="VerticalAlignment" Value="Top"/&gt; 
                    &lt;Setter Property="Margin" Value="10,-15,0,0"/&gt;
                    &lt;Setter Property="Template"&gt;
                        &lt;Setter.Value&gt;
                            &lt;ControlTemplate TargetType="{x:Type syncfusion:Gripper}"&gt;
                                &lt;Border Background="Blue" CornerRadius="10"   /&gt;
                            &lt;/ControlTemplate&gt;
                       &lt;/Setter.Value&gt;
                    &lt;/Setter&gt;
                &lt;/Style&gt;
             </code>
             <para/>The following code shows how to assign the style created to the Gripper of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>.
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.GripperStyle=this.Resources["GripperStyle"] as Style.
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
             <seealso cref="!:Gripper"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.AllowRotate">
             <summary>
             Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> rotation is allowed.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if rotation is enabled, false otherwise.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.AllowRotate=true;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.AllowResize">
             <summary>
             Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> resize is allowed.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if resizing is enabled, false otherwise.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.AllowResize=true;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.AllowMove">
             <summary>
             Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> can be moved.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if drag is enabled, false otherwise.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.AllowMove=true;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.AllowSelect">
             <summary>
             Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> can be selected.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if selection is enabled, false otherwise.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.AllowSelect=true;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ResizeThisNode">
            <summary>
            Gets or sets a value indicating whether to resize this node.
            </summary>
            <value><c>true</c> if [resize this node]; otherwise, <c>false</c>.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ReferenceNo">
            <summary>
            Gets or sets the reference no.
            </summary>
            <value>The reference no.</value>
            <remarks>
            Used for serialization purpose.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ReferenceID">
            <summary>
            This is used for Internal Purpose to save the GUID value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            Type: <see cref="T:Windows.UI.Xaml.Controls.Panel"/>
            Panel instance.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.IsLabelEditable">
             <summary>
             Gets or sets a value indicating whether this instance is label editable.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if it can be edited, false otherwise.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             node.IsLabelEditable=true;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
             <remarks>
             Default Value is false.When this is false, HitTest is also set to false.
             When set to true, clicking on the label, will make the editable textbox visible.
             Enter the new label and press ENTER to apply the changed label,
             or press ESC to ignore the new label and revert back to the old one.
             </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Label">
             <summary>
             Gets or sets the label.
             </summary>
             <value>
             Type: <see cref="T:System.String"/>
             String value.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    node.Label="SyncNode";
                    Model.Nodes.Add(n);
                }
                }
                }
             </code>
             </example>
             <remarks>
             Default value is an empty string.
             </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelVisibility">
             <summary>
             Gets or sets the label visibility.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Visibility"/>
             Enum specifying the visibility.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    node.LabelVisibility=Visibility.Visible;
                    Model.Nodes.Add(n);
                }
                }
                }
             </code>
             </example>
             <remarks>
             Default value is visible.
             </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelHorizontalAlignment">
             <summary>
             Gets or sets the HorizontalAlignment of the Label. This will take effect only if the LabelWidth is set.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.HorizontalAlignment"/>
             Enum specifying the alignment position.</value>
             <remarks>Default HorizontalAlignment is at the Center.</remarks>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    node.LabelHorizontalAlignment=HorizontalAlignment.Left;
                    Model.Nodes.Add(n);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelVerticalAlignment">
             <summary>
             Gets or sets the VerticalAlignment of the Label.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.VerticalAlignment"/>
             Enum specifying the alignment position.</value>
             <remarks>Default VerticalAlignment is at the Top.</remarks>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    node.LabelVerticalAlignment = VerticalAlignment.Left;
                    Model.Nodes.Add(n);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.TreatAsObstacle">
            <summary>
            Gets or sets a value indicating whether the node is treat as obstacle or not.
            Default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelAngle">
            <summary>
            Gets or sets the label angle.
            </summary>
            <value>
            Type: <see cref="T:System.Double"/>
            Angle value in pixels.
            </value>
            <remarks>Default Angle is 0d.</remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.IsDragConnectionOver">
            <summary>
            Gets or sets a value indicating whether the connection drag is over.
            </summary>
            <value>
            <c>true</c> if connection drag is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Shape">
             <summary>
             Gets or sets the shape.
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             Enum specifying the Shapes .
             </value>
             <remarks>
             Several built-in shapes are provided. The user can select from any of the built-in shapes or specify their own custom shape using the <see cref="P:Syncfusion.UI.Xaml.Diagram.Node.CustomPathStyle"/> property.
             </remarks>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    node.LabelVerticalAlignment = VerticalAlignment.Left;
                    Model.Nodes.Add(n);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.CustomPathStyle">
             <summary>
             Gets or sets the PathStyle of the Node.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Style"/>
             </value>
             <remarks>
             While setting the custom path, the shape of the node can be set to Custom.
             </remarks>
             <example>
             <para/>This example shows how to set PathStyle of a node .
             Specify a resource in XAML .
             <code language="XAML">
             &lt;Style TargetType="{x:Type Path}" x:Key="myNode"&gt;
                 &lt;Setter Property="Data" Value="M200,239L200,200 240,239 280,202 320,238 281,279 240,244 198,279z"&gt;&lt;/Setter&gt;
                 &lt;Setter Property="Fill" Value="MidnightBlue" /&gt;
             &lt;/Style&gt;
              </code>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   Model = new DiagramModel ();
                   View = new DiagramView ();
                   Control.View = View;
                   Control.Model = Model;
                   View.Bounds = new Thickness(0, 0, 1000, 1000);
                   Node n = new Node(Guid.NewGuid(), "Start");
                   Style customstyle = (Style)this.Resources["myNode"];
                    n.CustomPathStyle=customstyle;
                    n.Shape = Shapes.Custom;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    Model.Nodes.Add(n);
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Level">
             <summary>
             Gets or sets the level.
             </summary>
             <value>The level.</value>
             <remarks>
             Based on the level property , the nodes belonging to the same level can be customized to have the same look and feel.
             </remarks>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Level = 2;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             node.LabelVerticalAlignment = VerticalAlignment.Left;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Position">
            <summary>
            Gets or sets the Center Position  of the Node.
            </summary>
            <value>
            Type: <see cref="T:Windows.Foundation.Point"/>
            Center Point.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.IsDoubleClicked">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> is double clicked.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> is double clicked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Ports">
             <summary>
             Gets or sets the ports.
             </summary>
             <value>The ports.</value>
             <example>
             C#:
             <para/>
             The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/> in C#.
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             //Creates a node
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.Level = 1;
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             Model.Nodes.Add(n);
             //Define a Custom port for the node.
             ConnectionPort port = new ConnectionPort();
             port.Node=n;
             port.Left=75;
             port.Top=10;
             port.PortShape = PortShapes.Arrow;
             port.PortStyle.Fill = Brushes.Transparent;
             port.Height = 11;
             port.Width = 11;
             n.Ports.Add(port);
             Node n1 = new Node(Guid.NewGuid(), "Decision1");
             n1.Shape = Shapes.FlowChart_Process;
             n1.IsLabelEditable = true;
             n1.Label = "Alarm Rings";
             n1.Level = 2;
             n1.OffsetX = 150;
             n1.OffsetY = 125;
             n1.Width = 150;
             n1.Height = 75;
             Model.Nodes.Add(n1);
             ConnectionPort port1 = new ConnectionPort();
             port1.Node=n;
             port1.Left=75;
             port1.Top=50;
             port1.PortShape = PortShapes.Arrow;
             port1.PortStyle.Fill = Brushes.Transparent;
             port1.Height = 11;
             port1.Width = 11;
             n1.Ports.Add(port1);
             }
             }
             }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionPort"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.PortVisibility">
             <summary>
             Gets or sets the port visibility.
             </summary>
             <value>The port visibility.</value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.PortVisibility = Visibility.Visible;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.AllowPortDrag">
             <summary>
             Gets or sets a value indicating whether port can be moved or not.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if drag is enabled, false otherwise.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.AllowPortDrag = true;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelWidth">
             <summary>
             Gets or sets the width of the label.
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             By default the label width equals the node width.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelWidth = 50;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelHeight">
             <summary>
             Gets or sets the height of the label.
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             By default the label height equals 20.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelHeight = 50;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelTextWrapping">
             <summary>
             Gets or sets the label text wrapping.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.TextWrapping"/>
             By default it is set to NoWrap.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelTextWrapping = TextWrapping.Wrap;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelFontSize">
             <summary>
             Gets or sets the size of the label font.
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             By default it is set to 11d.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelFontSize = 14;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelFontFamily">
             <summary>
             Gets or sets the label font family.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Media.FontFamily"/>
             By default it is set to Arial.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelFontFamily = new FontFamily("Verdana");
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelFontWeight">
             <summary>
             Gets or sets the label font weight.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Text.FontWeight"/>
             By default it is set to SemiBold.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelFontWeight = FontWeights.Bold;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelFontStyle">
             <summary>
             Gets or sets the label font style.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Text.FontStyle"/>
             By default it is set to Normal.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelFontStyle = FontStyles.Italic;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelBackground">
             <summary>
             Gets or sets the label background.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Media.Brush"/>
             By default it is set to White.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelBackground = Brushes.Red;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelForeground">
             <summary>
             Gets or sets the label foreground.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.Media.Brush"/>
             By default it is set to Black.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.LabelForeground = Brushes.Blue;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LabelTextAlignment">
             <summary>
             Gets or sets the label text alignment.
             </summary>
             <value>
             Type: <see cref="T:Windows.UI.Xaml.TextAlignment"/>
             By default it is set to Center.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
             public DiagramControl Control;
             public DiagramModel Model;
             public DiagramView View;
             public MainPage()
             {
             InitializeComponent ();
             Control = new DiagramControl ();
             Model = new DiagramModel ();
             View = new DiagramView ();
             Control.View = View;
             Control.Model = Model;
             View.Bounds = new Thickness(0, 0, 1000, 1000);
             Node n = new Node(Guid.NewGuid(), "Start");
             n.Shape = Shapes.FlowChart_Start;
             n.IsLabelEditable = true;
             n.Label = "Start";
             n.OffsetX = 150;
             n.OffsetY = 25;
             n.Width = 150;
             n.Height = 75;
             n.ToolTip="Start Node";
             n.TextAlignment = TextAlignment.Left;
             Model.Nodes.Add(n);
             }
             }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Isnodeexe">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> offset properties are set.
            </summary>
            <value><c>true</c> if isnodeexe; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.State">
            <summary>
            Gets or sets the state of the node in case of cycle detection.
            </summary>
            <value>The state of the node. (0-->non-visited; 1-->Visited and InProgress; 2-->Done)</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.CanConnect">
            <summary>
            Gets or sets a value indicating whether this node can be connected to the other specified node in case of hierarchical-tree layout.
            </summary>
            <value>
            <c>true</c> if can connect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.PixelWidth">
            <summary>
            Gets or sets the width of the node in pixels.
            </summary>
            <value>The width of the node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.PixelHeight">
            <summary>
            Gets or sets the height of the node in pixels.
            </summary>
            <value>The height of the node.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.MeasurementUnits">
            <summary>
            Gets or sets the Measurement unit property.
            <value>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.MeasureUnits"/>
            Enum specifying the unit to be used.
            </value>
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.Node.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.IsGrouped">
            <summary>
            Gets or sets a value indicating whether this instance is grouped.
            </summary>
            <value>
            <c>true</c> if this instance is grouped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            <c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Syncfusion#UI#Xaml#Diagram#ICommon#OldZIndex">
            <summary>
            Gets or sets the old ZIndex value.
            </summary>
            <value>The old ZIndex value</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Syncfusion#UI#Xaml#Diagram#ICommon#NewZIndex">
            <summary>
            Gets or sets the new ZIndex value.
            </summary>
            <value>The new ZIndex value</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Rank">
            <summary>
            Gets or sets the Rank to which the node belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Parents">
            <summary>
            Gets or sets the parent nodes  based on the connections in a hierarchical layout.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.IsFixed">
            <summary>
            Gets or sets a value indicating whether this instance is fixed.
            </summary>
            <value><c>true</c> if this instance is fixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            <c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.InDegree">
            <summary>
            Gets the in-degree of the node, the number of edges for which this node
            is the target.
            </summary>
            <value>The in degree</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.OutDegree">
            <summary>
            Gets the out-degree of the node, the number of edges for which this node
            is the source.
            </summary>
            <value>The out degree.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Degree">
            <summary>
            Gets the degree of the node, the number of edges for which this node
            is either the source or the target.
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.InEdges">
            <summary>
            Gets the collection of all incoming edges, those for which this node
            is the target.
            </summary>
            <value>The In Edges .</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.OutEdges">
            <summary>
            Gets the collection of all outgoing edges, those for which this node
            is the source.
            </summary>
            <value>The OutEdges</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Edges">
            <summary>
            Gets the collection of all incident edges, those for which this node
            is either the source or the target.
            </summary>
            <value>The Collection of Edges</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.InNeighbors">
            <summary>
            Gets the collection of all adjacent nodes connected to this node by an
            incoming edge (i.e., all nodes that "point" at this one).
            </summary>
            <value>Collection of inedges.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.OutNeighbors">
            <summary>
            Gets the collection of adjacent nodes connected to this node by an
            outgoing edge (i.e., all nodes "pointed" to by this one).
            </summary>
            <value>Collection of out edges</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Neighbors">
            <summary>
            Gets an iterator over all nodes connected to this node.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ParentNode">
            <summary>
            Gets or sets the parent of the entity
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ParentEdge">
            <summary>
            Gets or sets the edge between this node and its parent node in a tree
            structure.
            </summary>
            <value>The Parent edge</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Depth">
            <summary>
            Gets or sets the tree depth of this node.
            <remarks>The root's tree depth is
            zero, and each level of the tree is one depth level greater.
            </remarks>
            </summary>
            <value>The depth value</value>
            <remarks>The root's tree depth is
            zero, and each level of the tree is one depth level greater.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ChildCount">
            <summary>
            Gets the number of tree children of this node.
            </summary>
            <value>The child count</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.FirstChild">
            <summary>
            Gets this node's first tree child.
            </summary>
            <value>The first child</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.LastChild">
            <summary>
            Gets this node's last tree child.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.PreviousSibling">
            <summary>
            Gets this node's previous tree sibling.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.NextSibling">
            <summary>
            Gets this node's next tree sibling.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.PreviousShape">
            <summary>
            Gets the previous shape.
            </summary>
            <value>The previous shape.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Row">
            <summary>
            Gets or sets the row.
            </summary>
            <value>The row count.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column count.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Children">
            <summary>
            Gets or sets an iterator over this node's tree children.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ID">
            <summary>
            Gets the unique identifier of this node.
            </summary>
            <value>The unique identifier value.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.NodeID">
            <summary>
            Gets the Node ID
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.ParentID">
            <summary>
            Gets or sets the parent ID.
            </summary>
            <value>The parent ID.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.OffsetX">
            <summary>
            Gets or sets the logical offset X. Used for internal calculation.
            </summary>
            <value>The logical offset X.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Node.OffsetY">
            <summary>
            Gets or sets the logical offset Y. Used for internal calculation.
            </summary>
            <value>The logical offset Y.</value>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Group.m_id">
            <summary>
            Used to store the Group Guid.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Group.m_childs">
            <summary>
            Used to store the group children.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Group.gchild">
            <summary>
            Used to store the group children reference number.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Group"/> class.
            </summary>
            <param name="id">The Guid id.</param>
            <param name="name">The node name.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.Group"/> class.
            </summary>
            <param name="id">The Guid id.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.Group_LayoutUpdated(System.Object,System.Object)">
            <summary>
            Handles the LayoutUpdated event of the Group control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.GetLogicalOffsetX">
            <summary>
            Calculates the OffsetX position for the node.
            </summary>
            <returns>The OffsetX value</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.GetLogicalOffsetY">
            <summary>
            Calculates the OffsetY position for the node.
            </summary>
            <returns>The OffsetY value.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.GetRightmostposition">
            <summary>
            Gets the rightmost position  of the group.
            </summary>
            <returns>Double value representing the rightmost position.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.GetBottommostposition">
            <summary>
            Gets the bottommost position  of the group.
            </summary>
            <returns>Double value representing the rightmost position.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.AddChild(Syncfusion.UI.Xaml.Diagram.INodeGroup)">
            <summary>
            Adds a child to the group.
            </summary>
            <param name="child">The child to be added to the group.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            Node n = new Node(Guid.NewGuid(), "Start");
            n.Shape = Shapes.FlowChart_Start;
            n.Level = 1;
            n.OffsetX = 150;
            n.OffsetY = 25;
            n.Width = 150;
            n.Height = 75;
            Node n1 = new Node(Guid.NewGuid(), "End");
            n1.Shape = Shapes.FlowChart_Start;
            n1.Level = 1;
            n1.OffsetX = 350;
            n1.OffsetY = 325;
            n1.Width = 100;
            n1.Height = 75;
            Model.Nodes.Add(n);
            Model.Nodes.Add(n1);
            Group g = new Group(Guid.NewGuid(), "group1");
            g.AddChild(n);
            g.AddChild(n1);
            diagramModel.Nodes.Add(g);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.GroupCheck(Syncfusion.UI.Xaml.Diagram.INodeGroup)">
            <summary>
            Checks if the child is a group
            </summary>
            <param name="node">The INodeGroup object to check.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.Group.RemoveChild(Syncfusion.UI.Xaml.Diagram.Node)">
            <summary>
            Removes a child from the group.
            </summary>
            <param name="child">The child to be removed from the group.</param>
            <example>
            <code language="C#">
            using Syncfusion.Core;
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
               public DiagramControl Control;
               public DiagramModel Model;
               public DiagramView View;
               public Window1 ()
               {
                  InitializeComponent ();
                  Control = new DiagramControl ();
                  Model = new DiagramModel ();
                  View = new DiagramView ();
                  Control.View = View;
                  Control.Model = Model;
                  View.Bounds = new Thickness(0, 0, 1000, 1000);
                  Node n = new Node(Guid.NewGuid(), "Start");
                   n.Shape = Shapes.FlowChart_Start;
                   n.Level = 1;
                   n.OffsetX = 150;
                   n.OffsetY = 25;
                   n.Width = 150;
                   n.Height = 75;
                   Node n1 = new Node(Guid.NewGuid(), "End");
                   n1.Shape = Shapes.FlowChart_Start;
                   n1.Level = 1;
                   n1.OffsetX = 350;
                   n1.OffsetY = 325;
                   n1.Width = 100;
                   n1.Height = 75;
                   Model.Nodes.Add(n);
                   Model.Nodes.Add(n1);
                   Group g = new Group(Guid.NewGuid(), "group1");
                   g.AddChild(n);
                   g.AddChild(n1);
                   diagramModel.Nodes.Add(g);
                   g.RemoveChild(n);
               }
               }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Group.NodeChildren">
            <summary>
            Gets the group children.
            </summary>
            <value>The group children.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Group.GroupChildrenRef">
            <summary>
            Gets or sets the group children reference number. Used for serialization purposes.
            </summary>
            <value>The group children ref.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.Group.ID">
            <summary>
            Gets the unique identifier of this node.
            </summary>
            <value>The unique identifier value.</value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ZoomMode">
            <summary>
            Zoom mode to specify value in Percentage or double value.
            Example: 
                0.5d is 50%
                1d is equal to 100%
                1.5d is 150%
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomMode.Unit">
            <summary>
            Access zoom value in double type
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomMode.Percentage">
            <summary>
            Access zoom value in Percentage
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ZoomGesture">
            <summary>
            Define MouseWheel, MouseClick, KeyCombination gesture for zooming.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.None">
            <summary>
            No gesture.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.MouseWheelUp">
            <summary>
            Mouse is scrolled up.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.MouseWheelDown">
            <summary>
            Mouse is scrolled down.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.Ctrl">
            <summary>
            Ctrl key.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.Shift">
            <summary>
            Shift key.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.Alt">
            <summary>
            Alt key.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.LeftClick">
            <summary>
            Mouse left click.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.RightClick">
            <summary>
            Mouse right click.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.LeftDoubleClick">
            <summary>
            Mouse left double click.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.RightDoubleClick">
            <summary>
            Mouse right double click.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ZoomGesture.And">
            <summary>
            All the Ctrl, Shift, Alt gesture should be satisfied.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.OverviewMouseState">
            <summary>
            Mouse state.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.OverviewMouseState.LeftClick">
            <summary>
            Mouse left button clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.OverviewMouseState.RightClick">
            <summary>
            Mouse right button clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.OverviewMouseState.LeftDoubleClick">
            <summary>
            Mouse left button double clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.OverviewMouseState.RightDoubleClick">
            <summary>
            Mouse right button double clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.OverviewMouseState.Pan">
            <summary>
            Panning.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.OverviewMouseState.None">
            <summary>
            None state.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Invert">
            <summary> Inverts this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Matrix" /> structure is not invertible.</exception>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.#ctor(Windows.UI.Xaml.Media.Matrix@)">
            <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="m11">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M11" /> coefficient.</param>
            <param name="m12">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M12" /> coefficient.</param>
            <param name="m21">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M21" /> coefficient.</param>
            <param name="m22">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M22" /> coefficient.</param>
            <param name="offsetX">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetX" /> coefficient.</param>
            <param name="offsetY">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetY" /> coefficient.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.SetIdentity">
            <summary> Changes this <see cref="T:System.Windows.Media.Matrix" /> structure into an identity matrix. </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.op_Multiply(Syncfusion.UI.Xaml.Diagram.MatrixExt,Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
            <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
            <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Multiply(Syncfusion.UI.Xaml.Diagram.MatrixExt,Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
            <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
            <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Append(Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Appends the specified <see cref="T:System.Windows.Media.Matrix" /> structure to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to append to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Prepend(Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Prepends the specified <see cref="T:System.Windows.Media.Matrix" /> structure onto this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to prepend to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Rotate(System.Double)">
            <summary> Applies a rotation of the specified angle about the origin of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.RotatePrepend(System.Double)">
            <summary> Prepends a rotation of the specified angle to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="angle">The angle of rotation to prepend.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.RotateAt(System.Double,System.Double,System.Double)">
            <summary>Rotates this matrix about the specified point.</summary>
            <param name="angle">The angle, in degrees, by which to rotate this matrix. </param>
            <param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
            <param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.RotateAtPrepend(System.Double,System.Double,System.Double)">
            <summary>Prepends a rotation of the specified angle at the specified point to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
            <param name="angle">The rotation angle, in degrees.</param>
            <param name="centerX">The x-coordinate of the rotation center.</param>
            <param name="centerY">The y-coordinate of the rotation center.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Scale(System.Double,System.Double)">
            <summary> Appends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
            <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.ScalePrepend(System.Double,System.Double)">
            <summary> Prepends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the x-axis.</param>
            <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the y-axis.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
            <summary>Scales this <see cref="T:System.Windows.Media.Matrix" /> by the specified amount about the specified point.</summary>
            <param name="scaleX">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis. </param>
            <param name="scaleY">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
            <param name="centerX">The x-coordinate of the scale operation's center point.</param>
            <param name="centerY">The y-coordinate of the scale operation's center point.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
            <summary>Prepends the specified scale about the specified point of this <see cref="T:System.Windows.Media.Matrix" />.</summary>
            <param name="scaleX">The x-axis scale factor.</param>
            <param name="scaleY">The y-axis scale factor.</param>
            <param name="centerX">The x-coordinate of the point about which the scale operation is performed.</param>
            <param name="centerY">The y-coordinate of the point about which the scale operation is performed.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Skew(System.Double,System.Double)">
            <summary> Appends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
            <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.SkewPrepend(System.Double,System.Double)">
            <summary> Prepends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
            <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Translate(System.Double,System.Double)">
            <summary> Appends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
            <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.TranslatePrepend(System.Double,System.Double)">
            <summary> Prepends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
            <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Transform(Windows.Foundation.Point)">
            <summary>Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix" /> and returns the result.</summary>
            <returns>The result of transforming <paramref name="point" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
            <param name="point">The point to transform.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Transform(Windows.Foundation.Point[])">
            <summary>Transforms the specified points by this <see cref="T:System.Windows.Media.Matrix" />. </summary>
            <param name="points">The points to transform. The original points in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.op_Equality(Syncfusion.UI.Xaml.Diagram.MatrixExt,Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
            <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.</returns>
            <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
            <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.op_Inequality(Syncfusion.UI.Xaml.Diagram.MatrixExt,Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are not identical.</summary>
            <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are not identical; otherwise, false.</returns>
            <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
            <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Equals(Syncfusion.UI.Xaml.Diagram.MatrixExt,Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
            <returns>true if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, false.</returns>
            <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
            <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />. </summary>
            <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" /> structure; otherwise, false.</returns>
            <param name="o">The <see cref="T:System.Object" /> to compare.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.Equals(Syncfusion.UI.Xaml.Diagram.MatrixExt)">
            <summary> Determines whether the specified <see cref="T:System.Windows.Media.Matrix" /> structure is identical to this instance. </summary>
            <returns>true if instances are equal; otherwise, false. </returns>
            <param name="value">The instance of <see cref="T:System.Windows.Media.Matrix" /> to compare to this instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.MatrixExt.GetHashCode">
            <summary> Returns the hash code for this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.Identity">
            <summary> Gets an identity <see cref="T:System.Windows.Media.Matrix" />. </summary>
            <returns>An identity matrix.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.IsIdentity">
            <summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix. </summary>
            <returns>true if the <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.Determinant">
            <summary> Gets the determinant of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The determinant of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.M11">
            <summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 1.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.M12">
            <summary> Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.M21">
            <summary> Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
            <returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.M22">
            <summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 1.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.OffsetX">
            <summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.  </summary>
            <returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.MatrixExt.OffsetY">
            <summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. </summary>
            <returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IZoomParameter">
            <summary>
            Parameter for executing zoom manually
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IZoomParameter.ZoomTo">
            <summary>
            Zoom to a particular scale value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IZoomParameter.ZoomFactor">
            <summary>
            Percentage of scale value for each ZoomIn or ZoomOut functionality
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IZoomParameter.FocusPoint">
            <summary>
            Point of foucus while zooming. Usually used to specify a particular point in the content.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ZoomParamenter">
            <summary>
            Parameter for executing zoom manually
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ZoomParamenter.ZoomTo">
            <summary>
            Zoom to a particular scale value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ZoomParamenter.ZoomFactor">
            <summary>
            Percentage of scale value for each ZoomIn or ZoomOut functionality
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ZoomParamenter.FocusPoint">
            <summary>
            Point of foucus while zooming. Usually used to specify a particular point in the content.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ButtonChecker">
            <summary>
            Represents ButtonChecker items control.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ButtonChecker.CheckedButtonProperty">
            <summary>
            Defines check button. This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ButtonChecker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ButtonChecker"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ButtonChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.ButtonChecker"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ButtonChecker.OnCheckedButtonChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCheckedButtonChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.ButtonChecker.OnCheckedButtonChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CheckedButtonChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.ButtonChecker.CheckedButton">
            <summary>
            Gets or sets the checked button.
            </summary>
            <value>The checked button.</value>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.ButtonChecker.CheckedButtonChanged">
            <summary>
            Event that is raised when CheckedButton property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PalleteFilterConverter">
            <summary>
            Represents GalleryFilter converter.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value from a PaletteFilter to FilterRibbonButton.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.FilterToRibbonButtonConverter">
            <summary>
            Represents Filter to RibbonButton converter.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterToRibbonButtonConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value from a Filter to RibbonButton.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterToRibbonButtonConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value from  FilterRibbonButton to a Filter.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton">
            <summary>
            Represents the button used for the symbol Palette.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.CornerRadiusProperty">
            <summary>
            Defines corner radius of button. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.LabelProperty">
            <summary>
            Defines button label. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.IsSelectedProperty">
            <summary>
            Defines when button is selected. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.IsToggleProperty">
            <summary>
            Defines when button is toggle. This is a dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnLabelChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnLabelChanged method of the instance, notifies of the
            dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnLabelChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises LabelChanged event.
            </summary>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnSizeFormChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnSizeFormChanged method of the instance, notifies of
            the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnSizeFormChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises SizeFormChanged
            event.
            </summary>
            <param name="e">Property change details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnIsSelectedChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnIsSelectedChanged method of the instance, notifies of
            the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnIsSelectedChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises IsSelectedChanged
            event.
            </summary>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnIsToggleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnIsToggleChanged method of the instance, notifies of
            the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnIsToggleChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises IsToggleChanged
            event.
            </summary>
            <param name="e">Property changes details, such as old value
            and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.OnClick(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> routed event.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of a <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> are rounded.
            </summary>
            <value>
            Type: <see cref="P:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.CornerRadius"/>
            The CornerRadius that describes the degree to which corners are rounded. This property has no default value.
            </value>
            <remarks>
            Although the property name suggests that you can use only singular values, CornerRadius also supports non-uniform radii. Radius values that are too large are scaled so that they blend smoothly from corner to corner.
            </remarks>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";        
            button.CornerRadius = new CornerRadius(3);
            </code>
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/>
            <seealso cref="P:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.CornerRadius"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.Label">
            <summary>
            Gets or sets the text that labels the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/>.
            </summary>
            <value>
            Type: <see cref="T:System.String"/>
            Text that labels the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/>. The default is empty string.
            </value>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";        
            button.CornerRadius = new CornerRadius(3);
            </code>
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/>
            <seealso cref="T:System.String"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.IsSelected">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> is selected.   
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            true if the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> is selected; false if the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> is not selected.  The default is false.
            </value>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";  
            button.IsToggle = true;
            button.IsSelected = true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.IsToggle">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> is toggle button.
            </summary>
            <value>
            Type: <see cref="T:System.Boolean"/>
            true if the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> is toggle; false if the <see cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/> is not toggle.  The default is false.
            </value>
            <example>
            <code>
            FilterRibbonButton button = new FilterRibbonButton();
            button.Label = "Button";  
            button.IsToggle = true;
            button.IsSelected = true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton"/>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.LabelChanged">
            <summary>
            Event that is raised when Label property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.SizeFormChanged">
            <summary>
            Event that is raised when SizeForm property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.IsSelectedChanged">
            <summary>
            Event that is raised when IsSelected property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.FilterRibbonButton.IsToggleChanged">
            <summary>
            Event that is raised when IsToggle property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector">
            <summary>
            Represents internal PalleteFilterSelector control.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.m_dropDownButton">
            <summary>
            Represents the drop down button.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.m_popup">
            <summary>
            Represents the popup
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.m_stack">
            <summary>
            Is used for correct popup opening and closing.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.FiltersProperty">
            <summary>
            Defines the collection of filters.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.SelectedFilterProperty">
            <summary>
            Defines the selected filter.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.IsDropDownOpenProperty">
            <summary>
            Defines whether dropdown is open.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call
            <see cref="!:System.Windows.FrameworkElement.ApplyTemplate"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.DropDownButton_MouseDown(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Handles the MouseDown event of the m_dropDownButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.OnIsDropDownOpenChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnIsDropDownOpenChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.OnIsDropDownOpenChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises IsDropDownOpenChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.OnPointerCaptureLost(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Invoked when an unhandled Mouse.LostMouseCapture attached
            event reaches an element in its route that is derived from
            this class. Implement this method to add class handling for
            this event.
            </summary>
            <param name="e">TheMouseEventArgs that contains event data.</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.Filters">
            <summary>
            Gets or sets the collection of filters.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.SelectedFilter">
            <summary>
            Gets or sets the selected filter.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether this instance is drop down open.
            </summary>
            <value>
            <c>true</c> if this instance is drop down open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.PalleteFilterSelector.IsDropDownOpenChanged">
            <summary>
            Event that is raised when IsDropDownOpen property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.SymbolPalette">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.BorderHeightProperty">
            <summary>
            Identifies the BorderHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.BorderWidthProperty">
            <summary>
            Identifies the BorderWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CustomHeaderTextProperty">
            <summary>
            Identifies the CustomHeaderText dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterIndexesProperty">
            <summary>
            Defines SymbolPalette filter indexes.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.InternalFiltersProperty">
            <summary>
            Defines the collection of InternalSymbolPalette filters.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpBackgroundProperty">
            <summary>
            Identifies the PopUpBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpForegroundProperty">
            <summary>
            Identifies the PopUpForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpBorderBrushProperty">
            <summary>
            Identifies the PopUpBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpItemMouseOverBrushProperty">
            <summary>
            Identifies the PopUpItemMouseOverBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpItemMouseOverBorderBrushProperty">
            <summary>
            Identifies the PopUpItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpBorderThicknessProperty">
            <summary>
            Identifies the PopUpBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpLeftColumnBackgroundProperty">
            <summary>
            Identifies the PopUpLeftColumnBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CheckerBorderBrushProperty">
            <summary>
            Identifies the CheckerBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CheckerBackgroundProperty">
            <summary>
            Identifies the CheckerBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CheckerTickBrushProperty">
            <summary>
            Identifies the CheckerTickBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorBackgroundProperty">
            <summary>
            Identifies the FilterSelectorBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorForegroundProperty">
            <summary>
            Identifies the FilterSelectorForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorMouseOverForegroundProperty">
            <summary>
            Identifies the FilterSelectorMouseOverForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorBorderBrushProperty">
            <summary>
            Identifies the FilterSelectorBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorBorderThicknessProperty">
            <summary>
            Identifies the FilterSelectorBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemBorderThicknessProperty">
            <summary>
            Identifies the ItemBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCornerRadiusProperty">
            <summary>
            Identifies the ItemCornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemPaddingProperty">
            <summary>
            Identifies the ItemPadding dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SelectedItemProperty">
            <summary>
            Defines the selected SymbolPalette item.  This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolPaletteGroupBackgroundProperty">
            <summary>
            Identifies the SymbolPaletteGroupBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolPaletteGroupBorderBrushProperty">
            <summary>
            Identifies the SymbolPaletteGroupBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolPaletteGroupForegroundProperty">
            <summary>
            Identifies the SymbolPaletteGroupForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ShowPreviewProperty">
            <summary>
            Identifies the Preview of the SymbolPaletteItem dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.#ctor">
            <summary>
            Initialiazes a new instance of SymbolPalette control
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.AddSymbolPaletteItem(Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup,System.String)">
            <summary>
            Adds the SymbolPaletteItem to the SymbolPaletteGroup
            </summary>
            <param name="group">SymbolPaletteGroup</param>
            <param name="path">Path string </param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.GoToState(System.Boolean,System.String[])">
            <summary>
            Called when changes in visual state of automatic button takes place
            </summary>
            <param name="useTransitions">Indicate whether to apply transition or not</param>
            <param name="stateNames">Contain the state name</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.OnFilterIndexesChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnFilterIndexesChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.GetFilterIndexes(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of the FilterIndexes property for a given element.
            </summary>
            <param name="obj">The element for which to retrieve the FilterIndexes value.</param>
            <returns>the filter indices.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SetFilterIndexes(Windows.UI.Xaml.DependencyObject,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets the value of the FilterIndexes property for a given element.
            </summary>
            <param name="obj">The element on which to apply the property value.</param>
            <param name="value">FilterIndexes value</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.LoadPalette">
            <summary>
            Loads the palette items.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.OnApplyTemplate">
            <summary>
            Applies the Template for the control
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.OnSelectedItemChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises SelectedItemChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.OnSelectedItemChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnSelectedItemChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.OnCurrentFilterChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCurrentFilterChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.OnCurrentFilterChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CurrentFilterChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterItems(System.Object)">
            <summary>
            Checks if the group filter contains items or not .
            </summary>
            <param name="item">SymbolPalette item</param>
            <returns>True if it has ,false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolGroups_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls OnCollectionChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolPaletteFilters_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls GalleryFilters_CollectionChanged method of the instance, notifies of the sender value changes.
            </summary>
            <param name="sender">object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPalette.UpdateVisualState(System.Boolean)">
            <summary>
            Method is used to update the state of automatic button
            </summary>
            <param name="useTransitions">Update the state</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpBorderBrush">
            <summary>
            Gets or sets the pop up border brush.
            </summary>
            <value>The pop up border brush.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SelectedItemChanged">
            <summary>
            Event that is raised when SelectedItem property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CurrentFilterChanged">
            <summary>
            Event that is raised when CurrentFilter property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ShowPreview">
            <summary>
            Gets or sets the value of the ShowPreview dependency property.
            </summary>       
            <value>
            Type : bool
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.BorderHeight">
            <summary>
            Gets or sets the value of the BorderHeight dependency property.
            </summary>       
            <value>
            Type : Double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.BorderWidth">
            <summary>
            Gets or sets the value of the BorderWidth dependency property.
            </summary>       
            <value>
            Type : Double
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpBackground">
            <summary>
            Gets or sets the pop up background.
            </summary>
            <value>The pop up background.</value>
            <remarks>
            Default value is WhiteSmoke.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpBackground=Brushes.White;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpForeground">
            <summary>
            Gets or sets the pop up foreground.
            </summary>
            <value>The pop up foreground.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpForeground=Brushes.Black;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpItemMouseOverBrush">
            <summary>
            Gets or sets the pop up item mouse over brush.
            </summary>
            <value>The pop up item mouse over brush.</value>
            <remarks>
            Default value is LightSalmon.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpItemMouseOverBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpItemMouseOverBorderBrush">
            <summary>
            Gets or sets the pop up item mouse over brush.
            </summary>
            <value>The pop up item mouse over brush.</value>
            <remarks>
            Default value is LightSalmon.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpItemMouseOverBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CheckerBackground">
            <summary>
            Gets or sets the checker background.
            </summary>
            <value>The checker background.</value>
            <remarks>
            Default value is Beige.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.CheckerBackground=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CheckerBorderBrush">
            <summary>
            Gets or sets the checker border brush.
            </summary>
            <value>The checker border brush.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.CheckerBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CheckerTickBrush">
            <summary>
            Gets or sets the checker tick brush.
            </summary>
            <value>The checker tick brush.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.CheckerTickBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.PopUpLeftColumnBackground">
            <summary>
            Gets or sets the pop up left column background.
            </summary>
            <value>The pop up left column background.</value>
            <remarks>
            Default value is LightGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.PopUpLeftColumnBackground=Brushes.Gray;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.CustomHeaderText">
            <summary>
            Gets or sets the value of the CustomHeaderText dependency property.
            </summary>       
            <value>
            Type : String
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorBackground">
            <summary>
            Gets or sets the filter selector background.
            </summary>
            <value>The filter selector background.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorBackground=Brushes.Salmon;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorForeground">
            <summary>
            Gets or sets the filter selector foreground.
            </summary>
            <value>The filter selector foreground.</value>
            <remarks>
            Default value is DarkSlateGray.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorForeground=Brushes.Black;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorBorderThickness">
            <summary>
            Gets or sets the filter selector border thickness.
            </summary>
            <value>The filter selector border thickness.</value>
            <remarks>
            Default value is (0,0,0,1).
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorBorderThickness=new Thickness(2);
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorMouseOverForeground">
            <summary>
            Gets or sets the filter selector mouse over foreground.
            </summary>
            <value>The filter selector mouse over foreground.</value>
            <remarks>
            Default value is OldLace.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorMouseOverForeground=Brushes.White;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorBorderBrush">
            <summary>
            Gets or sets the filter selector border brush.
            </summary>
            <value>The filter selector border brush.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.FilterSelectorBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorDropdownBorderBrush">
            <summary>
            Gets or sets the filter selector dropdown border brush.
            </summary>
            <value>The filter selector dropdown border brush.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.FilterSelectorDropdownBackgroundBrush">
            <summary>
            Gets or sets the filter selector dropdown background brush.
            </summary>
            <value>The filter selector dropdown background brush.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedBorderBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedMouseOverBorderBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemMouseOverBorderBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedBackgroundBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemCheckedMouseOverBackgroundBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.ItemMouseOverBackgroundBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SelectedItem">
            <summary>
            Gets or sets the value of the SelectedItem dependency property.
            </summary>       
            <value>
            Type : SymbolPaletteItem
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.InternalSymbolFilters">
            <summary>
            Gets or sets the internal symbol filters.
            </summary>
            <value>The internal symbol filters.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolPaletteGroupBackground">
            <summary>
            Gets or sets the SymbolPaletteGroup background.
            </summary>
            <value>The symbol palette group background.</value>
            <remarks>
            Default value is Bisque
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.SymbolPaletteGroupBackground=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolPaletteGroupBorderBrush">
            <summary>
            Gets or sets the SymbolPaletteGroup border brush.
            </summary>
            <value>The symbol palette group border brush.</value>
            <remarks>
            Default value is Chocolate.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.SymbolPaletteGroupBorderBrush=Brushes.Pink;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPalette.SymbolPaletteGroupForeground">
            <summary>
            Gets or sets the SymbolPaletteGroup foreground.
            </summary>
            <value>The symbol palette group foreground.</value>
            <remarks>
            Default value is SaddleBrown.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.SymbolPaletteGroupForeground=Brushes.Gray;
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteFilter">
            <summary>
            Represents SymbolPaletteFilter class.
            </summary>
            <remarks>
            A Symbol Palette filter can be added to the <see cref="T:Syncfusion.UI.Xaml.Diagram.SymbolPalette"/> control, using the SymbolFilters property, so that only desired Symbol Palette groups get displayed. The SetFilterIndexes property is used to specify the index value of the filters for which the group is to be displayed.
            <para/>
            The filter names are specified integer values,  with the first filter index starting from 0. Based on the filter indexes specified for that particular group, the visibility of the group is controlled. So the group gets displayed only when any of the specified filter names are selected.
            </remarks>
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //SymbolPaletteFilter creates a filter for the palette groups.
            SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
            sfilter.Label = "Custom";
            Control.SymbolPalette.SymbolFilters.Add(sfilter);
            //SymbolPaletteGroup creates a group and assigns a specific filter index.
            SymbolPaletteGroup s = new SymbolPaletteGroup();
            s.Label = "Custom";
            SymbolPalette.SetFilterIndexes(s, new Int32Collection(new int[] { 0, 5 }));
            Control.SymbolPalette.SymbolGroups.Add(s);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteFilter"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteFilter.LabelProperty">
            <summary>
            Defines label of the filter.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteFilter.Label">
            <summary>
            Gets or sets the label of the filter.
            </summary>
            Type: <see cref="T:System.String"/>
            Text that names the SymbolPalette filter.
            <example>
            C#:
            <code language="C#">
            using Syncfusion.Windows.Diagram;
            namespace WpfApplication1
            {
            public partial class Window1 : Window
            {
            public DiagramControl Control;
            public DiagramModel Model;
            public DiagramView View;
            public Window1 ()
            {
            InitializeComponent ();
            Control = new DiagramControl ();
            Model = new DiagramModel ();
            View = new DiagramView ();
            Control.View = View;
            Control.Model = Model;
            View.Bounds = new Thickness(0, 0, 1000, 1000);
            //SymbolPaletteFilter creates a filter for the palette groups.
            SymbolPaletteFilter sfilter = new SymbolPaletteFilter();
            sfilter.Label = "Custom";
            Control.SymbolPalette.SymbolFilters.Add(sfilter);
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup">
            <summary>
            A control having a set of ColorGroupItems
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.DataSourceProperty">
            <summary>
            Identifies the DataSource dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.HeaderVisibilityProperty">
            <summary>
            Identifies the HeaderVisibility dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.PanelVisibilityproperty">
            <summary>
            Identifies the PanelVisibility dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.SymbolPaletteGroupBackgroundProperty">
            <summary>
            Identifies the <see cref="!:ThemeBackGround"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.SymbolPaletteGroupForegroundProperty">
            <summary>
            Identifies the <see cref="!:ThemeHeaderForeGround"/>  dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.#ctor">
            <summary>
            Initializes a new instance of the SymbolPaletteGroup class
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.HeadNameProperty">
            <summary>
            Identifies the HeaderName dependency property
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.IsHeaderChanged(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when IsHeaderChanged event is raised
            </summary>
            <param name="e">Property change details, such as old value and new value</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.IsHeaderChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Event raised when HeaderName is changed
            </summary>
            <param name="o">SymbolPaletteGroup object where the change occures on</param>
            <param name="e">Property change details, such as old value and new value</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.HeaderName">
            <summary>
            Gets or sets the value of the HeaderName dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.HeaderVisibility">
            <summary>
            Gets or sets the value of the HeaderVisibility dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.PanelVisibility">
            <summary>
            Gets or sets the value of the PanelVisibility dependency property.
            </summary>        
            <value>
            Type : Visibility
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.SymbolPaletteGroupBackground">
            <summary>
            Gets or sets the value of the ThemeBackGround dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteGroup.SymbolPaletteGroupForeground">
            <summary>
            Gets or sets the value of the ThemeForeGround dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem">
            <summary>
            A Class having a single color and its variants colors.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderMarginProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderMargin"/>  dependency property.
            </summary>
            
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.HeightProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderHeight"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemBorderThicknessProperty">
            <summary>
            Identifies the ItemBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemMouseOverBorderBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemCheckedMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemMouseOverBackgroundBrushProperty">
            <summary>
            Identifies the ItemMouseOverBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCornerRadiusProperty">
            <summary>
            Identifies the ItemCornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemMarginProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemMargin"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemPaddingProperty">
            <summary>
            Identifies the ItemPadding dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.PathDataProperty">
            <summary>
            Identifies the PathData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemNameProperty">
            <summary>
            Identifies the PathData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.WidthProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderWidth"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.PreviewBrushProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.PreviewBrush"/>  dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.PreviewSizeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.PreviewSize"/>  dependency property.
            </summary>     
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.#ctor">
            <summary>
            Creates the instance of SymbolPaletteItem control
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.GetNumericListSeparator(System.IFormatProvider)">
            <summary>
            Gets the numeric list separator
            </summary>
            <param name="provider"></param>
            <returns>char</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.GetSymbolPaletteGroupFromChildren(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Method to find the parent of given element
            </summary>
            <param name="element">Element for which parent is to be found</param>
            <returns>Parent of type SymbolPaletteGroup</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.GoToState(System.Boolean,System.String[])">
            <summary>
            Called when changes in visual state of border takes place
            </summary>
            <param name="useTransitions">Indicate whether to apply transition or not</param>
            <param name="stateNames">Contain the state name</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.IsPresentationFrameworkCollection(System.Type)">
            <summary>
            Determines whether [is presentation framework collection] [the specified type].
            </summary>
            <param name="type">The type of the object.</param>
            <returns>
            <c>true</c> if [is presentation framework collection] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.OnApplyTemplate">
            <summary>
            Applies the Template for the control
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.OnPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Event raised when mouse is left from the item.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Event raised when mouse left buttom is down on the item.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.OnPointerMoved(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Event raised when mouse is moved on the item.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.UpdateVisualState(System.Boolean)">
            <summary>
            Method is used to update the state of border
            </summary>
            <param name="useTransitions">Update the state</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.PreviewBrush">
            <summary>
            Gets or sets the value of the PreviewBrush dependency property.
            </summary> 
            
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderHeight">
            <summary>
            Gets or sets the value of the BorderHeight dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderMargin">
            <summary>
            Gets or sets the value of the BorderMargin dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderThick">
            <summary>
            Gets or sets the value of the BorderThickness dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.BorderWidth">
            <summary>
            Gets or sets the value of the BorderWidth dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedBorderBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBorderBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemMouseOverBorderBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedBackgroundBrush">
            <summary>
            Gets or sets the border brush when the item is checked.
            </summary>
            <value>The item checked border brush.</value>
            <remarks>
            Default value is Red.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedBorderBrush=Brushes.Blue;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemCheckedMouseOverBackgroundBrush">
            <summary>
            Gets or sets border brush when the mouse is over the checked item.
            </summary>
            <value>The item checked mouse over border brush.</value>
            <remarks>
            Default value is Green.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemCheckedMouseOverBorderBrush=Brushes.Violet;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemMouseOverBackgroundBrush">
            <summary>
            Gets or sets the border brush when the mouse is over the checked item..
            </summary>
            <value>The item mouse over border brush.</value>
            <remarks>
            Default value is Orange.
            </remarks>
            <example>
            C#:
            <code language="C#">
            DiagramControl diagramControl=new DiagramControl();
            diagramControl.SymbolPalette.ItemMouseOverBorderBrush=Brushes.Beige;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemMargin">
            <summary>
            Gets or sets the value of the ItemMargin dependency property
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.PathData">
            <summary>
            Gets or sets the value of the PathData dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.SymbolPaletteItem.ItemName">
            <summary>
            Gets or sets the value of the PathData dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager">
            <summary>
            Represents the Diagram Command manager.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.i">
            <summary>
            Used to store the group count.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnDeleteCommand(System.Object)">
            <summary>
            DeleteCommand
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnMoveUpCommand(System.Object)">
            <summary>
            Invoked when the MoveUp Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnMoveDownCommand(System.Object)">
            <summary>
            Invoked when the MoveDown Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnMoveLeftCommand(System.Object)">
            <summary>
            Invoked when the MoveLeft Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnMoveRightCommand(System.Object)">
            <summary>
            Invoked when the MoveRight Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.SameSizeCommand(System.Object)">
            <summary>
            Invoked when the SameSize Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.SameWidthCommand(System.Object)">
            <summary>
            Invoked when the SameWidth Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.SameHeightCommand(System.Object)">
            <summary>
            Invoked when the SameHeight Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnSpaceDownCommand(System.Object)">
            <summary>
            Invoked when the SpaceDown Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnSpaceAcrossCommand(System.Object)">
            <summary>
            Invoked when the SpaceAcross Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnAlignLeftCommand(System.Object)">
            <summary>
            Invoked when the AlignLeft Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnAlignCenterCommand(System.Object)">
            <summary>
            Invoked when the AlignCenter Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnAlignRightCommand(System.Object)">
            <summary>
            Invoked when the AlignRight Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnAlignTopCommand(System.Object)">
            <summary>
            Invoked when the AlignTop Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnAlignMiddleCommand(System.Object)">
            <summary>
            Invoked when the AlignMiddle Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnAlignBottomCommand(System.Object)">
            <summary>
            Invoked when the AlignBottom Command is executed.
            </summary>
            <param name="sender">The DiagramView.</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnBringToFrontCommand(System.Object)">
            <summary>
            Invoked when the BringToFront Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>      
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnSendToBackCommand(System.Object)">
            <summary>
            Invoked when the SendToBack Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>      
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnMoveForwardCommand(System.Object)">
            <summary>
            Invoked when the MoveForward Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>      
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.OnSendBackwardCommand(System.Object)">
            <summary>
            Invoked when the SendBackward Command is executed.
            </summary>
            <param name="sender">object, the change occurs on.</param>      
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.CompareIndex(Windows.UI.Xaml.UIElement,Syncfusion.UI.Xaml.Diagram.DiagramView,System.Collections.Generic.List{Windows.UI.Xaml.UIElement})">
            <summary>
            Compares the index.
            </summary>
            <param name="element">The element.</param>
            <param name="view">The view instance.</param>
            <param name="selectionordered">The ordered list.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramCommandManager.CompareBackwardIndex(Windows.UI.Xaml.UIElement,Syncfusion.UI.Xaml.Diagram.DiagramView,System.Collections.Generic.List{Windows.UI.Xaml.UIElement})">
            <summary>
            Compares the index of the backward.
            </summary>
            <param name="element">The element.</param>
            <param name="view">The view instance.</param>
            <param name="selectionordered">The ordered list.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DiagramView">
             <summary>
             Represents the Diagram View.
             <para>The view obtains data from the model and presents them to the user. It typically manages the overall layout of the data obtained from model.
             Apart from presenting the data, view also handles navigation between the items, and some aspects of item selection. 
             The views also implements basic user interface features, such as rulers, and drag and drop. 
             It handles the events, which occur on the objects, obtained from the model. 
             Command mechanism is also implemented by the view.
             </para>
             </summary>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> in XAML.
             <code language="XAML">
             &lt;Window x:Class="RulersAndUnits.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                    Background="LightGray"  
                                                    Bounds="0,0,12,12"  
                                                    ShowHorizontalGridLine="False" 
                                                    ShowVerticalGridLine="False"
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   View = new DiagramView ();
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                }
                }
                }
             </code>
             </example>
             <seealso cref="!:HorizontalRuler"/>
             <seealso cref="!:VerticalRuler"/>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.DiagramPage"/>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.IView">
            <summary>
            Interface to the view.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.IView.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.HeadPort">
            <summary>
            Used to store the ConnectionHeadPort of the LineConnector[DrawingTool]
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.TailPort">
            <summary>
            Used to store the ConnectionTailPort of the LineConnector[DrawingTool]
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.DrawingToolStartPoint">
            <summary>
            Used to store the StartPoint of LineConnector[Point to Point Connection]
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.DrawingToolEndPoint">
            <summary>
            Used to store the EndPoint of LineConnector[Point to Point Connection]
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.CurrentZoomProperty">
            <summary>
            Identifies the CurrentZoom property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.IsPageEditableProperty">
            <summary>
            Identifies the Selected item.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.IsCutEnabledProperty">
            <summary>
            Identifies the Cut command.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.IsCopyEnabledProperty">
            <summary>
            Identifies the Copy command.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.IsPasteEnabledProperty">
            <summary>
            Identifies the Paste command.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.SelectedItemProperty">
            <summary>
            Identifies the Selected item.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.PageProperty">
            <summary>
            Identifies the Page property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.ZoomFactorProperty">
            <summary>
            Identifies the ZoomFactor property.This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.oldselectionlist">
            <summary>
            Used to store the values in the selection list.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.PortVisibilityProperty">
            <summary>
            Identifies the PortVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.IsPanEnabledProperty">
            <summary>
            Identifies the IsPanEnabled dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.GetHorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the HorizontalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.GetVerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the VerticalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.dc">
            <summary>
             Used to store diagram Control instance.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.dragged">
            <summary>
            Checks if <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> was dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.dview">
            <summary>
            Used to store the view.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.intedges">
            <summary>
            Used to store internal edges collection.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.isdrag">
            <summary>
            Used to store the node drag information.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.isdragged">
            <summary>
            Used to check if node is dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.layout">
            <summary>
            Checks if automatic layout is used.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.linedel">
            <summary>
            Checks if line was deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.mgroups">
            <summary>
            Used to store the groups in the page.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.mbounds">
            <summary>
            Used to store the bounds
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.mmodel">
            <summary>
            Used to store the model
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.mOrigin">
            <summary>
            Used to store the origin point
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.nodedel">
            <summary>
            Checks if node was deleted.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.otherevents">
            <summary>
             Used to store the other event's state
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.pixelvalue">
            <summary>
            Used to store pixel interval
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.redo">
            <summary>
            Checks if Redo command was executed.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.resized">
            <summary>
            Checks if <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> was resized.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.scrollview">
            <summary>
            Used to store the scrollviewer instance
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.showPage">
            <summary>
            Used to store ShowPage property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.undo">
            <summary>
            Checks if Undo command was executed.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.zoomTransform">
            <summary>
            Used to store  the scale transform
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DiagramView.IsLoaded">
            <summary>
            Used to store whether the View Loaded or not.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnLineMoved(System.Object,Syncfusion.UI.Xaml.Diagram.LineNudgeEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeMoved(System.Object,Syncfusion.UI.Xaml.Diagram.NodeNudgeEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeSelected(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeUnSelected(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeDeleted(System.Object,Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeDeleting(System.Object,Syncfusion.UI.Xaml.Diagram.NodeDeleteRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectionDeleted(System.Object,Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectionDeleting(System.Object,Syncfusion.UI.Xaml.Diagram.ConnectionDeleteRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnPreviewNodeDrop(System.Object,Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnPreviewConnectorDrop(System.Object,Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeDragStart(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeDragEnd(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeClick(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeDoubleClick(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectorDoubleClick(System.Object,Syncfusion.UI.Xaml.Diagram.ConnRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeDropped(System.Object,Syncfusion.UI.Xaml.Diagram.NodeDroppedRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectorDrop(System.Object,Syncfusion.UI.Xaml.Diagram.ConnectorDroppedRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeResized(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeResizing(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeRotationChanged(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeRotationChanging(System.Object,Syncfusion.UI.Xaml.Diagram.NodeRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectorDragStart(System.Object,Syncfusion.UI.Xaml.Diagram.ConnDragRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectorDragEnd(System.Object,Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnHeadNodeChanged(System.Object,Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnTailNodeChanged(System.Object,Syncfusion.UI.Xaml.Diagram.NodeChangedRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeLabelChanged(System.Object,Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnNodeStartLabelEdit(System.Object,Syncfusion.UI.Xaml.Diagram.LabelRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectorLabelChanged(System.Object,Syncfusion.UI.Xaml.Diagram.LabelConnRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnConnectorStartLabelEdit(System.Object,Syncfusion.UI.Xaml.Diagram.LabelEditConnRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnBeforeConnectionCreate(System.Object,Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnAfterConnectionCreate(System.Object,Syncfusion.UI.Xaml.Diagram.ConnDragEndRoutedEventArgs)">
            <summary>
            Calls when Series Visiblity Change by the Legend Checkbox
            </summary>
            <param name="obj">Sender Object.  It may be either ChartSeries or Segment</param>
            <param name="e">Event Argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.DiagramView_Loaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Invoked when the Diagram View is loaded.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.DiagraView_Mouse(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Provides class handling for the PreviewMouseWheel routed event that occurs when the mouse
            wheel  is moved and the mouse pointer is over this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
            
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.GetDefaultPosition(System.Double)">
            <summary>
            Gets the position when the interval is default.
            </summary>
            <param name="x">The x value.</param>
            <returns>The position</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.GetPosition">
            <summary>
            Gets the position in the current unit interval.
            </summary>
            <returns>The position </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.GetRounding">
            <summary>
            Gets the rounding value for the measurement units.
            </summary>
            <returns>The rounding value</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.GetVerticalPosition">
            <summary>
            Gets the vertical ruler position
            </summary>
            <returns>The vertical ruler position</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.MoveDown(Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Invoked when MoveUp Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.MoveLeft(Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Invoked when MoveUp Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.MoveRight(Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Invoked when MoveRight Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.MoveUp(Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Invoked when MoveUp Command is Executed.
            </summary>
            <param name="dview">The DiagramView instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call
            <see cref="!:System.Windows.FrameworkElement.ApplyTemplate"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnUndoRedoEnabledChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when UndoRedoEnabled Property changed
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value. <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnCurrentZoomChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCurrentZoomChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnGridHOffsetChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnGridHOffsetChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnGridVOffsetChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnGridVOffsetChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnHorizontalLineStyleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnHorizontalLineStyleChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnHorizontalScrollBarVisibilityChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [horizontal scroll bar visibility changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnIsPageEditableChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [is page editable changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnPropertyChanged(System.String)">
            <summary>
            Raised when the appropriate property changes.
            </summary>
            <param name="name">The property name</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnShowVRulerChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnShowVRulerChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnVerticalLineStyleChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnVerticalLineStyleChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnVerticalScrollBarVisibilityChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [vertical scroll bar visibility changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnViewGridOriginChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [view grid origin changed].
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The <see cref="!:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.OnZoomFactorChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnZoomFactorChanged method of the instance, notifies of the dependency property value changes.
            </summary>
            <param name="d">Dependency object, the change occurs on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.Reset(Syncfusion.UI.Xaml.Diagram.DiagramView)">
            <summary>
            Invoked when Reset Command is Executed.
            </summary>
            <param name="dview">The diagramview instance.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.DiagramView.ClearUndoRedoStack">
            <summary>
            Clears the undo redo stack.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.PropertyChanged">
            <summary>
            Calls property changed event handler.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.LineMoved">
            <summary>
            Occurs when [line moved].
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeMoved">
            <summary>
            Occurs when [node moved].
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeSelected">
            <summary>
            NodeSelected Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeUnSelected">
            <summary>
            NodeUnSelected Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeDeleted">
            <summary>
            NodeDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeDeleting">
            <summary>
            NodeDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorDeleted">
            <summary>
            ConnectorDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorDeleting">
            <summary>
            ConnectorDeleted Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectionDeleteEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.PreviewNodeDrop">
            <summary>
            PreviewNodeDrop Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.PreviewNodeDropEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.PreviewConnectorDrop">
            <summary>
            PreviewConnectorDrop Event Handler
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.PreviewConnectorDropEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeDragStart">
            <summary>
             NodeDragStart Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeDragEnd">
            <summary>
             NodeDragStart Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeClick">
            <summary>
             NodeClick Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeDoubleClick">
            <summary>
             NodeDoubleClick Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorDoubleClick">
            <summary>
             ConnectorDoubleClick Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeDrop">
            <summary>
             NodeDropped Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeDroppedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorDrop">
            <summary>
             ConnectorDropped Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnectorDroppedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeResized">
            <summary>
             NodeResized Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeResizing">
            <summary>
             NodeResizing Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeRotationChanged">
            <summary>
             NodeRotationChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeRotationChanging">
            <summary>
             NodeRotationChanging Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorDragStart">
            <summary>
             ConnectorDragStart Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorDragEnd">
            <summary>
             ConnectorDragEnd Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.ConnDragEndChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.HeadNodeChanged">
            <summary>
             HeadNodeChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.TailNodeChanged">
            <summary>
             TailNodeChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeLabelChanged">
            <summary>
             NodeLabelChanged Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.NodeStartLabelEdit">
            <summary>
             LabelChangedEventHandler Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorLabelChanged">
            <summary>
             LabelChangedEventHandler Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelConnChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.ConnectorStartLabelEdit">
            <summary>
             ConnectorStartLabelEdit Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.LabelEditConnChangedEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.BeforeConnectionCreate">
            <summary>
             BeforeConnectionCreate Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionEventHandler"/>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Diagram.DiagramView.AfterConnectionCreate">
            <summary>
             AfterConnectionCreate Event Handler .
            </summary>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.BeforeCreateConnectionEventHandler"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            Type: <see cref="!:System.Drawing.Rectangle"/>
            Bounds value.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.LayoutBounds">
            <summary>
            Gets or sets the LayoutBounds.
            </summary>
            <value>
            Type: <see cref="!:System.Drawing.Rectangle"/>
            LayoutBounds value.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.IsPageEditable">
             <summary>
             Gets or sets a value indicating whether this instance is page editable.
             </summary>
             <value>
             <c>true</c> if this instance is page editable; otherwise, <c>false</c>.
             </value>
             <summary>
             Gets or sets a value indicating whether [enable connection].
             </summary>
             <value><c>true</c> if [enable connection]; otherwise, <c>false</c>.</value>
             <remarks>
             This property is generally placed in the click event handler for setting the <see cref="T:Syncfusion.Windows.Diagram.LineConnector.ConnectorType"/>.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="RulersAndUnits.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView IsPageEditable="True"
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   View = new DiagramView ();
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.IModel"/>
            IModel instance.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            Type: <see cref="T:Windows.UI.Xaml.Controls.Panel"/>
            Panel instance.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.CurrentZoom">
            <summary>
            Gets or sets the current zoom.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.InternalEdges">
            <summary>
            Gets the internal edges.
            </summary>
            <value>The internal edges.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.InternalGroups">
            <summary>
            Gets the internal groups collection.
            </summary>
            <value>The internal groups collection.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.IsDragged">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> is dragged.
            </summary>
            <value>
            <c>true</c> if <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/>  is dragged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.IsDragging">
            <summary>
            Gets or sets a value indicating whether node is dragged.
            </summary>
            <value><c>true</c> if is dragged; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.IsLayout">
            <summary>
            Gets or sets a value indicating whether automatic layout is used.
            </summary>
            <value><c>true</c> if automatic layout is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Islinedeleted">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.LineConnector"/> is deleted.
            </summary>
            <value><c>true</c> if is line deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Isnodedeleted">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> is deleted.
            </summary>
            <value><c>true</c> if node is deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.IsOtherEvent">
            <summary>
            Gets or sets a value indicating whether this instance is other event.
            </summary>
            <value>
            <c>true</c> if this instance is other event; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.IsPanEnabled">
             <summary>
             Gets or sets a value indicating whether this instance is pan enabled.
             </summary>
             <value>
             Type: <see cref="T:System.Boolean"/>
             True, if panning is enabled, false otherwise.
             </value>
             <summary>
             Gets or sets a value indicating whether [enable connection].
             </summary>
             <value><c>true</c> if [enable connection]; otherwise, <c>false</c>.</value>
             <remarks>
             This property is generally placed in the click event handler for setting the <see cref="T:Syncfusion.Windows.Diagram.LineConnector.ConnectorType"/>.
             </remarks>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> in XAML.
             <code language="XAML">
             &lt;Window x:Class="RulersAndUnits.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView IsPanEnabled="False"
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   View = new DiagramView ();
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPanEnabled=false;
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Ispositionchanged">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> position is changed.
            </summary>
            <value><c>true</c> if position is changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.IsResized">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> is resized.
            </summary>
            <value>
            <c>true</c> if <see cref="T:Syncfusion.UI.Xaml.Diagram.Node"/> is resized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.PortVisibility">
             <summary>
             Gets or sets the port visibility.
             </summary>
             <value>The port visibility.</value>
             <remarks>
             Setting PortVisibility from DiagramView applies to all the nodes in the page. However if any node has specifically set PortVisibility, then the node's PortVisibility property will be taken into account only for that node. So even if DiagramView's PortVisibility is set to false, if Node's <see cref="T:Syncfusion.Windows.Diagram.Node.PortVisibility"/> is set to true then the ports will be displayed for that node.
             </remarks>
             <example>
             <code language="XAML">
             &lt;Window x:Class="RulersAndUnits.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView  IsPageEditable="True" 
                                                    Background="LightGray"  
                                                    Bounds="0,0,12,12" 
                                                    PortVisibility="False"
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <code language="C#">
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   View = new DiagramView ();
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.PortVisibility=false;
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Redone">
            <summary>
            Gets or sets a value indicating whether the Redo command is executed.
            </summary>
            <value><c>true</c> if redone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Scrollviewer">
            <summary>
            Gets or sets the scrollviewer.
            </summary>
            <value>The scrollviewer.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.SelectionList">
             <summary>
             Gets the selection list.
             </summary>
             <value>
             Type: <see cref="T:Syncfusion.UI.Xaml.Diagram.NodeCollection"/>
             NodeCollection items.
             </value>
             <example>
             <code language="C#">
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   View = new DiagramView ();
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                   View.ShowVerticalRulers=false;
                   Node n = new Node(Guid.NewGuid(), "Start");
                    n.Shape = Shapes.FlowChart_Start;
                    n.IsLabelEditable = true;
                    n.Label = "Start";
                    n.Level = 1;
                    n.OffsetX = 150;
                    n.OffsetY = 25;
                    n.Width = 150;
                    n.Height = 75;
                    n.ToolTip="Start Node";
                    Model.Nodes.Add(n);
                    View.SelectionList.Add(n);
                }
                }
                }
             </code>
             </example>
             <seealso cref="T:Syncfusion.UI.Xaml.Diagram.NodeCollection"/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.Undone">
            <summary>
            Gets or sets a value indicating whether the Undo command is executed.
            </summary>
            <value><c>true</c> if undone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.DiagramView.ZoomFactor">
             <summary>
             Gets or sets the ZoomFactor .
             </summary>
             <value>
             Type: <see cref="T:System.Double"/>
             Zoom Factor in pixels.
             </value>
             <remarks>
             Default value is 0.2d .
             </remarks>
             <example>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> in XAML.
             <code language="XAML">
             &lt;Window x:Class="RulersAndUnits.Window1"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             Title="Rulers And Units Demo"  WindowState="Maximized" Name="mainwindow" 
              xmlns:local="clr-namespace:Sample" FontWeight="Bold"
              Icon="Images/App.ico" &gt;
               &lt;syncfusion:DiagramControl Grid.Column="1" Name="diagramControl" 
                                            IsSymbolPaletteEnabled="True" 
                                            Background="WhiteSmoke"&gt;
                       &lt;syncfusion:DiagramControl.View&gt;
                          &lt;syncfusion:DiagramView ZoomFactor="1"
                                                    Bounds="0,0,12,12"  
                                                    Name="diagramView"  &gt;
                         &lt;syncfusion:HorizontalRuler Name="horizontalRuler" /&gt;
                      &lt;/syncfusion:DiagramView.HorizontalRuler&gt;
                       &lt;syncfusion:DiagramView.VerticalRuler&gt;
                           &lt;syncfusion:VerticalRuler    Name="verticalRuler" /&gt;
                       &lt;/syncfusion:DiagramView.VerticalRuler &gt;
                   &lt;/syncfusion:DiagramView&gt;
                &lt;/syncfusion:DiagramControl.View&gt;
             &lt;/syncfusion:DiagramControl&gt;
             &lt;/Window&gt;
             </code>
             <para/>The following example shows how to create a <see cref="T:Syncfusion.UI.Xaml.Diagram.DiagramView"/> in C#.
             <code language="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             using System.Windows;
             using System.Windows.Controls;
             using System.Windows.Data;
             using System.Windows.Documents;
             using System.Windows.Input;
             using System.Windows.Media;
             using System.Windows.Media.Imaging;
             using System.Windows.Navigation;
             using System.Windows.Shapes;
             using System.ComponentModel;
             using Syncfusion.Core;
             using Syncfusion.Windows.Diagram;
            namespace SilverlightApplication1
             {
             public partial class MainPage : UserControl
             {
                public DiagramControl Control;
                public DiagramModel Model;
                public DiagramView View;
                public MainPage()
                {
                   InitializeComponent ();
                   Control = new DiagramControl ();
                   View = new DiagramView ();
                   Control.View = View;
                   HorizontalRuler hruler = new HorizontalRuler();
                   View.HorizontalRuler = hruler;
                   View.ShowHorizontalGridLine = false;
                   View.ShowVerticalGridLine = false;
                   VerticalRuler vruler = new VerticalRuler();
                   View.VerticalRuler = vruler;
                   View.Bounds = new Thickness (0, 0, 1000, 1000);
                   View.IsPageEditable = true;
                   View.ZoomFactor=1;
                }
                }
                }
             </code>
             </example>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.TransformRootName">
            <summary>
            Name of the TransformRoot template part.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.PresenterName">
            <summary>
            Name of the Presenter template part.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the LayoutTransform DependencyProperty.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer._transformRoot">
            <summary>
            Root element for performing transformations.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer._contentPresenter">
            <summary>
            ContentPresenter element for displaying the content.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformer class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the LayoutTransformer control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.LayoutTransformChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">Source of the change.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.ProcessTransform(Windows.UI.Xaml.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.GetTransformMatrix(Windows.UI.Xaml.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.ComputeLargestTransformedSize(Windows.Foundation.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>       
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.IsSizeSmaller(Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.RoundMatrix(Windows.UI.Xaml.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.RectTransform(Windows.Foundation.Rect,Windows.UI.Xaml.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.MatrixMultiply(Windows.UI.Xaml.Media.Matrix,Windows.UI.Xaml.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.MatrixHasInverse(Windows.UI.Xaml.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer 
            control content.
            </summary>
            <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Diagram.LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PositionAlignment">
            <summary>
            Specifies the Position of the LineAlignment
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.DecoratorShape">
            <summary>
            Specifies the decorator shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DecoratorShape.None">
            <summary>
            None shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DecoratorShape.Arrow">
            <summary>
            Arrow shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DecoratorShape.Diamond">
            <summary>
            Diamond shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.DecoratorShape.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PortShapes">
            <summary>
            Specifies the Port shape.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PortShapes.None">
            <summary>
            None shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PortShapes.Arrow">
            <summary>
            Arrow shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PortShapes.Diamond">
            <summary>
            Diamond shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PortShapes.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LayoutType">
            <summary>
            Specifies the layout types.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutType.None">
            <summary>
            None type.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutType.DirectedTreeLayout">
            <summary>
            Directed tree layout.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutType.HierarchicalTreeLayout">
            <summary>
            Hierarchical tree layout.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutType.TableLayout">
            <summary>
            Table layout.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutType.RadialTreeLayout">
            <summary>
            Radial tree layout.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutType.BowtieLayout">
            <summary>
            Bowtie Layout
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.TreeOrientation">
            <summary>
            Specifies the tree orientation .
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TreeOrientation.LeftRight">
            <summary>
            Left to right
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TreeOrientation.RightLeft">
            <summary>
            Right to left
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TreeOrientation.TopBottom">
            <summary>
            Top to Bottom
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.TreeOrientation.BottomTop">
            <summary>
            Bottom to top
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ExpandMode">
            <summary>
            Specifies the Expand Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ExpandMode.Horizontal">
            <summary>
            Horizontal expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ExpandMode.Vertical">
            <summary>
            Vertical expansion.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.Shapes">
            <summary>
            Specifies the shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Rectangle">
            <summary>
            Rectangle shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Star">
            <summary>
            Star shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Hexagon">
            <summary>
            Hexagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Octagon">
            <summary>
            Octagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Pentagon">
            <summary>
            Pentagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Heptagon">
            <summary>
            Heptagon shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Triangle">
            <summary>
            Triangle shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Ellipse">
            <summary>
            Ellipse shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.Plus">
            <summary>
            Plus shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.RoundedRectangle">
            <summary>
            Rounded Rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.RoundedSquare">
            <summary>
            Rounded Square
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.RightTriangle">
            <summary>
            Right Triangle
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.ThreeDBox">
            <summary>
            ThreeDBox shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Process">
            <summary>
            FlowChart Process shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Start">
            <summary>
            FlowChart Start shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Decision">
            <summary>
            FlowChart Decision shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Predefined">
            <summary>
            FlowChart_Predefined shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_StoredData">
            <summary>
            FlowChart_StoredData shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Document">
            <summary>
            FlowChart_Document shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Data">
            <summary>
            FlowChart_Data shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_InternalStorage">
            <summary>
            FlowChart_InternalStorage shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_PaperTape">
            <summary>
            FlowChart_PaperTape shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_SequentialData">
            <summary>
            FlowChart_SequentialData shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_DirectData">
            <summary>
            FlowChart_DirectData shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_ManualInput">
            <summary>
            FlowChart_ManualInput shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Card">
            <summary>
            FlowChart_Card shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Delay">
            <summary>
            FlowChart_Delay shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Terminator">
            <summary>
            FlowChart_Terminator shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Display">
            <summary>
            FlowChart_Display shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_LoopLimit">
            <summary>
            FlowChart_LoopLimit shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Preparation">
            <summary>
            FlowChart_Preparation shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_ManualOperation">
            <summary>
            FlowChart_ManualOperation shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_OffPageReference">
            <summary>
            FlowChart_OffPageReference shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.Shapes.FlowChart_Star">
            <summary>
            FlowChart_Star shape
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LayoutHorizontalAlignment">
            <summary>
            Specifies the LayoutHorizontalAlignment Type.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutHorizontalAlignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutHorizontalAlignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutHorizontalAlignment.Center">
            <summary>
             Center
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.LayoutVerticalAlignment">
            <summary>
            Specifies the LayoutVerticalAlignment Type.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutVerticalAlignment.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutVerticalAlignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LayoutVerticalAlignment.Center">
            <summary>
             Center
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.MeasureUnits">
            <summary>
            Specifies the units.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Pixel">
            <summary>
            Pixel unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Point">
            <summary>
            Points unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Document">
            <summary>
            Document unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Display">
            <summary>
            Display unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.SixteenthInch">
            ENGLISH
            <summary>
            Sixteenth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.EighthInch">
            <summary>
            Eighth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.QuarterInch">
            <summary>
            Quarter Inches
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.HalfInch">
            <summary>
            Half Inches
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Inch">
            <summary>
            Inches unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Foot">
            <summary>
            Feet measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Yard">
            <summary>
            Yards measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Mile">
            <summary>
            Miles measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Millimeter">
            METRIC
            <summary>
            Millimeters unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Centimeter">
            <summary>
            Centimeters unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Meter">
            <summary>
            Meters measurement unit
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.MeasureUnits.Kilometer">
            <summary>
            Kilometers measurement unit
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.ConnectorType">
            <summary>
            Specifies the connector types.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectorType.Orthogonal">
            <summary>
            Orthogonal line
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectorType.Bezier">
            <summary>
            Bezier line
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectorType.Straight">
            <summary>
            Straight line
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.ConnectorType.Arc">
            <summary>
            Arc Line
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelOrientation.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelOrientation.Horizontal">
            <summary>
            Horizonatl Orientation
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.LabelOrientation.Vertical">
            <summary>
            Vertical Orientation.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieSubTreePlacement.Left">
            <summary>
            Left
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.BowtieSubTreePlacement.Right">
            <summary>
            Right
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.CustomLabelPositions.Auto">
            <summary>
            Default position
            </summary>        
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.CustomLabelPositions.Custom">
            <summary>
            Customized Position
            </summary>        
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.CustomLabelPositions.Drag">
            <summary>
            Dragging Position
            </summary>        
        </member>
        <member name="T:Syncfusion.UI.Xaml.Diagram.PortVisibility">
            <summary>
            Options for port Visibility
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PortVisibility.AlwaysVisible">
            <summary>
            Port will be visible always
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PortVisibility.AlwaysHidden">
            <summary>
            Port will not be visible
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Diagram.PortVisibility.MouseOverNode">
            <summary>
            Visible when mouse is over the Node.
            </summary>
        </member>
    </members>
</doc>
