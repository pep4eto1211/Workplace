<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfGridBase.WinRT</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo">
            <summary>
               Defines a range of cells in the grid. Possible range types are: Row(s), Column(s), Cell(s), Table or Empty.
               GridRangeInfo is immutable.
            </summary>
            
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Empty">
            <summary>
              <para>Represents a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with its properties left uninitialized and range type set to GridRangeInfoType.Empty.</para>
            </summary>
            <remarks>
              <para>A range is defined by its coordinates and range type. If uninitialized, the range type is GridRangeInfoType.Empty</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.#ctor">
            <overload>
              <para>Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object.</para>
            </overload>
            <summary>
              <para>Initializes an empty <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object.</para>
            </summary>
            <remarks>
              <para>This constructor initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object with empty range type.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object.
            </summary>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.CopyAllMembers(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.FromTlhw(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object with the specified bounds.
            </summary>
            <param name="top">
              The row index of the upper-left corner of the cell range.
            </param>
            <param name="left">
              The column index of the upper-left corner of the cell range.
            </param>
            <param name="height">
              Number of rows to span. 
            </param>
            <param name="width">
              Number of columns to span.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Cell(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the specified row and column index.
            </summary>
            <param name="row">
              The row index.
            </param>
            <param name="col">
              The column index.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Cells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object with the specified bounds.
            </summary>
            <param name="top">
              The row index of the upper-left corner of the cell range.
            </param>
            <param name="left">
              The column index of the upper-left corner of the cell range.
            </param>
            <param name="bottom">
              The row index of the bottom-right corner of the cell range.
            </param>
            <param name="right">
              The column index of the bottom-right corner of the cell range.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Row(System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the specified row index.
            </summary>
            <param name="rowIndex">
              The row index of the cell range.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Rows(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the specified rows.
            </summary>
            <param name="top">
              The top row index of the cell range.
            </param>
            <param name="bottom">
              The botom row index of the cell range.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Col(System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the specified column.
            </summary>
            <param name="colIndex">
              The column index of the cell range.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Cols(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the specified columns.
            </summary>
            <param name="left">
              The left column index of the cell range.
            </param>
            <param name="right">
              The right column index of the cell range.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.EmptyRange">
            <summary>
            Returns <see cref="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Empty"/> that is an empty range.
            </summary>
            <returns>An empty range object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Table">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the whole table.
            </summary>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Auto(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the specified row and column.
            </summary>
            <param name="rowIndex">
            The row index. -1 to create a range of columns or whole table.
            </param>
            <param name="colIndex">
            The column index. -1 to create a range of rows or whole table.
            </param>
            <remarks>
            If both row and column index are less than zero, a table will be created.
            If row index is less than zero and column index greater or equal to zero, a column range will be created.
            If row index is greater or equal to zero and column index less than zero, a row range will be created.
            Otherwise a cell range is created.
            </remarks>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Auto(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object for the specified rows and columns.
            </summary>
            <param name="top">
            The row index. -1 to create a range of columns or whole table.
            </param>
            <param name="left">
            The column index. -1 to create a range of rows or whole table.
            </param>
            <param name="bottom">
            Bottom row index. 
            </param>
            <param name="right">
            Right column index. 
            </param>
            <remarks>
            If both row and column index are less than zero, a table will be created.
            If row index is less than zero and column index greater or equal to zero, a column range will be created.
            If row index is greater or equal to zero and column index less than zero, a row range will be created.
            Otherwise a cell range is created.
            </remarks>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.GetFirstCell(System.Int32@,System.Int32@)">
            <summary>
            Enumerate through all cells in range object. 
            </summary>
            <param name="top">
            The row index of the upper-left corner of the cell range.
            </param>
            <param name="left">
            The column index of the upper-left corner of the cell range.
            </param>
            <returns>This method returns the first cell in the range.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.GetNextCell(System.Int32@,System.Int32@)">
            <overload>
            This method returns the adjacent cell in the range for the given row and column index.
            </overload>
            <summary>
            This method returns the adjacent cell in the range for the given row and column index.
            </summary>
            <param name="nRow">
              The row index.
            </param>
            <param name="nCol">
              The column index.
            </param>
            <returns>
            <see langword="true"/> if an adjacent cell in this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object coud be found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.GetNextCell(System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            This method returns the adjacent cell in the range for the given row and column index.
            </summary>
            <param name="nRow">
              The row index.
            </param>
            <param name="nCol">
              The column index.
            </param>
            <param name="bSortByRow">
            <see langword="true"/> if the range should be traversed by row; <see langword="false"/> if the range should be traversed by column.
            </param>
            <returns>
            <see langword="true"/> if an adjacent cell in this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object could be found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.ExpandRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert column and row ranges into cell ranges with the specified bounds.
            (Could also be done through IntersectRange ... if nFirstRow &gt;= nFirstCol &gt;= 0). 
            </summary>
            /<remarks>
            Column ranges will be converted to cell ranges using nFirstRow and nRowCount. 
            Row ranges will be converted to cell ranges using nFirstCol and nColCount. 
            Column ranges will be converted to cell ranges using all input parameters. 
            </remarks>
            <param name="nFirstRow">Row index for the first non-label cell in grid area.</param>
            <param name="nFirstCol">Column index for the first non-label cell in grid area.</param>
            <param name="nRowCount">Last row in the grid.</param>
            <param name="nColCount">Last column in the grid</param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.OffsetRange(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this range by the specified amount.
            </summary>
            <param name="rowOffset">Amount of rows to offset the location.</param>
            <param name="colOffset">Amount of columns to offset the location.</param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IntersectsWith(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
              <para>Determines if this range intersects with <paramref name="range"/>.</para>
            </summary>
            <param name="range">
              The range to test.
            </param>
            <example>
              <para>The following example creates two cell ranges and tests whether they intersect:</para>
              <code lang="C#">
              GridRangeInfo firstRange = new GridRangeInfo(1, 1, 100, 100);
              ...
              </code>
            </example>
            <returns>
              <para><see langword="true"/> if there is any intersection.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Contains(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            <para>Determines if this range fully contains all of <paramref name="range"/>.</para>
            </summary>
            <param name="range">
              The range to test.
            </param>
            <returns>
              <para><see langword="true"/> if range is a subset of this range.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IntersectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
              <para>Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with the intersection of itself and the specified <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </summary>
            <overload>
              <para>Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with the intersection of itself and the specified <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </overload>
            <param name="range">
              The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with which to intersect.
            </param>
            <example>
              <para>The following example creates two <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> objects and creates a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with their intersection:</para>
              <code lang="C#">GridRangeInfo firstRange = new GridRangeInfo(0, 0, 100, 100);
              </code>
            </example>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IntersectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
              <para>Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with the intersection of two <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> parameters.</para>
            </summary>
            <param name="r1">
              The first <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with which to intersect.
            </param>
            <param name="r2">
              The second <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with which to intersect.
            </param>
            <example>
              <para>The following example creates two <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> objects and creates a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with their intersection:</para>
              <code lang="C#">GridRangeInfo firstRange = new GridRangeInfo(0, 0, 100, 100);
              </code>
            </example>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.UnionRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <overload>
            Creates a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that represents the union of itself and another range.
            </overload>
            <summary>
            Creates a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that represents the union of itself and another range.
            </summary>
            <param name="range">
            A range to union.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.UnionRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Creates a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that represents the union of two ranges.
            </summary>
            <param name="r1">
            A range to union.
            </param>
            <param name="r2">
            A range to union.
            </param>
            <returns>The new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.op_Equality(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.op_Inequality(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Compare(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary cref="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Equals(System.Object)">
            	Compares two range objects and returns if they are both equal. 
            </summary>
            <param name="r1">The left-hand side of the operator.</param>
            <param name="r2">The right-hand side of the operator.</param>
            <returns>
            	bool
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.GetAlphaLabel(System.Int32)">
            <summary>
            Returns a string in the format "A, B, C, ... AA, AB ..." to be used for column labels.
            </summary>
            <param name="nCol">The column index.</param>
            <returns>
              <para>A string that contains the column label for the column index.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.GetNumericLabel(System.Int32)">
            <summary>
            Returns a numeric string in the format to be used for row labels.
            </summary>
            <param name="nRow">The row index.</param>
            <returns>
              <para>A string that contains the row label for the row index.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.ToString">
            <overload>
              <para>Converts the attributes of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a human-readable string.</para>
            </overload>
            <summary>
              <para>Converts the attributes of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a human-readable string.</para>
            </summary>
            <remarks>
            The generate string will be in the format R#C#, R#, C#, T.<para/>
            An example for a range of cells is "R1C1:R10C20" or "R5C5".<para/>
            An example for a range of rows is "R1:R10" or "R6".<para/>
            An example for a range of columns is "C1:C10" or "C7".<para/>
            An example for a table range is "T".<para/>
            </remarks>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.ToString(System.IFormatProvider)">
            <summary>
              <para>Converts the attributes of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a human-readable string.</para>
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider"/> to use to format the value. Is ignored.</param>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.ToString(System.String)">
            <summary>
              <para>Converts the attributes of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a human-readable string.</para>
            </summary>
            <param name="format">Ignored.</param>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.ToString(System.String,System.IFormatProvider)">
            <summary>
              <para>Converts the attributes of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a human-readable string.</para>
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value. Is ignored.</param>
            <param name="format">Ignored.</param>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Parse(System.String)">
            <summary>
            Creates a range object from a string.
            </summary>
            <param name="parseText">The text with text representation of the range.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> with coordinates specifed in the string.</returns>
            <remarks>
            The method parses a string that was previously created with <see cref="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.ToString"/>.
            <para/>
            The string should be in the format R#C#, R#, C#, T.<para/>
            An example for a range of cells is "R1C1:R10C20" or "R5C5".<para/>
            An example for a range of rows is "R1:R10" or "R6".<para/>
            An example for a range of columns is "C1:C10" or "C7".<para/>
            An example for a table range is "T".<para/>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.RangeType">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType"/> of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IsTable">
            <summary>
              <para><see langword="true"/> if this represents a table.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IsRows">
            <summary>
              <para><see langword="true"/> if this represents a range of rows.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IsCols">
            <summary>
              <para><see langword="true"/> if this represents a range of columns.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IsCells">
            <summary>
              <para><see langword="true"/> if this represents a range of individual cells.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Top">
            <summary>
              The row index of the upper-left corner of the cell range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Left">
            <summary>
              The column index of the upper-left corner of the cell range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Bottom">
            <summary>
              The row index of the bottom-right corner of the cell range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Right">
            <summary>
              The column index of the bottom-right corner of the cell range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.IsEmpty">
            <summary>
              <para>Tests whether this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> has a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType"/> of Empty.</para>
            </summary>
            <value>
              <para><see langword="true"/> if <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType"/> is Empty; otherwise, <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Width">
            <summary>
              <para>Gets the width of the range defined by this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Height">
            <summary>
              <para>Gets the height of the range defined by this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Info">
            <summary>
            Results of ToString method.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList">
            <summary>
            A collection of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> objects.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.Empty">
            <summary>
            An empty and Read-only list.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/>.
            </overload>
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.CopyTo(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Int32)">
            <summary>
            Copies all range objects into a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> starting at specified index.
            </summary>
            <param name="rl">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> where the values should be copied to.</param>
            <param name="index">The starting index in the destination list.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.Clone">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <returns>A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with duplicated <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> objects.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.RemoveEmptyRanges">
            <summary>
            Removes any empty ranges from the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.GetRangesContaining(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Searches for ranges in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> that contain a specified range.
            </summary>
            <param name="range">The range to be searched for.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with ranges that match the criteria.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.GetRangesIntersecting(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Searches for ranges in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> that intersect with a specified range.
            </summary>
            <param name="range">The range to be searched for.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with ranges that match the criteria.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.GetRangesContained(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Searches for ranges in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> that are contained in a specified range.
            </summary>
            <param name="range">The range to be searched for.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with ranges that match the criteria.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.GetOuterRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Returns a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that spans over all ranges that intersect with a specified range.
            </summary>
            <param name="range">The range to be searched for.</param>
            <returns>A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that contains the original <paramref name="range"/> and
            the outer bounds of all ranges that intersect with <paramref name="range"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.AnyRangeContains(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Determines if a range in the range list contains the specified range.
            </summary>
            <param name="range">The range to be searched for.</param>
            <returns>True if any range contains the specified range.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.AnyRangeIntersects(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Determines if a range in the range list intersects with the specified range.
            </summary>
            <param name="range">The range to be searched for.</param>
            <returns>True if any range contains the specified range.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.InsertRows(System.Int32,System.Int32)">
            <summary>
            Updates the range list when rows have been inserted in the grid.
            </summary>
            <param name="row">The row index where rows have been inserted.</param>
            <param name="count">The number of rows that were inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.InsertCols(System.Int32,System.Int32)">
            <summary>
            Updates the range list when columns have been inserted in the grid.
            </summary>
            <param name="col">The column index where columns have been inserted.</param>
            <param name="count">The number of columns that were inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.RemoveRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the range list when rows were removed from the grid.
            </summary>
            <param name="from">The first row index.</param>
            <param name="last">The last row index.</param>
            <param name="maxrow">The new row count in the grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.RemoveCols(System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the range list when columns were removed from the grid.
            </summary>
            <param name="from">The first column index.</param>
            <param name="last">The last column index.</param>
            <param name="maxcol">The new column count in the grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.MoveRows(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the range list when rows were moved in the grid.
            </summary>
            <param name="nFromRow">The first row index.</param>
            <param name="nToRow">The last row index.</param>
            <param name="nDestRow">The destination row index.</param>
            <param name="maxrow">The new row count in the grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.MoveCols(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the range list when columns were moved in the grid.
            </summary>
            <param name="nFromCol">The first column index.</param>
            <param name="nToCol">The last column index.</param>
            <param name="nDestCol">The destination column index.</param>
            <param name="maxcol">The new column count in the grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.FilterRangeType(Syncfusion.WinRT.Controls.Grid.GridRangeInfoType)">
            <summary>
            Returns a range list with ranges that match a specified <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType"/>.
            </summary>
            <param name="filter">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType"/> to search for.</param>
            <returns>A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with ranges that match the above criteria.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.ExpandRanges(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a range list and convert column and row ranges into cell ranges with the specified bounds.
            </summary>
            <param name="nFirstRow">Row index for the first non-label cell in grid area.</param>
            <param name="nFirstCol">Column index for the first non-label cell in grid area.</param>
            <param name="nRowCount">Last row in the grid.</param>
            <param name="nColCount">Last column in the grid</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> objects that this method creates.</returns>
            /<remarks>
            Column ranges will be converted to cell ranges using nFirstRow and nRowCount. 
            Row ranges will be converted to cell ranges using nFirstCol and nColCount. 
            Column ranges will be converted to cell ranges using all input parameters. 
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.GetColRanges(Syncfusion.WinRT.Controls.Grid.GridRangeInfoType)">
            <summary>
            Creates a range list with column ranges that match a specified criteria.
            </summary>
            <param name="filter">The filter criteria.</param>
            <returns>The range list with column ranges.</returns>
            <remarks>
            Use <para/>
            rangeList.GetColRanges(GridRangeInfoType.Cells|GridRangeInfoType.Cols);<para/>
            if you want to get column ranges for both ranges that are cells or column ranges.<para/>
            Use <para/>
            rangeList.GetColRanges(GridRangeInfoType.Cols);<para/>
            if you only want to get column ranges and not cell ranges.<para/>
            Neighboring ranges will be combined if they intersect or have the same border (e.g. C4:C5 and C6:C7 will be combined into C4:C7).
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.GetRowRanges(Syncfusion.WinRT.Controls.Grid.GridRangeInfoType)">
            <summary>
            Creates a range list with row ranges that match a specified criteria.
            </summary>
            <param name="filter">The filter criteria.</param>
            <returns>The range list with row ranges.</returns>
            <remarks>
            Use <para/>
            rangeList.GetRowRanges(GridRangeInfoType.Cells|GridRangeInfoType.Rows);<para/>
            if you want to get row ranges for both ranges that are cells or row ranges.<para/>
            Use <para/>
            rangeList.GetRowRanges(GridRangeInfoType.Rows);<para/>
            if you only want to get row ranges and not cell ranges.<para/>
            Neighboring ranges will be combined if they intersect or have the same border (e.g. R4:R5 and R6:R7 will be combined into R4:R7).
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.Parse(System.String)">
            <summary>
            Creates a range list from a string with comma separated range descriptions.
            </summary>
            <param name="parseText">The text to be parsed.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with range objects described in the string.</returns>
            <remarks>
            The method parses a string that was previously created with <see cref="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.ToString"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.ToString">
            <overload>
              <para>Converts the ranges of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a comma separated human-readable string.</para>
            </overload>
            <summary>
              <para>Converts the ranges of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a comma separated human-readable string.</para>
            </summary>
            <remarks>
            The generate string will be in the format R#C#, R#, C#, T.<para/>
            An example for a range of cells is "R1C1:R10C20" or "R5C5".<para/>
            An example for a range of rows is "R1:R10" or "R6".<para/>
            An example for a range of columns is "C1:C10" or "C7".<para/>
            An example for a table range is "T".<para/>
            Each range object will be comma separated. For example: "R3:R5,R8:R10,R14:R15".<para/>
            </remarks>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.ToString(System.IFormatProvider)">
            <summary>
              <para>Converts the ranges of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a comma separated human-readable string.</para>
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider"/> to use to format the value. Is ignored.</param>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.ToString(System.String)">
            <summary>
              <para>Converts the ranges of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a comma separated human-readable string.</para>
            </summary>
            <param name="format">Ignored.</param>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.ToString(System.String,System.IFormatProvider)">
            <summary>
              <para>Converts the ranges of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to a comma separated human-readable string.</para>
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value. Is ignored.</param>
            <param name="format">Ignored.</param>
            <returns>
              <para>A string that contains the column and row index of the top-left and bottom-right position of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.</para>
            </returns>
            <genoverload/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.ActiveRange">
            <summary>
            The last range in the range list.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList.Info">
            <summary>
            Results of ToString method.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType">
            <summary>
            Identifies the range type for a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType.Empty">
            <summary>
            Range is empty.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType.Cells">
            <summary>
            Range of cells.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType.Rows">
            <summary>
            Range with rows.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType.Cols">
            <summary>
            Range with columns.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfoType.Table">
            <summary>
            Range is a whole table.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.ApplyFormattedText(Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.String,System.Int32)">
            <summary>
            Parses the display text and converts it into a cell value to be stored in the style object.
            GridStyleInfo.CultureInfo is used for parsing the string.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that holds cell information.</param>
            <param name="text">The input text to be parsed.</param>
            <param name="textInfo">TextInfo is a hint of who is calling, default is GridCellBaseTextInfo.DisplayText</param>
            <returns>True if value was parsed correctly and saved in style object as <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue"/>; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.CalculatePreferredCellSize(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridStyleInfo,Syncfusion.WinRT.Controls.Grid.GridQueryBounds)">
            <overload>
            Calculates the preferred size of the cell based on its contents, including margins and any buttons.
            </overload>
            <summary>
            Calculates the preferred size of the cell based on its contents, including margins and any buttons.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> context of the canvas.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <param name="style">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that holds cell information.</param>
            <param name="queryBounds">Vertical or horizontal</param>
            <returns>The optimal size of the cell.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.AddBorderMargins(Windows.Foundation.Size,Windows.UI.Xaml.Thickness)">
            <summary>
            Add border margins to get cells client area.
            </summary>
            <param name="cellRect"></param>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.RemoveBorderMargins(Windows.Foundation.Size,Windows.UI.Xaml.Thickness)">
            <summary>
            Remove border margins to get cells client area.
            </summary>
            <param name="cellRect"></param>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.OnQueryPrefferedClientSize(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridStyleInfo,Syncfusion.WinRT.Controls.Grid.GridQueryBounds)">
            <summary>
            Calculates the preferred size of the cell based on its contents without margins and any buttons.
            </summary>
            <param name="g">The <see cref="!:System.Drawing.Graphics"/> context of the canvas.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <param name="style">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that holds cell information.</param>
            <param name="queryBounds"></param>
            <returns>The optimal size of the cell.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.GetCellSize(System.Int32,System.Int32)">
            <summary>
            Gets the actual size of the cell including margins and cell buttons. 
            Spanned cells will return the size of the whole cell
            covering neighboring cells.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <returns>The actual <see cref="T:Windows.Foundation.Size"/> of the cell including margins and cell buttons. </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.GetCellClientSize(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Gets the actual size of the cell without margins and without cell buttons. 
            Spanned cells will return the size of the whole cell
            covering neighboring cells.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <param name="style">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that holds cell information.</param>
            <returns>The actual <see cref="T:Windows.Foundation.Size"/> of the cell without margins or cell buttons.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.MeasureEmptyCellString">
            <summary>
            This string is used when doing a resize to fit for cells with empty text.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRenderer`1">
            <summary>
            GridVirtualizingCellRenderer is an abstract base class for cell renderers
            that need live UIElement visuals displayed in a cell. You can derive from
            this class and provide the type of the UIElement you want to show inside cells
            as type paramater. The class provides strong typed virtual methods for 
            initializing content of the cell and arranging the cell visuals. See 
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1"/> for more details.
            <para/>
            The idea behind this class is to provide a place where we can 
            add general code that should be shared for all cell renderers in the tree derived
            from GridVirtualizingCellRendererBase. While this class does at
            the moment not add meaningfull functionality to GridVirtualizingCellRendererBase
            we created this extra layer of inheritance to make it easy to share 
            code for the GridVirtualizingCellRendererBase base class between grid,
            tree and common assemblies and keep tree/grid control specific code
            out of the base class. It is currently not possible with C# to the base class as 
            template type parameter. This is the reason for this copy/paste approach for the 
            codebase for the base class of this class.
            </summary>
            <typeparam name="T">The type of the UIElement that should be placed inside cells</typeparam>
            
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1">
            <summary>
            VirtualizingCellRendererBase is an abstract base class for cell renderers
            that need live UIElement visuals displayed in a cell. You can derive from
            this class and provide the type of the UIElement you want to show inside cells
            as type parameter. The class provides strong typed virtual methods for 
            initializing content of the cell and arranging the cell visuals.
            <para/>
            The class manages the creation 
            of cells UIElement objects when the cell is scrolled into view and also 
            unloading of the elements. The class offers an optimization in which 
            elements can be recycled when <see cref="P:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.AllowRecycle"/> is set. 
            In this case when a cell is scrolled out of view
            it is moved into a recycle bin and the next time a new element is scrolled into
            view the element is recovered from the recycle bin and reinitialized with the
            new content of the cell.<para/>
            Another optimization is support for cells rendering themselves directly to the
            drawing context. When <see cref="!:SupportsRenderOptimization"/> is true the 
            UIElement will only be created
            when the user moves the mouse over the cell or if the UIElement is needed for
            other reasons.<para/>
            After a UIElement was created the virtual methods <see cref="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.WireUIElement(`0)"/> 
            and <see cref="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.UnwireUIElement(`0)"/> are called to wire any event listeners.
            <para/>
            Updates to appearance and content of child elements, creation and unloading
            of elements will not trigger ArrangeOverride or Render calls in parent canvas.
            <para/>
            In Grid and Tree control you should not derive from this class. Instead you should
            derive from the GridVirtualizingCellRendererBase and TreeVirtualizingCellRendererBase classes.
            These classes are the exact same code base as this class with the only difference that they 
            derive from GridCellRendererBase and TreeCellRenderer base classes instead. It is 
            currently not possible with C# to the base class as template type parameter. This is
            the reason for this copy/paste approach for the codebase of this class.
            </summary>
            <typeparam name="T">The type of the UIElement that should be placed inside cells</typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridCellRenderer.ShouldGridTryToHandlePreviewKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Let Renderer decide whether the parent grid should be allowed to handle keys and prevent
            the key event from being handled by the visual UIElement for this renderer. If this method
            returns true the parent grid will handle arrow keys and set the Handled flag in the event
            data. Keys that the grid does not handle will be ignored and be routed to the UIElement 
            for this renderer.
            </summary>
            <param name="e"></param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.ResetControlText">
            <summary>
            Resets the ControlText to its original state.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.ResetControlValue">
            <summary>
            Resets the cell value of the current cell to its original state.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.CopyCurrentStyle">
            <summary>
            Method for copying the CurrentStyle
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.UseDefaultRenderer">
            <summary>
            Gets or Sets the default renderer initialization. If true then the default renderer routine would be called in OnInitializeRendererElement.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.ControlText">
            <summary>
            The active text that is displayed for the current cell, e.g. TextBox.Text.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.HasControlText">
            <summary>
            Checks if ControlText for the current cell has been set.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.InSetControlText">
            <summary>
            Gets a value indicating whether ControlText setter is in process.
            </summary>
            <value><c>true</c> if ControlText setter is in process; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.ControlValue">
            <summary>
            The cell value for the current cell.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.HasControlValue">
            <summary>
            Returns whether the cell value for the current cell has been changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase.InSetControlValue">
            <summary>
            Returns true if ControlValue setter was called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.OnArrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> to
            arrange the cells UIElement children. The method checks
            <see cref="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.ShouldCreateVisuals"/> and if this is true
            it will initialize the newly created UIElement with attached properties
            about CellRowColumnIndex, RenderCellInfo, CellRenderer, 
            initialize its default properties with a call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.InitializeDefaultProperties(`0)"/>
            and its cell specific content with a call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.InitializeContent(`0,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)"/>.
            The UIElement is arranged on the canvas with a call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.ArrangeUIElement(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,`0,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)"/>.
            </summary>
            <param name="aca">The arange cell layout information.</param>
            <param name="style">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.InitializeDefaultProperties(`0)">
            <summary>
            Set Backgrounds, BorderThickness, Padding and IsEnabled properties.
            </summary>
            <param name="uiElement"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.ArrangeUIElement(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,`0,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Arranges the UI element by setting the Left, Top, Right, Bottom attached
            properties and its Width, Height, MaxWidth and MaxHeight properties. The
            visibility is set to Visibility.Visible and the elements Measure and
            Arrange methods are called.
            </summary>
            <param name="aca">The arrange cell layout.</param>
            <param name="uiElement">The UI element.</param>
            <param name="style">The cell style.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.SetBounds(Windows.UI.Xaml.UIElement,Windows.Foundation.Rect)">
            <summary>
            Helper method which arranges an UI element by setting the Left, Top, Right, Bottom attached
            properties and its Width, Height, MaxWidth and MaxHeight properties. The
            visibility is set to Visibility.Visible and the elements Measure and
            Arrange methods are called.
            </summary>
            <param name="el">The element.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.SetBounds(Windows.UI.Xaml.UIElement,Windows.Foundation.Rect,System.Boolean,System.Boolean)">
            <summary>
            Helper method which arranges an UI element by setting the Left, Top, Right, Bottom attached
            properties and its Width, Height, MaxWidth and MaxHeight properties. The
            visibility is set to Visibility.Visible and the elements Measure and
            Arrange methods are called.
            </summary>
            <param name="el">The element.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.GetUIElement(Syncfusion.WinRT.Controls.Cells.CellUIElements)">
            <summary>
            Gets the UI element or null if the cell visuals do not have any UIElement visuals.
            </summary>
            <param name="cellUIElements">The cell visuals.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.InitializeContent(`0,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.OnArrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)"/> to initialize the content of the cell 
            using the information from the cell style (value, text,
            behavior etc.). The method calls the virtual <see cref="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.OnInitializeContent(`0,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)"/> which 
            you should override in your derived class.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.OnInitializeContent(`0,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Called to initialize the content of the cell 
            using the information from the cell style (value, text,
            behavior etc.). You must override this method in your
            derived class.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.OnPrepareUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> to
            prepare the cells UIElement children.
            VirtualizingCellRendererBase overrides this method and
            creates new UIElements and wires them with the parent cells control.
            </summary>
            <param name="aca">The arange cell layout information.</param>
            <param name="uiElements">The UI elements.</param>
            <param name="canvas">The canvas to which any UIElement elements should be added.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.CreateUIElement(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Creates a new UIElement of type specified with the class type parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.OnWireUIElement(`0)">
            <summary>
            Wire events from uiElement
            </summary>
            <param name="uiElement"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.OnUnwireUIElement(`0)">
            <summary>
            Unwire previously wired events from uiElement. 
            </summary>
            <param name="uiElement"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.Dispose(System.Boolean)">
            <summary>
            This gets called when parent grid is unloaded. Unload all elements
            that were saved for later reuse.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.AllowRecycle">
            <summary>
            Gets or sets a value indicating whether elements can be recycled when scrolled out of view.
            In this case when a cell is scrolled out of view
            it is moved into a recycle bin and the next time a new element is scrolled into
            view the element is recovered from the recycle bin and reinitialized with the
            new content of the cell. The default value is false.
            </summary>
            <value><c>true</c> if elements can be recycled when scrolled out of view; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.AllowTransparentBackground">
            <summary>
            Gets or sets a value indicating whether the background of the UIElement visual
            placed in the cell can be set to <see cref="!:Brushes.Transparent"/>. This is needed
            in order for the cells control to draw the cell background color behind the UIElement.
            The default value is true.
            </summary>
            <value>
            	<c>true</c> if [allow transparent background]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRendererBase`1.InInitializeContent">
            <summary>
            Gets a value indicating whether InitializeContent was called.
            </summary>
            <value><c>true</c> if InitializeContent was called; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.IAllowKeepAliveOnlyCurrentCell">
            <summary>
            Provies a <see cref="P:Syncfusion.WinRT.Controls.Grid.IAllowKeepAliveOnlyCurrentCell.AllowKeepAliveOnlyCurrentCell"/> property that gets or sets 
            whether the renderer will create the UIElement only when BeginEdit is called for
            the current cell and the UIElement should be discarded once EndEdit or CancelEdit
            is called. Setting this option is only valid when SupportsRenderOptimization is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.IAllowKeepAliveOnlyCurrentCell.AllowKeepAliveOnlyCurrentCell">
            <summary>
            Gets or sets whether the renderer will create the UIElement only when
            BeginEdit is called for the current cell and the UIElement should be
            discarded once EndEdit or CancelEdit is called. Setting this option
            is only valid when SupportsRenderOptimization is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridVirtualizingCellRenderer`1.AllowKeepAliveOnlyCurrentCell">
            <summary>
            Gets or sets whether the renderer will create the UIElement only when
            BeginEdit is called for the current cell and the UIElement should be
            discarded once EndEdit or CancelEdit is called. Setting this option
            is only valid when SupportsRenderOptimization is enabled.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridComboBoxCellRenderer.UpdateComboBox">
            <summary>
            This Method Used to refresh the UIElement
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridComboBoxCellRenderer.OnUnwireUIElement(Windows.UI.Xaml.Controls.ComboBox)">
            <summary>
            In this event we have Unload the CurrentCell UIElement Because if Dynamically set itemsource means Dropdown list doesnt load so that we have Unload and reload the UIElement.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellBoundWrapper.CellBoundValue">
            <summary>
            Gets or sets the CellBoundValue. This is a DependencyProperty exposed for the
            underlying object data source. The object can be binded to an external WPF
            control's DependencyProperty in Two-way mode. The changes reflected in the
            object would be passed on to the underlying object accordingly.
            <para></para>
            <para></para>
            <code>    &lt;syncfusion:GridDataVisibleColumn MappingName=&quot;LastName&quot; HeaderText=&quot;LastName&quot;
            Width=&quot;90&quot; &gt;
                                    &lt;syncfusion:GridDataVisibleColumn.CellTemplate&gt;
                                        &lt;DataTemplate&gt;
                                            &lt;TextBox Text=&quot;{Binding
            Path=CellBoundValue, Mode=TwoWay}&quot;
                                                   Foreground=&quot;Black&quot;
            syncfusion:VisualContainer.WantsMouseInput=&quot;True&quot;/&gt;
                                        &lt;/DataTemplate&gt;
                                    &lt;/syncfusion:GridDataVisibleColumn.CellTemplate&gt;
                                &lt;/syncfusion:GridDataVisibleColumn&gt;</code>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridDataValueEventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDataValueEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridDataValueEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDataValueEventArgs`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridDataValueEventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryBounds">
            <summary>
            Used by <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.CalculatePreferredCellSize(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridStyleInfo,Syncfusion.WinRT.Controls.Grid.GridQueryBounds)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridQueryBounds.Height">
            <summary>
            Queries height of cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridQueryBounds.Width">
            <summary>
            Queries width of cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellTextBlockRenderer.OnInitializeContent(Windows.UI.Xaml.Controls.Border,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Called to initialize the content of the cell
            using the information from the cell style (value, text,
            behavior etc.). You must override this method in your
            derived class.
            </summary>
            <param name="textBlock">The text block.</param>
            <param name="style">The cell style info.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo">
            <summary>
            Provides additional hints about a call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetFormattedText(System.Object)"/>,
            or <see cref="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ApplyFormattedText(System.String)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.ClearCells">
            <summary>
            Clear cells operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.CopyText">
            <summary>
            Copy text operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.CurrentText">
            <summary>
            Current text query.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.DisplayText">
            <summary>
            Display text operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.None">
            <summary>
            No hint specified.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.PasteText">
            <summary>
            Paste text operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.ReplaceSelection">
            <summary>
            Replace selection.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.TextBox">
            <summary>
            Initialize text box with text.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellBaseTextInfo.Validate">
            <summary>
            ValidateString checking if string is valid.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSelectionReason">
            <summary>
            A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionReason"/> is used by <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs"/> to give a hint
            about the current state of the user action and reason for this event (mouse, keyboard or programmatic).
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.SelectRange">
            <summary>
            Indicates a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.SelectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean)"/> call.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.SetCurrentCell">
            <summary>
            Indicates a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> call.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.ArrowKey">
            <summary>
            Indicates user is moving current cell with arrow keys.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.MouseDown">
            <summary>
            Indicates user pressed mouse down.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.MouseMove">
            <summary>
            Indicates user is moving mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.MouseUp">
            <summary>
            Indicates user released mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.CancelMode">
            <summary>
            Indicates current operation was canceled.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.Clear">
            <summary>
            Indicates a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Clear"/> call, e.g. when user hit Escape-key.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionReason.DeleteRow">
            <summary>
            Indicates user delete current row.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason">
            <summary>
            A <see cref="!:GridDragSelectionReason"/> is used by <see cref="T:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs"/> to give a hint
            about the current state of the user action and reason for this event.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.MouseDown">
            <summary>
            Indicates user pressed mouse down.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.MouseMove">
            <summary>
            Indicates user is moving mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.MouseUp">
            <summary>
            Indicates user released mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.CancelMode">
            <summary>
            Indicates current operation was canceled.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.HitTest">
            <summary>
            Indicates this is a Hit-Test query.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.DoubleClick">
            <summary>
            Indicates used double clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.ResetHide">
            <summary>
            Indicates hidden rows or column will be made visible.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeCellsReason.ResetDefault">
            <summary>
            Indicates changes row heights or column widths will be reset back to default value.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags">
            <summary>
            Specifies behavior for selecting cells for the grid by the user with mouse or keyboard.
            </summary>
            <remarks>
            See <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.AllowSelection"/>.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.None">
            <summary>
            Disable selecting cells.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Row">
            <summary>
            Rows can be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Column">
            <summary>
            Columns can be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Table">
            <summary>
            Whole table can be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Cell">
            <summary>
            Indidvidual cells can be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Multiple">
            <summary>
            Multiple ranges of cells can be selected. The user has to press Control Key to select multiple ranges.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Shift">
            <summary>
            Allow extend existing selection when user holds Shift Key and clicks on a cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Keyboard">
            <summary>
            Allow extend existing selection when user holds Shift Key and arrow keys.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.MixRangeType">
            <summary>
            Allow both rows and columns to be selected at same time when <see cref="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Multiple"/> is specified. By default, the grid does not allow having rows and column
            ranges be selected at the same time.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags.Any">
            <summary>
            Default behavior for selecting cells: Rows, Columns, Table, Cell, Multiple, Extends Shift Key support, and alphablending.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason">
            <summary>
            Defines the reason for scrolling current cell into view.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.GridFocus">
            <summary>
            Grid control was activated.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.BeginEdit">
            <summary>
            CurrentCell.BeginEdit was called.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.KeyPress">
            <summary>
            A key was pressed while current cell is active.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.Modified">
            <summary>
            Contents of current cell are mofied.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.Activate">
            <summary>
            Current cell was activated.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.Click">
            <summary>
            User clicked into cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.MoveTo">
            <summary>
            CurrentCell.MoveTo was called.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.Error">
            <summary>
            An error occurred and a message box will be displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.Command">
            <summary>
            A undo or redo command was executed.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.ResizedCells">
            <summary>
            Columns or rows were resized.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.FindText">
            <summary>
            FindDialog has found text in cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.SynchronizeRecord">
            <summary>
            Grouping Grid: SynchronizeCurrentCellWithRecord.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridScrollCurrentCellReason.Any">
            <summary>
            Default: All of above.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction">
            <summary>
            Specifies current cell activation behavior when moving the current cell or clicking inside a cell. Defines when to set the focus / toggle edit mode for the current cell.
            </summary>
            <remarks>
            See <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ActivateCurrentCellBehavior"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction.None">
            <summary>
            Do not set focus to text box.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction.ClickOnCell">
            <summary>
            Begin editing / focus on text box after user clicked on cell.
            </summary>
            <remarks>
            The cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellStartEditing"/> event may block editing mode for the current cell.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction.SetCurrent">
            <summary>
            Begin editing / focus on text box whenever a cell becomes current cell no matter if user clicked on cell or moved with arrow keys.
            </summary>
            <remarks>
            When GridCellActivateAction.SetCurrent is specified <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.BeginEdit"/> will be called
            before the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivated"/> event is raised. <para/>
            See the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivated"/> event if you want to programmatically call <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.BeginEdit"/>.<para/>
            The cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellStartEditing"/> event may block editing mode for the current cell.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction.DblClickOnCell">
            <summary>
            Begin editing / focus on text box when user double clicked on cell.
            </summary>
            <remarks>
            The cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellStartEditing"/> event may block editing mode for the current cell.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction.SelectAll">
            <summary>
            Begin editing / focus on text box and select all text whenever a cell becomes current cell no matter if user clicked on cell or moved with arrow keys.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction.PositionCaret">
            <summary>
            Forward mouse click to the text box so that the caret can be positioned at the character under the mouse pointer.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCommandMode">
            <summary>
            Defines current undo logging context in the grid.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCommandMode.Recording">
            <summary>
            Grid is recording commands. This is the default state.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCommandMode.Undo">
            <summary>
            Grid is currently in process of undoing commands. <see cref="!:GridModelCommandManager.Undo"/> will set initialize and reset this state.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCommandMode.Redo">
            <summary>
            Grid is currently in process of redoing commands. <see cref="!:GridModelCommandManager.Redo"/> will set initialize and reset this state.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCommandMode.Rollback">
            <summary>
            Grid is currently in process of rolling back commands. <see cref="!:GridModelCommandManager.Rollback"/> will set initialize and reset this state.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions">
            <summary>
            Defines options for the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> method call.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions.None">
            <summary>
            No special options.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions.NoSelectRange">
            <summary>
            Do not give current cell a range selection (when using Excel-like current cell).
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions.ScrollInView">
            <summary>
            Scroll new current cell into view.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions.NoSyncCurrentCell">
            <summary>
            Do not synchronize current cell among grid views showing the same model, ignoring <see cref="!:GridModelOptions.ShouldSynchronizeCurrentCell"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions.ForceRefresh">
            <summary>
            Force new current cell to be redrawn.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions.NoActivate">
            <summary>
            Do not active new current cell. Only store row and column index. 
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridBaseCellModelFactory">
            <summary>
            GridCellModelFactory creates <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> objects to be used in a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory">
            <summary>
            Provides a <see cref="M:Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory.CreateCellModel(System.String,Syncfusion.WinRT.Controls.Grid.GridModel)"/> method that instantiates <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> 
            objects on demand when a cell is touched that has a <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> that is 
            not found in the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CellModels"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory.CreateCellModel(System.String,Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Instantiates <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> objects on demand when a cell is touched that has a <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> that is 
            not found in the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CellModels"/> collection.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory.IsDefault">
            <summary>
            Returns true when the grid is allowed to replace this factory with a derived factory at any time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseCellModelFactory.#ctor">
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseCellModelFactory"/>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseCellModelFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseCellModelFactory"/> and optionally marks it as "Default",
            allowing the grid to replace it with a derived factory at any time.
            </summary>
            <param name="isDefault"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseCellModelFactory.CreateCellModel(System.String,Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Creates <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> objects to be used in a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
            <param name="cellTypeName">A cell type name that identifies the cell model to be instantiated.</param> 
            <param name="pGrid">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> the new cell model object should be associated with.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseCellModelFactory.IsDefault">
            <summary>
            Returns true when the grid is allowed to replace this factory with a derived factory at any time.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> objects in the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.GridModel"/>.
            </summary>
            <remarks>
            On the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.GridModel"/>, you access the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> through the <see cref="!:GridModel.CellModels"/> property.
            <para/>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> uses standard <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Add(System.String,Syncfusion.WinRT.Controls.Grid.GridCellModelBase)"/> and <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Remove(System.String)"/>
            methods to manipulate the collection.
            Use the Contains method to determine if a specific cell type exists in the collection.
            </remarks>
            <example>
            TODO: Show how to register cell types.
            </example>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <overload>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.
            </overload>
            <summary>
            Initializes an empty <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> and associates it with a <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.GridModel"/>.
            </summary>
            <param name="model">The <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.GridModel"/> that owns this collection of cell types.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Clone">
            <summary>
            Creates a copy of this object using <see cref="M:System.Object.MemberwiseClone"/>.
            </summary>
            <returns>An exact copy of this object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.GetEnumerator">
            <summary>
              <para>Returns an enumerator that can iterate through the cell model dictionary.</para>
            </summary>
            <returns>
              <para>An <see cref="T:System.Collections.IEnumerator"/> that can iterate through the string dictionary.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Remove(System.String)">
            <summary>
              <para>Removes the entry with the specified cellTypeName from the cell model dictionary.</para>
            </summary>
            <param name="cellTypeName">The cellTypeName of the entry to remove.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.CopyTo(Syncfusion.WinRT.Controls.Grid.GridCellModelBase[],System.Int32)">
            <summary>
              <para>Copies the cell model dictionary values to a one-dimensional <see cref="T:System.Array"/> instance at the
            specified index.</para>
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</param>
            <param name=" index">The index in the array where copying begins.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.ContainsValue(Syncfusion.WinRT.Controls.Grid.GridCellModelBase)">
            <summary>
              <para>Determines if the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> contains a specific value.</para>
            </summary>
            <param name="cellModel">The value to locate in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</param>
            <returns>
              <para>
                <see langword="true"/> if the
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> contains an element with the specified value;
            otherwise, <see langword="false"/>. </para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.ContainsKey(System.String)">
            <summary>
              <para>Determines if the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> contains a specific cellTypeName.</para>
            </summary>
            <param name="cellTypeName">The cellTypeName to locate in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</param>
            <returns>
              <para>
                <see langword="true"/> if the
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> contains an entry with the specified cellTypeName;
            otherwise, <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Clear">
            <summary>
              <para>Removes all entries from the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Add(System.String,Syncfusion.WinRT.Controls.Grid.GridCellModelBase)">
            <summary>
              <para>Adds cell model with the specified cellTypeName into the
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</para>
            </summary>
            <param name="cellTypeName">The cellTypeName of the entry to add.</param>
            <param name="model">The cell model of the entry to add.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.DefaultCellType">
            <summary>
            The default cell type to be used for cells where a specific cell type could not be loaded.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Values">
            <summary>
              <para>Gets a collection of values in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.SyncRoot">
            <summary>
              <para>Gets an object that can be used to synchronize access to
            the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Keys">
            <summary>
              <para>Gets a collection of cellTypeNames in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Item(System.String)">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> for the specific cell type name.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.IsSynchronized">
            <summary>
              <para>Gets a value that indicates whether access to the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/> is synchronized (thread-safe).</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection.Count">
            <summary>
              <para>Gets the number of cellTypeName-and-value pairs in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelCollection"/>.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase"/> objects in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> view.
            </summary>
            <remarks>
            On the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>, you access the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> through the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CellRenderers"/> property.
            <para/>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> uses standard <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Add(System.String,Syncfusion.WinRT.Controls.Grid.IGridCellRenderer)"/> and <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Remove(System.String)"/>
            methods to manipulate the collection.
            Use the Contains method to determine if a specific cell type exists in the collection.
            </remarks>
            <example>
            TODO: Show how to look up cell types.
            </example>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> and 
            associates it with the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.GetEnumerator">
            <summary>
              <para>Returns an enumerator that can iterate through the cell grid dictionary.</para>
            </summary>
            <returns>
              <para>An <see cref="T:System.Collections.IEnumerator"/> that can iterate through the string dictionary.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Remove(System.String)">
            <summary>
              <para>Removes the entry with the specified key from the cell grid dictionary.</para>
            </summary>
            <param name="key">The key of the entry to remove.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.CopyTo(Syncfusion.WinRT.Controls.Grid.GridCellRendererBase[],System.Int32)">
            <summary>
              <para>Copies the cell grid dictionary values to a one-dimensional <see cref="T:System.Array"/> instance at the
            specified index.</para>
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</param>
            <param name=" index">The index in the array where copying begins.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.ContainsValue(Syncfusion.WinRT.Controls.Grid.GridCellRendererBase)">
            <summary>
              <para>Determines if the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> contains a specific value.</para>
            </summary>
            <param name="cellRenderer">The value to locate in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</param>
            <returns>
              <para>
                <see langword="true"/> if the
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> contains an element with the specified value;
            otherwise, <see langword="false"/>. </para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.ContainsKey(System.String)">
            <summary>
              <para>Determines if the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> contains a specific key.</para>
            </summary>
            <param name="key">The key to locate in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</param>
            <returns>
              <para>
                <see langword="true"/> if the
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> contains an entry with the specified key;
            otherwise, <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Clear">
            <summary>
              <para>Removes all entries from the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Add(System.String,Syncfusion.WinRT.Controls.Grid.IGridCellRenderer)">
            <summary>
              <para>Adds cell grid with the specified key into the
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</para>
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="grid">The cell grid of the entry to add.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Values">
            <summary>
              <para>Gets a collection of values in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.SyncRoot">
            <summary>
              <para>Gets an object that can be used to synchronize access to
            the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Keys">
            <summary>
              <para>Gets a collection of keys in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Item(System.String)">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase"/> for the given key.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.IsSynchronized">
            <summary>
              <para>Gets a value that indicates whether access to the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/> is synchronized (thread-safe).</para>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection.Count">
            <summary>
              <para>Gets the number of key-and-value pairs in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererCollection"/>.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellSpanBackgroundInfoCollection">
            <summary>
            A collection with elements derived from type <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo"/>. Internally
            this collection maintains both a List of CellSpanBackgroundInfo and a so called pool. The
            pool allows immediate lookup of cell spans given a cells row and column index. The
            list allows looping through cell spans in the order they were added. <para/>
            CellOverlappSpanInfoCollection is similar to <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1"/> but
            with the difference that it allows overlaps between cell spans. If a cell has
            an overlap and <see cref="!:GetCellSpans"/> is called for this cell all cell spans
            will be returned in a list that contain the specified cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellSpanBackgroundInfoCollection.GetCellSpanBackgrounds(System.Int32,System.Int32)">
            <summary>
            Gets the cell span backgrounds that include
            the specified cells row and column index.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellSpanBackgroundsEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellSpanBackgrounds"/> event which can be
            marked as handled.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellSpanBackgroundsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryCellSpanBackgroundsEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <overload>
            Initalizes a new object.
            </overload>
            <summary>
            Initalizes a new object.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.WinRT.Controls.Grid.GridQueryCellSpanBackgroundsEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,System.Collections.Generic.List{Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo})" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.WinRT.Controls.Grid.GridQueryCellSpanBackgroundsEventArgs.Range" -->
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridConditionType">
            <summary>
            Specifies the type of condition to be used in Conditional Formatting.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridConditionType.Equals">
            <summary>
            Performs an Equals opertion on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridConditionType.NotEquals">
            <summary>
            Performs a NotEquals operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridConditionType.LessThan">
            <summary>
            Performs a LessThan operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridConditionType.LessThanOrEqual">
            <summary>
            Performs a LessThanOrEqual operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridConditionType.GreaterThan">
            <summary>
            Performs a GreatherThan operation on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridConditionType.GreaterThanOrEqual">
            <summary>
            Performs a GreaterThanOrEqual operation on the operands.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCondition.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridConditionalFormat.GetCompiledDelegate(Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.Type)">
            <summary>
            Gets the compiled delegate.
            </summary>
            <param name="type">The Type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridConditionalFormat.Predicate(System.Linq.Expressions.ParameterExpression,System.String,Syncfusion.WinRT.Controls.Grid.GridConditionType,System.Object)">
            <summary>
            Predicates the specified param expression.
            </summary>
            <param name="paramExpression">The Parameter Expression.</param>
            <param name="propertyName">Name of the Property.</param>
            <param name="conditionType">Type of the ondition.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridConditionalFormat.ConvertStringToCondition(System.String)">
            <summary>
            Converts the string to condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridConditionalFormat.Conditions">
            <summary>
            Gets or sets the conditions.
            </summary>
            <value>The conditions.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridConditionalFormat.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridConditionalFormat.Cell">
            <summary>
            Used to change the row and column index in the formula
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.GetRenderStyleInfo(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="!:RenderCellInfoProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.SetRenderStyleInfo(Windows.UI.Xaml.DependencyObject,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Sets the <see cref="!:RenderCellInfoProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.GetCellRenderer(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="!:CellRendererProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.SetCellRenderer(Windows.UI.Xaml.DependencyObject,Syncfusion.WinRT.Controls.Grid.IGridCellRenderer)">
            <summary>
            Sets the <see cref="!:CellRendererProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridControlBase.IgnoreChangedEventProperty">
            <summary>
            Returns the cell renderer of an UIElement inside a cell. When the editor
            inside a cell has children and you query this attached property for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.GetIgnoreChangedEvent(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="!:IgnoreChangeProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridControlBase.DelayLoadProperty">
            <summary>
            Dependency attached property for GetDelayLoad/SetDelayLoad.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.GetDelayLoad(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets a boolean value if the DependencyObject should be loaded with a delay when it is created.
            </summary>
            <param name="dpo">The dpo.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.SetDelayLoad(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets a boolean value if the DependencyObject should be loaded with a delay when it is created. Set this for templated controls.
            </summary>
            <param name="dpo"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.InvalidateRenderCell(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Invalidate cell so that PrepareRenderCell will get called again but not QueryCellStyle.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.GetCellBackground(Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Gets the cell background for a cell from the <see cref="T:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo"/> cell style.
            </summary>
            <param name="ci">The cell style.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.RenderCurrentCellBorder">
            <summary>
            Render current cell border into the dvCurrentCellBorder DrawingVisual of the ScrollControl.ForegroundFrame. This will not trigger any InvalidateVisual or InvalidateArrange calls.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.InvalidateCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Reset cached values for cell and reset any visuals associated with the cell. You need
            to call InvalidateVisual or RenderNow after this method.
            </summary>
            <param name="cellRowColumnIndex"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCancelMode(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CancelMode"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.EnableOleDataSource">
            <summary>
            Enables OLE Data Source support for this control with default support
            for Text and Styles format.
            </summary>
            <returns>True if support was enabled successfully; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.EnableOleDataSource(Syncfusion.WinRT.Controls.Cells.GridDragDropFlags)">
            <summary>
            Enables OLE Data Source support for this control with default support
            for Text and Styles format.
            </summary>
            <param name="flags">See <see cref="T:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags"/> for various flags that customize
            the OLE Data Source behavior of the grid.</param>
            <returns>True if support was enabled successfully; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.EnableOleDropTarget">
            <summary>
            Enables OLE Drop Target support for this control with default support
            for Text and Styles format.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.EnableOleDropTarget(Syncfusion.WinRT.Controls.Cells.GridDragDropFlags)">
            <summary>
            Enables OLE Drop Target support for this control with <see cref="T:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags"/>
            options specified.
            </summary>
            <param name="flags">See <see cref="T:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags"/> for various flags that customize
            the OLE Drop Target behavior of the grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.CreateOleDropTarget(Syncfusion.WinRT.Controls.Grid.GridControlBase,Syncfusion.WinRT.Controls.Cells.GridDragDropFlags)">
            <summary>
            Creates a GridOleDropTarget object and calls GridOleDropTarget.Register. Override this
            method if you want to customize behavior of the GridOleDropTarget object.
            </summary>
            <param name="grid">The grid control</param>
            <param name="flags">Value for DragDropDropTargetFlags</param>
            <returns>returns GridOleDropTarget</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.RegisterDataObjectConsumer(Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer)">
            <summary>
            Registers a <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer"/> with the grid that can participate
            in an OLE Drop Target operation. If you want to add support for custom clipboard formats,
            you should create a class that implements IGridDataObjectConsumer and register it with 
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.RegisterDataObjectConsumer(Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer)"/>.
            </summary>
            <param name="consumer">An <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer"/> to be added to 
            the internal collection of OLE Drop Target consumers.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.RaiseQueryCanOleDragRange(Syncfusion.WinRT.Controls.Grid.GridQueryCanDragRangeEventArgs)">
            <summary>
            Initiates call to <see cref="!:OnQueryCanOleDragRange"/>.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnQueryCanDragRange(Syncfusion.WinRT.Controls.Grid.GridQueryCanDragRangeEventArgs)">
            <summary>
            Raises the <see cref="!:GridControlBase.QueryCanOleDragRange"/> event.
            </summary>
            <param name="e">An <see cref="!:GridQueryCanOleDragRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnWrapCellNextControlInForm(Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.WrapCellNextControlInForm"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.RaiseWrapCellNextControlInForm(Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs)">
            <summary>
            Initiates call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnWrapCellNextControlInForm(Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs)"/>.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnMoveCurrentCellDirection(Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.MoveCurrentCellDirection"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnQueryNextCurrentCellPosition(Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.GetNextCurrentCellPosition(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32@,System.Int32@)">
            <summary>
            Determines the next position for the current cell for a given direction. Normally, cells that are not
            marked as enabled with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Enabled"/> will be skipped but you can hook into this
            mechanism by implementing an event handler for <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/>.
            </summary>
            <param name="direction">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <returns>True if an enabled cell was found; False otherwise.</returns>
            <remarks>
            This method will raise the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> event.
            In your event handler, you can call <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.QueryNextEnabledCell(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32@,System.Int32@)"/> from your QueryNextMoveCell
            event handler to find out about the next enabled cell and then decide on further criteria
            if the suggested cell is good.
            <para/>
            See the SampleGrid class in the gridpad sample for an example.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.MoveNextNotReadOnlyCell(System.Boolean)">
            <summary>
            Find the next editable cell
            </summary>
            <param name="isShift">If set to <see langword="true"/>, then move right to left; otherwise, Move left to right.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellActivating(Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivating"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellActivated">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivated"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellActivateFailed(Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivateFailed"/> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellDeactivating(Syncfusion.WinRT.ComponentModel.SyncfusionCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivating"/> event.
            </summary>
            <param name="e">An <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellDeactivated(Syncfusion.WinRT.Controls.Grid.GridCurrentCellDeactivatedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivated"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellDeactivatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellDeactivateFailed">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivateFailed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellConfirmChangesFailed">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellConfirmChangesFailed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellAcceptedChanges">
            <summary>
            Raises the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellAcceptedChanges"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellChanging(Syncfusion.WinRT.ComponentModel.SyncfusionCancelRoutedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellStartEditing(Syncfusion.WinRT.ComponentModel.SyncfusionCancelRoutedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellStartEditing"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellEditingComplete(Syncfusion.WinRT.ComponentModel.SyncfusionRoutedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellEditingComplete"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellRejectedChanges(Syncfusion.WinRT.ComponentModel.SyncfusionRoutedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellRejectedChanges"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellChanged(Syncfusion.WinRT.ComponentModel.SyncfusionRoutedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellMoved(Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellMoveFailed(Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellMoving(Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoving"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellValidating(Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs)">
            <summary>
            Raises the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellValidating"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.OnCurrentCellValidated(Syncfusion.WinRT.ComponentModel.SyncfusionRoutedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellValidated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CellRenderers">
            <summary>
            Manages the collection of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellRendererBase"/> objects for the current grid view
            method.
            </summary>
            <remarks>
            Cell renderers will be created on demand by calling the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.CreateRenderer"/>.
            Each renderer is associated with a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> object that holds its data and has
            knowledge how to instantiate a renderer and associates it with a grid view.
            <para/>
            A renderer is created for each grid view but
            renderers (of the same cell type) share the same <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> instance even though they belong
            to different grid views.
            </remarks>
            <example>
            The following examples show how to get a reference to the renderer for a specific cell.
            <code lang="C#">
                        GridStyleInfo style = Model[rowIndex, colIndex];
                        GridCellRendererBase renderer = CellRenderers[style.CellType];
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CancelMode">
            <summary>
            Occurs any current user interaction should be cancelled, e.g. cancel select cells when escape key is pressed.
            </summary>
            <remarks>
            WM_CANCELMODE is sent to cancel certain modes, such as mouse capture.
            For example, the system sends this message to the active window when a
            dialog box or message box is displayed. Certain functions also send this
            message explicitly to the specified window regardless of whether it is the
            active window. For example, the EnableWindow function sends this message
            when disabling the specified window.
            </remarks>
            
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.AllowDragDrop">
            <summary>
            Gets or sets a value indicating whether the grid columns can be dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.OleDragDropEventsTarget">
            <summary>
            Gets or sets the OleDragDropEventsTarget. Redirects events defined in <see cref="T:Syncfusion.WinRT.Controls.Cells.IGridOleDragDropEventsTarget"/> to the specified object.
            Each event will first be called on <see cref="T:Syncfusion.WinRT.Controls.Cells.IGridOleDragDropEventsTarget"/> before the actual
            event handler in this control is called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.ExternalMove">
            <summary>
            Used by GridSelectCellsMouseController.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.NavigateWithArrowKeysCellsRange">
            <summary>
            The range of cells in the grid that can be navigated to using arrow keys.
            This range can but does not need to include header and footer rows and columns.
            The default scenario is that header and footer rows and columns are excluded 
            <para/>
            Cells outside the range can still be clicked on and be made the current cell but they
            will be skipped when the user navigate with arrow keys.
            </summary>
            <value>The grid cells range.</value>
            <remarks>
            When the user clicks on a cell it will be made the current cell through
            a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> call when the cell is enabled.
            When the user navigates with arrow keys the next current cell is determined
            by looping in the direction and skipping disabled cells with the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Move(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,System.Boolean,System.Boolean)"/>
            method. The Move method checks this range to determine when to stop searching
            in a given direction.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.ScrollCellsRange">
            <summary>
            The range of cells in the grid that can be scrolled. This excludes
            all frozen rows and columns.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.WrapCellNextControlInForm">
            <summary>
            Occurs before the grid is about to be left because the user is at the top-left or bottom-right
            cell and about to tab out of the grid.
            This event is only raised if the <see cref="F:Syncfusion.WinRT.Controls.Grid.GridWrapCellBehavior.NextControlInForm"/>
            has been specified for <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.WrapCell"/>.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventHandler"/>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivating">
            <summary>
            Occurs before the grid activates the specified cell as current cell.
            </summary>
            <remarks>
            You can disallow the activation of specific cells at run-time when
            you assign True to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>.<para/>
            You can modify the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs.CellRowColumnIndex"/>
            to activate a different cell.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            Once the current cell has been activated, a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivated"/> event
            is raised or a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivateFailed"/> if activating the specified
            cell failed.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            <seealso cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivated">
            <summary>
            Occurs after the grid activates the specified cell as current cell.
            </summary>
            <remarks>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            <seealso cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/>
            
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivateFailed">
            <summary>
            Occurs after the grid fails to activate a specific cell as current cell.
            </summary>
            <remarks>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventArgs"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            <seealso cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/>
            
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivating">
            <summary>
            Occurs before the grid the deactivates the current cell.
            </summary>
            <remarks>
            You can cancel the operation
            by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to True.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            <seealso cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivated">
            <summary>
            Occurs after the grid deactivates current cell.
            </summary>
            <remarks>
            The grid raises this event when the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object's <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            method is called. The event occurs after any <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellRejectedChanges"/>,
             <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellAcceptedChanges"/>, <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellRejectedChanges"/>, or
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellAcceptedChanges"/> are raised.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivateFailed">
            <summary>
            Occurs after the grid fails to deactivate the current cell.
            </summary>
            <remarks>
            The grid raises this event when the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object's <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            method is called and can not deactivate the current cell. The reason deactivation may fail could be
            that the cell's contents were invalid or any of the event handlers associated with deactivating the current cell
            signaled to abort this operation.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellConfirmChangesFailed">
            <summary>
            Occurs when the grid could not save changes made to the active current cell.
            </summary>
            <remarks>
            The grid raises this event when the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object's <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.ConfirmChanges(System.Boolean@,System.Boolean@)"/>
            method is called and its contents were modified and could not be succesfully validated
            or saved back to the data source.
            <para/>
            The <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Exception"/> and <see cref="!:GridCurrentCell.ErrorMessage"/>
            properties provide details why the operation failed. If you want to display a message box
            be sure to reset the the error state with <see cref="!:GridCurrentCell.ResetError"/>.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            <para/>
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellAcceptedChanges">
            <summary>
            Occurs when the grid accepts changes made to the active current cell.
            </summary>
            <remarks>
            The grid raises this cancelable event when the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object's <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.ConfirmChanges(System.Boolean@,System.Boolean@)"/>
            method is called. <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/> and <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.EndEdit"/> call this method when the current cell was in editing mode
            and its contents were modified and validated.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            If you assign true to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>, the grid will not deactivate the current
            cell.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            <para/>
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellChanging">
            <summary>
            Occurs when the user wants to modify contents of the current cell.
            </summary>
            <remarks>
            The grid sends this event before the changes are applied to the active cell. You can cancel the operation
            by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to True.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellStartEditing">
            <summary>
            Occurs before the current cell switches into editing mode.
            </summary>
            <remarks>
            The grid will switch into editing mode when the user presses a key while the cell
            is not in editing mode or when you call <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.BeginEdit"/>.
            You can cancel the operation
            by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to True.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellEditingComplete">
            <summary>
            Occurs when the grid completes editing mode for the active current cell.
            </summary>
            <remarks>
            The grid raises this event when the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object's <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.EndEdit"/>
            or <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CancelEdit"/> method is called. The event occurs after <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellRejectedChanges"/>
            or <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellAcceptedChanges"/> were raised.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellRejectedChanges">
            <summary>
            Occurs when the grid rejects changes made to the active current cell.
            </summary>
            <remarks>
            The grid raises this event when the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object's <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.RejectChanges"/>
            method is called. <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/> and <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CancelEdit"/> call this method when the current cell was in editing mode
            and its contents were modified.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            <para/>
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellChanged">
            <summary>
            Occurs when the user changes contents of the current cell.
            </summary>
            <remarks>
            The grid sends this event whenever changes occur, similar to a <see cref="!:TextBoxBase.ModifiedChanged"/> event.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved">
            <summary>
            Occurs when the current cell has been successfully moved to a new position.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventArgs"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed">
            <summary>
            Occurs when the current cell fails to be moved to a new position.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            <para/>
            <see cref="!:GridCurrentCell.ErrorMessage"/> might hold an error message
            why the operation failed.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventArgs"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoving">
            <summary>
            Occurs when the current cell is about to be moved to a new position.
            </summary>
            <remarks>
            You can disallow the activataion of specific cells at run-time when
            you assign True to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>.
            <para/>
            You can modify the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs.CellRowColumnIndex"/>
            to activate a different cell.
            <para/>
            You can also modify the <see cref="!:GridCurrentCellActivatingEventArgs.Options"/>.
            <para/>
            Once the current cell has been moved, a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved"/> event
            is raised or a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed"/> if moving to the specified
            target cell failed.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventArgs"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellValidating">
            <summary>
            Occurs when the grid validates contents of the active current cell.
            </summary>
            <remarks>
            You can mark the contents as invalid by by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to True.<para/>
            The grid raises this event when the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object's <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Validate(System.Boolean@,System.Boolean@)"/>
            method is called. <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/> calls this method when the current cell was in editing mode
            and its contents were modified.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellValidated">
            <summary>
            Occurs when the grid has successfully validated the contents of the active current cell.
            </summary>
            <remarks>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            You can find out about the current cell's position by querying the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex"/>
            property of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCell"/> object
            in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellKeyDown">
            <summary>
            Occurs during the PreviewKeyDown event for the current cell.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.AllowDragColumns">
            <summary>
            Gets or sets a value indicating whether the grid columns can be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridControlBase.GridSelectionMarkerLocation.None">
            <summary>
            Represents None
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridControlBase.GridSelectionMarkerLocation.Default">
            <summary>
            Represents Default
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridControlBase.GridSelectionMarkerLocation.Top">
            <summary>
            Represents Top
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridControlBase.GridSelectionMarkerLocation.Left">
            <summary>
            Represents Left
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridControl.ValidateLicense">
            <summary>
            Checks whether license is valid.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridControl.IsSecurityGranted">
            <summary>
            Checks whether security permission can be granted. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfoDictionary">
            <summary>
            A class that emulates a Dictionary API and contains GridRenderStyleInfo objects.
            Internally rows are held in a dictionary and each row has a dictionary of cells.
            The class also provides support for adding, removing and moving rows and 
            columns.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfoDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfoDictionary"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfoDictionary.OnMovedCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Called from <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/> when a cell
            is moved after a InsertRows, RemoveRows, InsertColumns or RemoveColumns
            method call.
            </summary>
            <param name="cellRowColumnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfoDictionary.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo)">
            <summary>
            Called when from <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/> when a cell
            is removed either by a RemoveRows, RemoveColumns, Remove or RemoveAll call.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCoveredCellInfoCollection">
            <summary>
            A collection with elements derived from type <see cref="T:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo"/>. It implements <see cref="T:Syncfusion.WinRT.Controls.Cells.ICoveredCellsProvider"/>. Internally
            this collection maintains both a List of CoveredCellInfo and a so called pool. The
            pool allows immediate lookup of cell spans given a cells row and column index. The
            list allows looping through cell spans in the order they were added. GridCoveredCellInfoCollection
            assumes that there is no overlap between cell spans. For any given cell there only 
            at most one cell span must exist. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCoveredCellInfoCollection.GetCoveredCell(System.Int32,System.Int32)">
            <summary>
            Gets a covered cell from the <see cref="!:CoveredCellsProvider"/> that includes
            the specified cells row and column index.
            </summary>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCoveredCellInfoCollection.Find(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridRangeInfo@)">
            <summary>
            Gets a covered cell from the <see cref="!:CoveredCellsProvider"/> that includes
            the specified cells row and column index or if there is no covered range for the cell
            the method returns a cell range for the given row and column index.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="coveredRange">The resulting covered range. If there is no covered range for the cell
            this range will return GridRangeInfo.Cell(rowIndex, columnIndex)</param>
            <returns>
            true if a covered cell was found; otherwise false.
            </returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryCoveredRangeEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCoveredRange"/> event which can be
            marked as handled.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryCoveredRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryCoveredRangeEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <overload>
            Initalizes a new object.
            </overload>
            <summary>
            Initalizes a new object.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryCoveredRangeEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.CoveredCellInfo)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <param name="range">A <see cref="T:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo"/> that will receive the resulting range for the covered cell.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryCoveredRangeEventArgs.Range">
            <summary>
            A <see cref="T:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo"/> that will receive the resulting range for the covered cell.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveDelegateHandler">
            <summary>
            Used by GridSelectCellsMouseController.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Initializes the object, attaches it to a grid, and subscribes to events.
            </summary>
            <param name="grid">The parent grid for this object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Lock">
            <summary>
            Lets you temporarily "lock" the current cell. While a current cell
            is locked, any attempts to move, deactivate, save, or activate the current
            cell will fail.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Unlock">
            <summary>
            Unlocks a temporarily "locked" current cell with <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Lock"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.UpdateCellRowColumnIndex(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Updates the cell's row and column indices with the given value.
            </summary>
            <param name="cellRowColumnIndex">The new row and column indices as <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsValidCellRowColumnIndex(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Checks if the specified row and column indices are valid.
            </summary>
            <param name="cellRowColumnIndex">The row and column indices as <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.</param>
            <returns>True if it is valid; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.GetCurrentCell(System.Int32@,System.Int32@)">
            <summary>
            Returns position of the current cell together with a boolean if the current cell is active or not.
            </summary>
            <param name="rowIndex">The row index of the current cell.</param>
            <param name="columnIndex">The column index of the current cell.</param>
            <returns>True if grid has active current cell; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.GetCurrentCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex@)">
            <summary>
            Returns position of the current cell together with a boolean if the current cell is active or not.
            </summary>
            <param name="cellRowColumnIndex">The row and column indices of the current cell as <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.</param>
            <returns>True if grid has active current cell; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.HasCurrentCellAt(System.Int32,System.Int32)">
            <summary>
            Checks if the current cell is active and at the specific row and column index.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="columnIndex">The column index.</param>
            <returns>True if current cell was found at row and column indices; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.HasCurrentCellAt(System.Int32)">
            <summary>
            Checks if the current cell is active and at the specific row index.
            </summary>
            <param name="rowIndex">The row index.</param>
            <returns>True if current cell was found at row index; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.HasCurrentCellAt(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Checks if the current cell is active at the specified <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.
            </summary>
            <param name="cellRowColumnIndex">The row and column index as <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.</param>
            <returns>True if current cell was found at the given <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.HasCurrentCellAt(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Checks if the current cell is active at the specific range.
            </summary>
            <param name="range">The cell range.</param>
            <returns>True if current cell was found at the given range; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)">
            <summary>
            Activates the current cell at the specified position.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="columnIndex">The column index.</param>
            <returns>True if activating the current cell was successful; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions)">
            <summary>
            Activates the current cell at the specified position.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="columnIndex">The column index.</param>
            <param name="activateOptions">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions"/> value that details options how to
            activate the current cell. You can specify if the associated control should get focus, if range
            selection should be ignored and more.</param>
            <returns>True if activating the current cell was successful; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions)">
            <summary>
            Activates the current cell at the specified position.
            </summary>
            <param name="cellRowColumnIndex">The cell's row column index as <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.</param>
            <param name="activateOptions">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions"/> value that details options how to
            activate the current cell. You can specify if the associated control should get focus, if range
            selection should be ignored and more.</param>
            <returns>True if activating the current cell was successful; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate">
            <summary>
            Deactivates the current cell and confirms or rejects changes made to the current cell.
            </summary>
            <returns>True if current cell can be deactivated; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate(System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Deactivates the current cell and confirms or rejects changes made to the current cell.
            </summary>
            <param name="discardChangesIfCommitFails">True if changes can be discarded; False otherwise.</param>
            <returns>True if current cell can be deactivated; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.ConfirmChanges(System.Boolean@,System.Boolean@)">
            <summary>
            Confirms any pending changes for the current cell and closes any open drop-down windows.
            </summary>
            <returns>True if changes could be saved or if current cell was not modified; False if saving the changes
            failed.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.RejectChanges">
            <summary>
            Discards any changes for the current cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CreateCurrentCellUIElements">
            <summary>
            Creates the UI elements of current cell.
            </summary>
            <returns>True if the operation was successful; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.UnloadCurrentCellUIElement">
            <summary>
            Disposes the UI element of current cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Refresh">
            <summary>
            Refreshes the current cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.BeginEdit">
            <summary>
            Starts editing mode for the current cell.
            </summary>
            <returns>True if current cell supports editing; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.BeginEdit(System.Boolean)">
            <summary>
            Starts editing mode for the current cell and allows setting the focus to the cell editor.
            </summary>
            <param name="focusCellUIElement">Specifies if focus can be set to the cell editor.</param>
            <returns>True if current cell supports editing; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CancelEdit">
            <summary>
            Cancels editing for the current cell and discards any changes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CancelEdit(System.Boolean)">
            <summary>
            Cancels editing for the current cell and discards any changes.
            </summary>
            <param name="setGridFocus">When true, the focus will be set to the grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.EndEdit">
            <summary>
            Finished up editing mode for the current cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.NotifyChanging">
            <summary>
            Indicates that the current cell is being changed.
            </summary>
            <returns>The boolean value NotifyChanging</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.NotifyChanged">
            <summary>
            Signifies the current cell change.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current cell to the specified position.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="columnIndex">The column index.</param>
            <returns>True if the current cell could be moved; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions,System.Boolean@)">
            <summary>
            Moves the current cell to the specified position.
            </summary>
            <param name="cellRowColumnIndex">The row and column indices as <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.</param>
            <param name="activateOptions">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions"/> value that details options how to
            activate the current cell. You can specify if the associated control should get focus, if range
            selection should be ignored and more.</param>
            <returns>True if the current cell could be moved; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Moves the current cell to the specified position.
            </summary>
            <param name="cellRowColumnIndex">The row and column indices as <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.</param>
            <returns>True if the current cell could be moved; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions,System.Boolean@)">
            <summary>
            Moves the current cell to the specified position.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="columnIndex">The column index.</param>
            <param name="activateOptions">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions"/> value that details options how to
            activate the current cell. You can specify if the associated control should get focus, if range
            selection should be ignored and more.</param>
            <returns>True if the current cell could be moved; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveDown">
            <overload>
            Moves the current cell down and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell down to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveDown(System.Int32)">
            <summary>
            Moves the current cell down to the next enabled row after skipping a specified number of rows.
            </summary>
            <param name="num">The number of rows to move.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveDown(System.Int32,System.Boolean)">
            <summary>
            Moves the current cell down to the next enabled row after skipping a specified number of rows and selects the
            cells.
            </summary>
            <param name="num">The number of rows to move.</param>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveUp">
            <overload>
            Moves the current cell up and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell up to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveUp(System.Int32)">
            <summary>
            Moves the current cell up to the next enabled row after skipping a specified number of rows.
            </summary>
            <param name="num">The number of rows to move.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveUp(System.Int32,System.Boolean)">
            <summary>
            Moves the current cell up to the next enabled row after skipping a specified number of rows and selects the
            cells.
            </summary>
            <param name="num">The number of rows to move.</param>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveLeft">
            <overload>
            Moves the current cell left and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell left to the next enabled column.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveLeft(System.Int32)">
            <summary>
            Moves the current cell left to the next enabled column after skipping a specified number of columns.
            </summary>
            <param name="num">The number of columns to move.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveLeft(System.Int32,System.Boolean)">
            <summary>
            Moves the current cell left to the next enabled column after skipping a specified number of columns and selects the
            cells.
            </summary>
            <param name="num">The number of columns to move.</param>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveRight">
            <overload>
            Moves the current cell right and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell right to the next enabled column.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveRight(System.Int32)">
            <summary>
            Moves the current cell right to the next enabled column after skipping a specified number of columns.
            </summary>
            <param name="num">The number of columns to move.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveRight(System.Int32,System.Boolean)">
            <summary>
            Moves the current cell right to the next enabled column after skipping a specified number of columns and selects the
            cells.
            </summary>
            <param name="num">The number of columns to move.</param>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageUp">
            <overload>
            Moves the current cell up one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell up one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageUp(System.Boolean)">
            <summary>
            Moves the current cell up one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageDown">
            <overload>
            Moves the current cell down one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageDown(System.Boolean)">
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageLeft">
            <overload>
            Moves the current cell left one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell left one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageLeft(System.Boolean)">
            <summary>
            Moves the current cell left one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageRight">
            <overload>
            Moves the current cell right one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell right one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.PageRight(System.Boolean)">
            <summary>
            Moves the current cell right one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToRightEnd">
            <overload>
            Moves the current cell down one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToRightEnd(System.Boolean)">
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToBottom">
            <overload>
            Moves the current cell down one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToBottom(System.Boolean)">
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToLeftEnd">
            <overload>
            Moves the current cell down one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToLeftEnd(System.Boolean)">
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToTop">
            <overload>
            Moves the current cell down one page and optionally selects cells.
            </overload>
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <remarks>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToTop(System.Boolean)">
            <summary>
            Moves the current cell down one page to the next enabled row.
            </summary>
            <param name="extendSelection">Extends the current selection.</param>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Move(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,System.Boolean,System.Boolean)">
            <overload>
            Moves the current cell in a given direction skipping a specified number of cells and
            optionally selecting the cells.
            </overload>
            <summary>
            Moves the current cell in a given direction skipping a specified number of cells and
            optionally selecting the cells.
            </summary>
            <param name="direction">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.</param>
            <param name="num">The number of cells to move.</param>
            <param name="extendSelection">Extends the current selection.</param>
            <param name="wrapCell">Indicates if grid should move to beginning of next row when at end of row or vice versa.</param>
            <returns>True if the current cell was moved to a new position; False otherwise (e.g. if current cell is at first row
            and you tried to move up).</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Move(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,System.Boolean)">
            <summary>
            Moves the current cell in a given direction skipping a specified number of cells and
            optionally selecting the cells.
            </summary>
            <param name="direction">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.</param>
            <param name="num">The number of cells to move.</param>
            <param name="extendSelection">Extends the current selection.</param>
            <returns>True if the current cell was moved to a new position; False otherwise (e.g. if current cell is at first row
            and you tried to move up).</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.InternalMove(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions)">
            <summary>
            Moves the current cell in a given direction skipping a specified number of cells and
            without selecting the cells. <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Move(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,System.Boolean,System.Boolean)"/> for a method that
            also selects cells.
            </summary>
            <param name="direction">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.</param>
            <param name="num">The number of cells to move.</param>
            <param name="options">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSetCurrentCellOptions"/> that specifies the options for current cell movement.</param>
            <returns>True if this operation successfully completes.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.QueryNextEnabledCell(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32@,System.Int32@)">
            <summary>
            Determines the next enabled cell when current cell wants to move into a given direction. Cells that are not
            marked as enabled with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Enabled"/> will be skipped. The search in a given
            direction is aborted when the row or column index hits the boundaries of the
            <see cref="P:Syncfusion.WinRT.Controls.Grid.GridControlBase.NavigateWithArrowKeysCellsRange"/> range.
            </summary>
            <param name="direction">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.</param>
            <param name="rowIndex">The row index.</param>
            <param name="columnIndex">The column index.</param>
            <returns>
            True if an enabled cell was found; False otherwise.
            </returns>
            <remarks>
            This method will not raise the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> event. Instead
            you can call this method from your QueryNextMoveCell event handler to find out about the next
            enabled cell and then decide on further criteria if the suggested cell is good.
            <para/>
            You should call <see cref="M:Syncfusion.WinRT.Controls.Grid.GridControlBase.GetNextCurrentCellPosition(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32@,System.Int32@)"/> instead if you want
            the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> event to be raised.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.AdjustRowColIfCoveredCell(System.Int32@,System.Int32@)">
            <summary>
            Adjusts the row index and column index if the cell belongs to a covered range. In that case, the top
            left cell coordinates are returned.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.InsertRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState)">
            <summary>
            Insert a specified number of rows at a specified row index.
            </summary>
            <param name="insertAtRowIndex">The starting row index where new rows should be inserted.</param>
            <param name="count">The number of rows to insert.</param>
            <param name="moveState">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.RemoveRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState)">
            <summary>
            Removes a specified number of rows at a specified row index.
            </summary>
            <param name="removeAtRowIndex">The starting row index where columns should be removed.</param>
            <param name="count">The number of rows to remove.</param>
            <param name="moveState">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.InsertColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState)">
            <summary>
            Insert a specified number of columns at a specified column index.
            </summary>
            <param name="insertAtColumnIndex">The starting column index where new columns should be inserted.</param>
            <param name="count">The number of columns to insert.</param>
            <param name="moveState">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.RemoveColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState)">
            <summary>
            Removes a specified number of columns at a specified column index.
            </summary>
            <param name="removeAtColumnIndex">The starting column index where columns should be removed.</param>
            <param name="count">The number of columns to remove.</param>
            <param name="moveState">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.SuspendEvents">
            <summary>
            Suspends raising events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.ResumeEvents">
            <summary>
            Resumes raising events.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveToRowIndex">
            <summary>
            Gets the index of the move to row.
            </summary>
            <value>The index of the move to row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveFromActiveState">
            <summary>
            Gets a value indicating whether there was an activated current cell
            at the time that <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveFromRowIndex">
            <summary>
            Gets the saved row index information about the previous position of the current cell
            at the time that <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveFromColIndex">
            <summary>
            Gets the saved column index information about the previous position of the current cell
            at the time that <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsLocked">
            <summary>
            Determines if the current cell's state is "locked". If the current cell
            is locked, any attempts to move, deactivate, save, or activate the current
            cell will fail.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.RangeInfo">
            <summary>
            The row and column index of the current cell as a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/>.
            </summary>
            <remarks>
            Changing this property will trigger a call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>. When the
            value is <see cref="F:Syncfusion.WinRT.Controls.Grid.GridRangeInfo.Empty"/>, the current cell will be deactivated.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.RowIndex">
            <summary>
            The row index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.ColumnIndex">
            <summary>
            The column index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CellRowColumnIndex">
            <summary>
            The row and column index of the current cell as a <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/>.
            </summary>
            <remarks>
            Changing this property will trigger a call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>. When the
            value is <see cref="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.Empty"/>, the current cell will be deactivated.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.HasCurrentCell">
            <summary>
            Gets a value indicating whether the grid has an active current cell.
            </summary> 
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Grid">
            <summary>
            The parent grid.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Renderer">
            <summary>
            The cell renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInActivateOrDeactivate">
            <summary>
            Returns whether <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/> or <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            is in progress.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInActivate">
            <summary>
            Returns whether <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            is in progress.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInActivated">
            <summary>
            Gets a value indicating whether IsInActivated.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInActivateFailed">
            <summary>
            Gets a value indicating whether IsInActivateFailed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInDeactivateFailed">
            <summary>
            Returns whether IsInDeactivateFailed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInDeactivated">
            <summary>
            Gets a value indicating whether IsInDeactivated.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInDeactivate">
            <summary>
            Gets a value indicating whether <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/> is in progress.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInConfirmChanges">
            <summary>
            Gets a value indicating whether IsInConfirmChanges.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInAcceptedChanges">
            <summary>
            Gets a value indicating whether IsInAcceptedChanges.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInRejectChanges">
            <summary>
            Gets a value indicating whether IsInRejectChanges.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInRefresh">
            <summary>
            Gets a value indicating whether IsInRefresh.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsEditing">
            <summary>
            Gets a value indicating whether the current cell is in editing mode.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInBeginEdit">
            <summary>
            Returns true when <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.BeginEdit"/> was called; False after method returned.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInCancelEdit">
            <summary>
            Returns true when <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.CancelEdit"/> was called; False after method returned.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInEndEdit">
            <summary>
            Gets a value indicating whether IsInEndEdit.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsModified">
            <summary>
            Gets or sets a value indicating whether there are pending changes in the current cell.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInChanging">
            <summary>
            Indicates if the current cell's <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellChanging"/> event
            is being handled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInChanged">
            <summary>
            Indicates if the current cell's <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellChanging"/> event
            is being handled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo">
            <summary>
            Gets a value indicating whether <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> is in progress. MoveTo saves information
            about the current cell state and its target cell so that events can more easily compare
            previous and new states of the current cell during <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> calls.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoved">
            <summary>
            Gets a value indicating whether IsInMoved.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveFailed">
            <summary>
            Gets a value indicating whether IsInMoveFailed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsValid">
            <summary>
            Returns success of the latest <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Validate(System.Boolean@,System.Boolean@)"/> method call.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Exception">
            <summary>
            Holds the details of any exceptin that has been caught during current cell operations.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsDroppedDown">
            <summary>
            Gets a value indicating whether the drop-down window of a current cell is dropped-down.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMove">
            <summary>
            Gets a value indicating whether <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Move(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,System.Boolean,System.Boolean)"/> is in progress.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.ExternalMove">
            <summary>
            Used by GridSelectCellsMouseController.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsSuspendEvents">
            <summary>
            Checks if raising events is temporarily disabled.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState">
            <summary>
            Represents the state of the current cell's movement.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState.MoveFrom">
            <summary>
            Index from which the current cell is moved.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState.MoveTo">
            <summary>
            Index to which the current cell is moved.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState.Index">
            <summary>
            Current cell index.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveState.KeyMove">
            <summary>
            Specifies if the current cell's movement is caused by a key press.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventHandler">
            <summary>
            Represents a method that handles a cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivating"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs">
            <summary>
            Provides data about the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivating"/> event
            before the grid activates the specified cell as current cell.
            </summary>
            <remarks>
            You can disallow the activation of specific cells at run-time when
            you assign True to <see cref="!:CancelEventArgs.Cancel"/>.<para/>
            You can modify the <see cref="!:GridCurrentCellActivatingEventArgs.RowIndex"/>
            and <see cref="!:GridCurrentCellActivatingEventArgs.ColIndex"/> to activate
            a different cell.
            <para/>
            You can determine if <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            was called stand-alone or as result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            call by checking the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/> property.
            <para/>
            Once the current cell has been activated, a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivated"/> event
            is raised or a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivateFailed"/> if activating the specified
            cell failed.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivating"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            <seealso cref="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.IsInMoveTo"/>
            
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivatingEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions)">
            <summary>
            Initalizes a new object.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventHandler">
            <summary>
            Represents a method that handles a cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivateFailed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellActivateFailed"/> event.
            </summary>
            <remarks>
            The GridCurrentCellActivateFailedEventArgs is a custom event argument class used by the
            GridCurrentCell.CurrentCellActivateFailed"/&gt; event that notifies you
            that the current cell could not be activated at the specified cell position.
            <para/>
            <see cref="!:GridCurrentCell.ErrorMessage"/> may hold an error message
            why the operation failed.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventHandler"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventArgs.cellRowColumnIndex">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCellActivateFailedEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Initalizes a new object.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellDeactivatedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivated"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellDeactivatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellDeactivatedEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivated"/> event.
            </summary>
            <remarks>
            The GridCurrentCellDeactivatedEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellDeactivated"/> event that notifies you
            that the current cell has been deactivated at the specified cell position.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellDeactivatedEventHandler"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellEventArgs">
            <summary>
            Holds row and column coordinates for events associated with a specific cell.
            </summary>
            <remarks>
            Directly used by <see cref="!:GridCellModelBase.ActiveTextChanged"/>, <see cref="!:GridCellButton.Clicked"/>, <see cref="!:GridCellButton.HoveringChanged"/>,
            <see cref="!:GridCellButton.MouseDownChanged"/>, and <see cref="!:GridCellButton.PushedChanged"/>.
            <para/>
            Used also as base class for several other events related to a specific cell.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCellEventArgs.cellRowColumnIndex">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Initalizes a new object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCellDeactivatedEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellEventHandler">
            <summary>
            Represents a method that handles events associated with a specific cell.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved"/> event
            after the current cell was succesfully moved to a new position.
            </summary>
            <remarks>
            GridCurrentCellMovedEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved"/> event when the current cell
            has been succesfully moved to a new position.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="options">The options specified for the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            operation.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovedEventArgs.Options">
            <summary>
            The options specified for the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            operation.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed"/> event
            when the current cell fails to be moved to a new position.
            </summary>
            <remarks>
            GridCurrentCellMoveFailedEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed"/> event when the current cell 
            fails to be moved to a new position.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            <para/>
            <see cref="!:GridCurrentCell.ErrorMessage"/> may hold an error message
            why the operation failed.
            </remarks>
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <param name="options">The options specified for the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            operation.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMoveFailedEventArgs.Options">
            <summary>
            The options specified for the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            operation.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventHandler">
            <summary>
            Represents a method that handles the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoving"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventArgs">
            <summary>
            Provides data about the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoving"/> event
            before the current cell is moved to a new position as a result from a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            method call.
            </summary>
            <remarks>
            The GridCurrentCellMovingEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoving"/> event when the current cell
            is about to be moved to a new position.
            You can disallow the activataion of specific cells at run-time when
            you assign true to <see cref="!:CancelEventArgs.Cancel"/>.
            <para/>
            You can modify the <see cref="!:GridCurrentCellActivatingEventArgs.RowIndex"/>
            and <see cref="!:GridCurrentCellActivatingEventArgs.ColIndex"/> to activate
            a different cell.
            <para/>
            You can also modify the <see cref="!:GridCurrentCellActivatingEventArgs.Options"/>.
            <para/>
            Once the current cell has been moved, a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoved"/> event
            is raised or a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoveFailed"/> if moving to the specified
            target cell failed.
            <para/>
            See <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/> for a discussion about the
            order of events that you receive when the current cell is moved.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.CurrentCellMoving"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCellMovingEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridActivateCurrentCellOptions)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <param name="options">The options specified for the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.MoveTo(System.Int32,System.Int32)"/>
            operation.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer">
            <summary>
            Interface to create ObjectConsumer for IDataObject
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer.QueryAcceptData(Syncfusion.WinRT.Controls.Cells.GridDataObject,Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer)">
            <summary>
            Queries the DataObject consumer if it knows how to handle the IDataObject.
            </summary>
            <param name="dataObject">Provides data to be consumed.</param>
            <param name="consumer">Another consumer that is capable of reading the data. Might be NULL.</param>
            <param name="options">Reserved for future use.</param>
            <returns>True if this consumer is able to read the data from <paramref name="dataObject"/>.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer.DetermineRowColCount(Syncfusion.WinRT.Controls.Cells.GridDataObject)">
            <summary>
            Queries the dimension in rows and columns of the data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>returns size</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer.DropAtRowCol(Syncfusion.WinRT.Controls.Cells.GridDataObject,System.Int32,System.Int32)">
            <summary>
            Paste the contents of the data object at the specified cell coordinates.
            </summary>
            <param name="dataObject">Provides data to be consumed.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <returns>True if successful; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer.Name">
            <summary>
            Gets the name of the DataObject consumer.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSubComponent">
            <summary>
            A base class for objects that are associated with a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>
            </summary>  
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridSubComponent.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSubComponent"/> and associates it with a grid.
            </summary>
            <param name="grid">The grid control this object is associated with.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridSubComponent.Grid">
            <summary>
            Gets the grid control this object is associated with.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridTextDataObjectConsumer">
            <summary>
            Implements a DataObject consumer for text data. Will handle data provided in DataFormats.Text and DataFormats.UnicodeText format.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTextDataObjectConsumer.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridTextDataObjectConsumer"/> object and associates it with a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            </summary>
            <param name="grid">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> this object should be associated with.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTextDataObjectConsumer.QueryAcceptData(Syncfusion.WinRT.Controls.Cells.GridDataObject,Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer)">
            <summary>
            Queries the DataObject consumer if it knows how to handle the IDataObject.
            </summary>
            <param name="dataObject">Provides data to be consumed.</param>
            <param name="consumer">Another consumer that is capable of reading the data. Might be NULL.</param>
            <param name="options">Reserved for future use.</param>
            <returns>True if this consumer is able to read the data from <paramref name="dataObject"/>.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTextDataObjectConsumer.DetermineRowColCount(Syncfusion.WinRT.Controls.Cells.GridDataObject)">
            <summary>
            Queries the dimension in rows and columns of the data object.
            </summary>
            <param name="dataObject">Data object.</param>
            <returns>returns Dimension.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTextDataObjectConsumer.DropAtRowCol(Syncfusion.WinRT.Controls.Cells.GridDataObject,System.Int32,System.Int32)">
            <summary>
            Paste the contents of the data object at the specified cell coordinates.
            </summary>
            <param name="dataObject">Provides data to be consumed.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <returns>True if successful; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridTextDataObjectConsumer.Name">
            <summary>
            Gets the name of the DataObject consumer.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridDataDataObjectConsumer">
            <summary>
            Implements a DataObject consumer for serialized GridCellData. Checks if the provided data are of type <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellData"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridDataDataObjectConsumer.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDataDataObjectConsumer"/> object and associates it with a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/>.
            </summary>
            <param name="grid">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> this object should be associated with.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridDataDataObjectConsumer.QueryAcceptData(Syncfusion.WinRT.Controls.Cells.GridDataObject,Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer)">
            <summary>
            Queries the DataObject consumer if it knows how to handle the IDataObject.
            </summary>
            <param name="dataObject">Provides data to be consumed.</param>
            <param name="consumer">Another consumer that is capable of reading the data. Might be NULL.</param>
            <param name="options">Reserved for future use.</param>
            <returns>True if this consumer is able to read the data from <paramref name="dataObject"/>.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridDataDataObjectConsumer.DetermineRowColCount(Syncfusion.WinRT.Controls.Cells.GridDataObject)">
            <summary>
            Queries the dimension in rows and columns of the data object.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>returns Dimension.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridDataDataObjectConsumer.DropAtRowCol(Syncfusion.WinRT.Controls.Cells.GridDataObject,System.Int32,System.Int32)">
            <summary>
            Paste the contents of the data object at the specified cell coordinates.
            </summary>
            <param name="dataObject">Provides data to be consumed.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <returns>True if successful; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridDataDataObjectConsumer.Name">
            <summary>
            Gets the name of the DataObject consumer.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget">
            <summary>
            Implements the DropTarget part for OLE drag-and-drop operations. You can add support for additional data formats
            by creating a class that implements IGridDataObjectConsumer.
            </summary> 
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.IGridOleDragDropEventsTarget">
            <summary>
            Defines an interface for an object that handles Ole Drag Drop events raised by <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> objects.
            </summary> 
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IGridOleDragDropEventsTarget.OnDragDrop(Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs)">
            <summary>
            Occurs when a drag-and-drop operation is completed and before <see cref="!:Control.DragDrop"/> event is raised.
            </summary>
            <param name="e"><see cref="T:Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs"/> containing data related to this event</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IGridOleDragDropEventsTarget.OnDragEnter(Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs)">
            <summary>
            Occurs when an object is dragged into the control's bounds and before <see cref="!:Control.DragEnter"/> event is raised.
            </summary>
            <param name="e"><see cref="T:Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs"/> containing data related to this event</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IGridOleDragDropEventsTarget.OnDragLeave(System.EventArgs)">
            <summary>
            Occurs when an object is dragged out of the control's bounds and before <see cref="!:Control.DragLeave"/> event is raised.
            </summary>
            <param name="e"><see cref="T:Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs"/> containing data related to this event</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IGridOleDragDropEventsTarget.OnDragOver(Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs)">
            <summary>
            Occurs when an object is dragged over the control's bounds and before <see cref="!:Control.DragOver"/> event is raised.
            </summary>
            <param name="e"><see cref="T:Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs"/> containing data related to this event</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget"/>.
            </summary>
            <param name="grid">The grid control.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.Register(Syncfusion.WinRT.Controls.Cells.GridDragDropFlags)">
            <summary>
            Sets grid.Model.Options.DragDropDropTargetFlags 
            </summary>
            <param name="flags">Value for DragDropDropTargetFlags.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.Dispose(System.Boolean)">
            <summary>
            Disposes objects on release
            </summary>
            <param name="disposing">Should Dispose</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.RegisterConsumer(Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer)">
            <summary>
            Adds a IGridDataObjectConsumer.
            </summary>
            <param name="consumer">A <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer"/> object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.UnregisterConsumer(Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer)">
            <summary>
            Removes a IGridDataObjectConsumer.
            </summary>
            <param name="consumer">A <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer"/> object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.OnDragEnter(Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs)">
            <implement/>
            <summary>Occurs when an object is dragged into the control's bounds.</summary>
            <param name="drgevent">A <see cref="!:DragEventArgs"/> holding the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.EnableEdgeScrolling(Syncfusion.WinRT.Controls.Scroll.AutoScrollOrientation)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.QueryAcceptData(Syncfusion.WinRT.Controls.Cells.GridDataObject)">
            <summary>
            Queries the accept data.
            </summary>
            <param name="dataObject">The data object.</param>
            <returns>returns IGridDataObjectConsumer</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.OnDragDrop(Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs)">
            <implement/>
            <summary>
            Occurs when a drag-drop operation is completed.
            </summary>
            <param name="drgevent">A <see cref="!:DragEventArgs"/> holding the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.OnDragLeave(System.EventArgs)">
            <implement/>
            <summary>Occurs when an object is dragged out of the control's bounds.</summary>
            <param name="e">An EventArgs that holds the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.OnDragOver(Syncfusion.WinRT.Controls.Cells.SyncfusionDragEventArgs)">
            <implement/>
            <summary>Occurs when an object is dragged over the control's bounds.</summary>
            <param name="drgevent">A <see cref="!:DragEventArgs"/> holding event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.DropDataAtRowCol(Syncfusion.WinRT.Controls.Cells.GridDataObject,System.Int32,System.Int32)">
            <summary>
            Drops the data at row col.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>returns boolean value</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropTarget.OutlineDropTargetRange(Windows.Foundation.Point,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridWrapCellBehavior">
            <summary>
            Controls what the grid does when a last or first column in a row.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridWrapCellBehavior.None">
            <summary>
            Don't move current cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridWrapCellBehavior.WrapRow">
            <summary>
            Move to first column in next row or last column in previous row.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridWrapCellBehavior.WrapGrid">
            <summary>
            When at the last row and last column, move to first row and column or vice versa.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridWrapCellBehavior.NextControlInForm">
            <summary>
            When at the last row and last column activate next sibling control in the dialog 
            or when when at first row and column activate previous sibling control in dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType">
            <summary>
               <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> is used in various grid methods to specify direction of a movement.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.None">
            <summary>
            No movement specified, use default behavior.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.Up">
            <summary>
            Move up.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.Left">
            <summary>
            Move to left.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.Down">
            <summary>
            Move down.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.Right">
            <summary>
            Move to right.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.PageDown">
            <summary>
            Page down.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.PageUp">
            <summary>
            Page up.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.Top">
            <summary>
            Go to top.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.Bottom">
            <summary>
            Go to bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.MostLeft">
            <summary>
            Go to most left.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.MostRight">
            <summary>
            Got to most right.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.TopLeft">
            <summary>
            Go to top-left corner.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.BottomRight">
            <summary>
            Got to bottom-right corner.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.PageRight">
            <summary>
            Page down.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridDirectionType.PageLeft">
            <summary>
            Page up.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions">
            <summary>
            Specifies options for a ResizeColumnsToFit or ResizeRowsToFit method call. <para/>
            The options can be combined.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions.None">
            <summary>
            Uses default behavior for resizing cells to fit contents. Ignores covered cells, does shrink size, does not include headers.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions.ResizeCoveredCells">
            <summary>
            Include covered cells for resizing cells. When using this mode, only the last row or column 
            of a covered range is resized.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions.NoShrinkSize">
            <summary>
            Do not shrink size of cells.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions.IncludeHeaders">
            <summary>
            Include also row or column header for resizing the cells.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions.IncludeCellsWithinCoveredRange">
            <summary>
            ResizeCoveredCells mode only resizes the last row or column of a covered range. Use this option
            to also resize the columns or rows before the last one.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions.IncludeHiddenCells">
            <summary>
            Include hidden rows in row or column resizing behavior
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventHandler">
            <summary>
            Represents the method that handles the<see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardPaste"/>, <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanPaste"/>, 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCut"/>, <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCut"/>, 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCopy"/>, and <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCopy"/> 
            events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs">
            <summary>
            Provides data about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/>: 
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Paste"/>
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanPaste"/>
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Cut"/>
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanCut"/>
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Copy"/> and 
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanCopy"/>
            events.
            </summary>
            <remarks>
            GridCutPasteEventArgs is a custom event argument class used by the
            <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> operations in a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            <para/>
            This event lets you supply your own clipboard formats or add support for pasting additional clipboard content.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs.dataObject">
            <summary>
            For hold the the Clipboard information
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs.rangeList">
            <summary>
            Its contain the range of cells cut or copied
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> object.
            </summary>
            <param name="rangeList">You can save here a list of ranges that have been copied.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs.DataObject">
            <summary>
            Gets or sets the DataObject to be used for further clipboard operations. This property will only be checked by the calling
            method if you do not set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to true. Can be NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs.RangeList">
            <summary>
            Gets or sets range list. You can save here a list of ranges that have been copied. This property will only be checked for the
            Copy operation. Can be NULL.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs.GridCutPasteEventHandler">
            <summary>
            Represents the method that handles the<see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardPaste"/>, <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanPaste"/>, 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCut"/>, <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCut"/>, 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCopy"/>, and <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCopy"/> 
            events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventHandler">
            <summary>
            Occurs when the when the user releases the mouse over a cell at the end of an OLE drag-and-drop operation and
            before the data are applied to the grid.
            </summary>
            <remarks>
            This event lets you provide your own customized paste data behavior.
            <para/>
            If you do not wish the grid to proceed with default behavior for this method,
            set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True. The grid will check this
            flag to see whether it should proceed. If you set it to True, the calling method
            will check <see cref="P:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.Result"/> as indication if the
            operation was successful.
            <para/>
            If you want the grid to proceed with default behavior, do not change <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/>.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventHandler"/>
            
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.OleDropAtRowCol"/> event.
            </summary>
            <remarks>
            The event occurs when the user releases the mouse over a cell at the end of an OLE drag-and-drop operation and
            before the data is applied to the grid.
            <para/>
            This event lets you provide your own customized paste data behavior.
            <para/>
            If you do not wish the grid to proceed with default behavior for this method,
            set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True. The grid will check this
            flag to see whether it should proceed. If you set it to True, the calling method
            will check <see cref="P:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.Result"/> as indication if the
            operation was successful.
            <para/>
            If you want the grid to proceed with default behavior, you should not change <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/>.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventHandler"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.GridDataObject,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes the new object.
            </summary>
            <param name="dataObject">The Data Object with clipboard data.</param>
            <param name="rowIndex">The target row index.</param>
            <param name="colIndex">The target column index.</param>
            <param name="result">Default value for <see cref="P:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.Result"/>.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.DataObject">
            <summary>
            Gets or sets the Data Object with clipboard data.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.RowIndex">
            <summary>
            Gets or sets the target row index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.ColIndex">
            <summary>
            Gets or sets the target column index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs.Result">
            <summary>
            Gets or sets a value indicating whether the result of the operation (if Handled = true is specified).
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridExcelLikeDragRangeEventHandler">
            <summary>
            Represents the method that handles a cancelable <see cref="!:GridControlBase.QueryCanOleDragRange"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="!:GridQueryCanOleDragRangeEventArgs"/> that contains the event data.</param>  
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryCanDragRangeEventArgs">
            <summary>
            Provides data about the cancelable <see cref="!:GridControlBase.QueryCanOleDragRange"/> event.
            </summary>
            <remarks>
            GridQueryCanOleDragRangeEventArgs is a custom event argument class used by the
            <see cref="!:GridControlBase.QueryCanOleDragRange"/> event to determine whether
            a specified range can serve as an OLE drag source. The event is fired when the user
            hovers the mouse over the edge of a selected range.
            <para/>
            You can disallow the specified range to be used as OLE Data Source when
            you assign true to <see cref="!:CancelEventArgs.Cancel"/>.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridExcelLikeDragRangeEventHandler"/>
            <seealso cref="!:GridControlBase.QueryCanOleDragRange"/>   
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryCanDragRangeEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="range">The range to be used as OLE data source.</param>     
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryCanDragRangeEventArgs.Range">
            <summary>
            Gets the range to be used as OLE data source.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventHandler">
            <summary>
            Represents the method that handles <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryOleDataSourceData"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs"/> that contains the event data.</param>   
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryOleDataSourceData"/> event.
            </summary>
            <remarks>
            GridQueryOleDataSourceDataEventArgs is a custom event argument class used by the
            QueryOleDataSourceData even when a user starts dragging a range of selected cells
            using OLE drag-and-drop.
            <para/>
            This event lets you supply your own clipboard formats or add support for pasting additional clipboard content.
            </remarks>  
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.#ctor(Syncfusion.WinRT.Controls.Cells.GridDataObject,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,Syncfusion.WinRT.Controls.Cells.GridDragDropFlags,System.Int32,System.Int32)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="dataObject">The data object where data for the OLE drag operation is stored.</param>
            <param name="rangeList">You can save here a list of ranges that have been copied. This property will only be checked for the
            Copy operation. Can be NULL.</param>
            <param name="dragDropFlags">Lets you specify default behavior, e.g. if styles or text should be supplied, if row or column headers
            should be ignored.</param>
            <param name="rowCount">The number of rows that have been copied into the dataobject. Set this value if you modified the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.DataObject"/>.</param>
            <param name="colCount">The number of columns that have been copied into the dataobject. Set this value if you modified the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.DataObject"/>.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.IgnoreCurrentCell">
            <summary>
            Gets or sets a value indicating whether to ignore the current cell. This property will only be checked by the calling
            method if you do not set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.Result">
            <summary>
            Gets or sets a value indicating whether the return value the called method should return when you 
            set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.DataObject">
            <summary>
            Gets the data object where data for the OLE drag operation are stored.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.RangeList">
            <summary>
            Gets or sets the range list. You can save here a list of ranges that have been copied. This property will only be checked for the
            Copy operation. Can be NULL.
            </summary>      
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryOleDataSourceDataEventArgs.DragDropFlags">
            <summary>
            Gets or sets the behaviour. Lets you specify default behavior, e.g. if styles or text should be supplied, if row or column headers
            should be ignored.
            </summary>       
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventHandler">
            <summary>
            Represents the method that handles a cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.WrapCellNextControlInForm"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs">
            <summary>
            Provides data about the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.WrapCellNextControlInForm"/> event.
            </summary>
            <remarks>
            GridWrapCellNextControlInFormEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.WrapCellNextControlInForm"/> event to notify you 
            when the grid is about to be left because the user is at the top-left or bottom-right
            cell and about to tab out of the grid.
            <para/>
            This event is only raised if the <see cref="F:Syncfusion.WinRT.Controls.Grid.GridWrapCellBehavior.NextControlInForm"/>
            has been specified for <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.WrapCell"/>.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventHandler"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs.#ctor(System.Boolean,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the GridWrapCellNextControlInFormEventArgs class.
            </summary>
            <param name="forward">The <see cref="T:System.Boolean"/> object that holds cell information.</param>
            <param name="moveTopLeft"></param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs.Forward">
            <summary>
            Indicates if next or previous control in form should be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridWrapCellNextControlInFormEventArgs.MoveTopLeft">
            <summary>
            When moving to the next control indicates if grid should move current cell
            to the top-left position.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.MoveCurrentCellDirection"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventArgs">
            <summary>
            Holds data for the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.MoveCurrentCellDirection"/> which lets you customize
            how the current cell is moved when the user navigates through the grid with arrow keys.
            </summary>
            <remarks>
            Used by <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/>.
            <para/>
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> occurs before the the current cell is moved into a specific direction. Normally, cells that are not
            marked as enabled with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Enabled"/> will be skipped but you can hook into this
            mechanism by implementing a event handler for this event.
            <para/>
            If you want to customize the behavior, manually call CurrentCell.MoveTo from within the
            event handler and set e.Handled = True;
            </remarks>
            
            <example>The following example implements wrapping the current cell to the next row at the end of a row:
            <code lang="C#">
            
            		private void gridControl1_MoveCurrentCellDirection(object sender, GridMoveCurrentCellDirectionEventArgs e)
            		{
            			GridControlBase grid = sender as GridControlBase;
            			GridModel gridModel = grid.Model;
            			int row = e.RowIndex;
            			int col = e.ColIndex;
            			switch (e.Direction)
            			{
            				case GridDirectionType.Right:
            				{
            					col++;
            					if (col &gt; gridModel.ColCount)
            					{
            						row++;
            						col = grid.LeftColIndex;
            					}
            
            					while (row &lt; gridModel.RowCount)
            					{
            						using (GridStyleInfo style = grid.GetViewStyleInfo(row, col))
            						{
            							if (style.Enabled)
            							{
            								e.Result = grid.CurrentCell.MoveTo(row, col);
            								e.Handled = true;
            								return;
            							}
            
            							col++;
            							if (col &gt; gridModel.ColCount)
            							{
            								row++;
            								col = grid.LeftColIndex;
            							}
            						}
            					}
            					e.Handled = true;
            					e.Result = false;
            					break;
            				}
            				case GridDirectionType.Left:
            				{
            					col--;
            					if (col == gridModel.Cols.HeaderCount)
            					{
            						row--;
            						col = gridModel.ColCount;
            					}
            
            					while (row &gt; gridModel.Rows.HeaderCount)
            					{
            						using (GridStyleInfo style = grid.GetViewStyleInfo(row, col))
            						{
            							if (style.Enabled)
            							{
            								e.Result = grid.CurrentCell.MoveTo(row, col);
            								e.Handled = true;
            								return;
            							}
            
            							col--;
            							if (col == gridModel.Cols.HeaderCount)
            							{
            								row--;
            								col = gridModel.ColCount;
            							}
            						}
            					}
            					e.Handled = true;
            					e.Result = false;
            					break;
            				}
            			}
            
            		}
            	}
            
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs">
            <summary>
            Holds and lets you customize row and column coordinates for 
            the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> event.
            </summary>
            <remarks>
            Used by <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/>.
            <para/>
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> occurs before the the current cell is moved into a specific direction. Normally, cells that are not
            marked as enabled with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Enabled"/> will be skipped but you can hook into this
            mechanism by implementing a event handler for this event.
            <para/>
            See the SampleGrid class in the gridpad sample for an example.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="direction">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs.Direction">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs.RowIndex">
            <summary>
            The row index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs.ColIndex">
            <summary>
            The column index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs.Result">
            <summary>
            The resulting value. Set this to True if current cell can be moved in a specified direction;
            False if not. Don't forget to also set Handled to True.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridDirectionType,System.Int32,System.Boolean,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes the object.
            </summary>
            <param name="direction">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDirectionType"/> that specifies the direction of the current cell movement.</param>
            <param name="numCells">The number of cells to move.</param>
            <param name="extendSelection">Extends the current selection.</param>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventArgs.NumCells">
            <summary>
            >The number of cells to move.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridMoveCurrentCellDirectionEventArgs.ExtendSelection">
            <summary>
            Extends the current selection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.QueryNextCurrentCellPosition"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryNextCurrentCellPositionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeInsertedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInsertedEventArgs"/>.
            </summary>
            <param name="insertAt">The row or column index where the cells should be inserted before.</param>
            <param name="count">The number of rows or columns.</param>
            <param name="iro">Information about the cells to be inserted such as cell contents, row, and column sizes and more.</param>
            <param name="success">Indicates whether an operation was successful.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInsertedEventArgs.InsertAt">
            <summary>
            The row or column index where the cells should be inserted before.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeInsertedEventArgs.Count">
            <summary>
            The number of rows or columns.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeRemovedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeRemovedEventArgs"/>.
            </summary>
            <param name="from">The index of the first row or column that was removed.</param>
            <param name="last">The index of the last row or column that was removed.</param>
            <param name="iro">Provides information about the cells that have been removed such as
            row heights, column widths, and hidden state of rows or columns. </param>
            <param name="success">Indicates wheter an operation was successful.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeRemovedEventArgs.RemoveAt">
            <summary>
            The index of the first row or column that was removed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeRemovedEventArgs.Count">
            <summary>
            The index of the last row or column that was removed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRangeMovedEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeMovedEventArgs"/>.
            </summary>
            <param name="from">The index of the first row or column that was removed.</param>
            <param name="last">The index of the last row or column that was removed.</param>
            <param name="iro">Provides information about the cells that have been removed such as
            row heights, column widths, and hidden state of rows or columns. </param>
            <param name="success">Indicates wheter an operation was successful.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeMovedEventArgs.RemoveAt">
            <summary>
            The index of the first row or column that was removed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeMovedEventArgs.Count">
            <summary>
            The index of the last row or column that was removed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRangeMovedEventArgs.InsertAt">
            <summary>
            The row or column index where the cells should be inserted before.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellClickEventArgs">
            <summary>
            Holds the values when a cell is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellClickEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellClickEventArgs.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellButtonClickEventArgs">
            <summary>
            Holds the values when a cell is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellButtonClickEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellButtonClickEventArgs.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellMouseEventArgs">
            <summary>
            Holds the MouseEvent argument values.
            </summary>
            <remarks>
            Events related to the mouse events use this.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellMouseControllerEventArgs">
            <summary>
            Holds the MouseController argument values.
            </summary>
            <remarks>
            Used by the mouse related operations done by IMouseController implemented objects.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellMouseControllerEventArgs.MouseControllerEventArgs">
            <summary>
            Gets or sets the mouse controller event args.
            </summary>
            <value>The mouse controller event args.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs">
            <summary>
            Provides data about the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.ResizingColumns"/> event.
            </summary>
            <remarks>
            GridResizingColumnsEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.ResizingColumns"/> event when the user is about to resize
            a column or is in the process of resizing a column. 
            <para/>
            You can disallow the resizing of specific columns at run-time when
            you assign True to <see cref="!:RoutedEventArgs.Handled"/>.<para/>
            You can also limit resizing columns to a given maximum value by changing the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs.Width"/>
            value.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.ResizingColumns"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs"/> class.
            </summary>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the <see cref="P:System.Windows.RoutedEventArgs.Source"/> property.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs.Columns">
            <summary>
            Gets or sets the index of the column.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs.InHiddenColResize">
            <summary>
            Indicates whether the resizing is happening for hidden columns.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridResizingColumnsEventArgs.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventArgs">
            <summary>
            Provides data about the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.ResizingRows"/> event.
            </summary>
            <remarks>
            GridResizingRowsEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.ResizingRows"/> event when the user is about to resize
            a row or is in the process of resizing a row. 
            <para/>
            You can disallow the resizing of specific rows at run-time when
            you assign True to <see cref="!:RoutedEventArgs.Handled"/>.<para/>
            You can also limit resizing rows to a given maximum value by changing the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventArgs.Height"/>
            value.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridControlBase.ResizingRows"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventArgs"/> class.
            </summary>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the <see cref="P:System.Windows.RoutedEventArgs.Source"/> property.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventArgs.Rows">
            <summary>
            Gets or sets the index of the row.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventArgs.InHiddenRowResize">
            <summary>
            Indicates whether the resizing is happening for hidden rows.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridResizingRowsEventArgs.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellKeyEventHandler">
            <summary>
            Represents a method that handles cell key events for grid.
            </summary>
            <param name="sender">Event source.</param>
            <param name="args">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellKeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellKeyEventArgs">
            <summary>
            Holds the key event argument values.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellKeyEventArgs.KeyEventArgs">
            <summary>
            Provides information about the key events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs.#ctor(System.String,System.Int32,System.Int32,System.Uri,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs"/> class.
            </summary>
            <param name="Name">The Target Name.</param>
            <param name="RowIndex">Target Row Index.</param>
            <param name="ColumnIndex">Target Column Index.</param>
            <param name="Uri">The URI.</param>
            <param name="CellValue">The cell value.</param>
            <param name="CellRowColumn">The cell row column index.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs.Name">
            <summary>
            Gets the Target sheet name.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs.RowIndex">
            <summary>
            Gets the target row index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs.ColumnIndex">
            <summary>
            Gets the target column index.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs.CellRowColumnIndex">
            <summary>
            Gets the Cell row column index.
            </summary>
            <value>The index of the cell row column.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CellRequestNavigateEventArgs.Record">
            <summary>
            Gets the Record.
            </summary>
            <value>The record.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs"/> is cancel.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs.Handled">
            <summary>
            If it’s true then it will clear the selection after closing the popup window.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs.Style">
            <summary>
            Gets the Cell Style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.CurrentCellValidateEventArgs.SuspendMoveTo">
            <summary>
            Suspend the current cell moving after the validation.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFactoryProvider">
            <summary>
            Lets you specify a custom <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory"/> that instantiates
            cell models for the grid on demand using the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/>
            string as identifier.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFactoryProvider.Init(Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory)">
            <summary>
            Lets you specify a custom <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory"/> that instantiates
            cell models for the grid on demand using the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/>
            string as identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFactoryProvider.CellModelFactory">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridCellModelFactory"/> for this process.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnCreateBaseStylesMap">
            <summary>
            This method is called the first time <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.BaseStylesMap"/> and no
            <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> has been associated with the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> before.
            </summary>
            <returns>A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnBaseStylesMapChanged(System.EventArgs)">
            <summary>
            Raises the BaseStylesMapChanged event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnQueryCellModel(Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseQueryCellModel(Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.InvalidateCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Calls GridControlBase.InvalidateCell for each GridControlBase object
            associated with this GridModel.
            </summary>
            <param name="cellRowColumnIndex"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnSelectionChanged(Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnSelectionChanging(Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnOleDropAtRowCol(Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs)">
            <summary>
            Raises the  <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.OleDropAtRowCol"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseOleDropAtRowCol(Syncfusion.WinRT.Controls.Grid.GridOleDropAtRowColEventArgs)">
            <internalonly/>
            <summary>Used internally.</summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnOleDroppedData(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.OleDroppedData"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseOleDroppedData(System.EventArgs)">
            <internalonly/>
            <summary>Used internally.</summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnQueryDragDropMoveClearCells(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryDragDropMoveClearCells"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseQueryDragDropMoveClearCells(System.ComponentModel.CancelEventArgs)">
            <internalonly/>
            <summary>Used internally.</summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeSelectionState(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridRangeInfo[])">
            <summary>
            Records current selection state - current cell and selected ranges. Will be used for restoring selections when performing undo / redo,
            </summary>
            <param name="currentRow">The row index of current cell.</param>
            <param name="currentCol">The column index of current cell.</param>
            <param name="ranges">The current list of selected ranges.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridStyleInfo[],Syncfusion.WinRT.Styles.StyleModifyType)">
            <overload>
            Applies a text to the specified range of cells.
            </overload>
            <summary>
            Applies an array of styles to the specified range of cells.
            </summary>
            <param name="range">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that specifies the range of cells.</param>
            <param name="cellsInfo">The array of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> objects that holds cell information.</param>
            <param name="modifyType">A <see cref="T:Syncfusion.WinRT.Styles.StyleModifyType"/> that specifies the style operation to be performed.</param>
            <returns>A <see cref="T:System.Boolean"/> that indicates if the operation was successful.</returns>
            <remarks>
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridStyleInfo[],Syncfusion.WinRT.Styles.StyleModifyType)"/> will reset volatile data cache,
            generate undo information, force recalculation of floating cells, and
            raise <see cref="!:GridModel.CellsChanging"/> and <see cref="!:GridModel.CellsChanged"/> method.
            <para/>
            When you change cells directly with an indexer, this results in a call to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridStyleInfo[],Syncfusion.WinRT.Styles.StyleModifyType)"/>
            with modifyType set to <see cref="F:Syncfusion.WinRT.Styles.StyleModifyType.Changes"/>.
            <para/>
            </remarks>
            <example>
            The following example assigns a previously create style with a bold font to a cell:
            <code lang="C#">
                        GridStyleInfo boldFontStyle = new GridStyleInfo();
                        boldFontStyle.TextColor =  Color.FromArgb(238, 122, 3);
                        boldFontStyle.Font = boldFont;
                        model[rowIndex, 1].Text = "Interior";
                        model.ChangeCells(GridRangeInfo.Cell(rowIndex, 1), boldFontStyle);
                        </code>
            </example>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.String)">
            <summary>
            Applies a text to the specified range of cells.
            </summary>
            <param name="range">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that specifies the range of cells.</param>
            <param name="textValue">The text to be saved in cells.</param>
            <returns>A <see cref="T:System.Boolean"/> that indicates if the operation was successful.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Applies a style to the specified range of cells.
            </summary>
            <param name="range">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that specifies the range of cells.</param>
            <param name="cellInfo">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that holds cell information.</param>
            <returns>A <see cref="T:System.Boolean"/> that indicates if the operation was successful.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)">
            <summary>
            Applies a style to the specified range of cells.
            </summary>
            <param name="range">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that specifies the range of cells.</param>
            <param name="cellInfo">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that holds cell information.</param>
            <param name="modifyType">A <see cref="T:Syncfusion.WinRT.Styles.StyleModifyType"/> that specifies the style operation to be performed.</param>
            <returns>A <see cref="T:System.Boolean"/> that indicates if the operation was successful.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ChangeCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridStyleInfo[])">
            <summary>
            Applies an array of styles to the specified range of cells.
            </summary>
            <param name="range">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> that specifies the range of cells.</param>
            <param name="cellsInfo">The array of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> objects that holds cell information.</param>
            <returns>A <see cref="T:System.Boolean"/> that indicates if the operation was successful.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ClearCells(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Boolean)">
            <summary>
            Clears cell styles for a given list
            </summary>
            <param name="gridRangeInfoList"></param>
            <param name="clearStyles"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridModel.gridCutPaste">
            <summary>
            User set the object which implements the IGridCutPaste
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridModel.textDataExchange">
            <summary>
            For Copy or paste the formatted text
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridModel.cutPaste">
            <summary>
            User call the CanCopy(), Copy() using this object
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseClipboardCanPaste(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Used Internally.
            </summary>
            <param name="e">GridCutPasteEventArgs</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseClipboardCanCut(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            used internally.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseClipboardPaste(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Used Internally
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseClipboardPasted(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Used Internally
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.RaiseClipboardCut(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnClipboardCanPaste(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanPaste"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnClipboardCanCopy(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCopy"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnClipboardCanCut(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCut"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnClipboardPaste(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardPaste"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnClipboardPasted(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardPasted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnClipboardCopy(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCopy"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.OnClipboardCut(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCut"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.GetStyleDataSource(Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            This is called from GridDropDownGridListControlCellModel to initialize datasource on demand.
            Override this method to calculate the datasource on demand
            only when it is needed and not every time in QueryStyleInfo. Default behavior is to return
            style.ChoiceList if not empty. If style.ChoiceList is empty, style.DataSource is returned.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModel.ResizeColumnsToFit(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridResizeToFitOptions,Syncfusion.WinRT.Controls.Grid.GridControlLengthUnitType)">
            <summary>
            Resizes a range of columns to optimally fit contents of the
            specified range of cells and given options.
            </summary>
            <param name="range">The range of cells to be analyzed.</param>
            <param name="options">Specifies whether row or column headers should be included; if size can be reduced and if covered cells should be considered.</param>
            <returns>True if any changes were made; False if all sizes were already optimal.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.SuspendFormulaParsingAndCalculation">
            <summary>
            Suspend Formaula parsing and calculation when we read the formatted from the GridStyleInfo
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.HiddenColRanges">
            <summary>
            Read only collection of hidden columns.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.HiddenRowRanges">
            <summary>
            Read only collection of hidden rows.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.Options">
            <summary>
            A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModelOptions"/> that allows you to adjust behavior and appearance of the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.RowStyles">
            <summary>
            Gives you access to the row style information of a row.
            </summary>
            <value>The row styles.</value>
            <overload>
            Gives you access to the row style information of a row.
            </overload>
            <remarks>
            The indexer provides you with a very simple way to query and change row style contents.
            </remarks>
            <example>
            The following example make some changes to the grid using the indexer:
            <code lang="C#">
            model.RowStyles[2].Font.Bold = true;
            model.RowStyles[2].Font.Size = 16;
            model.RowStyles[2].HorizontalAlignment = GridHorizontalAlignment.Center;
            model.RowStyles[2].VerticalAlignment = GridVerticalAlignment.Middle;
            model.RowStyles[2].CellType = "Static";
            </code>
            If you query for specific attributes in a cell and these attributes have not been explicitly set for the cell,
            the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that is returned by the indexer is smart enough to query base styles for
            queried information.
            <code lang="C#">
            model.RowStyles[1].Background = Brushes.Red;
            Brush color = model[1, 1].Background;
            // model[1, 1].TextColor will return Brushes.Red
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.ColStyles">
            <overload>
            Gives you access to the column style information of a column.
            </overload>
            <summary>
            Gives you access to the column style information of a column.
            </summary>
            <remarks>
            The indexer provides you with a very simple way to query and change column style contents.
            </remarks>
            <example>
            The following example make some changes to the grid using the indexer:
            <code lang="C#">
                        model.ColStyles[2].Font.Bold = true;
                        model.ColStyles[2].Font.Size = 16;
                        model.ColStyles[2].HorizontalAlignment = GridHorizontalAlignment.Center;
                        model.ColStyles[2].VerticalAlignment = GridVerticalAlignment.Middle;
                        model.ColStyles[2].CellType = "Static";
            </code>
            If you query for specific attributes in a cell and these attributes have not been explicitly set,
            the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that is return by the indexer is smart enough to query base styles for
            queried information.
            <code lang="C#">
                        model.ColStyles[1].Background = Brushes.Red;
                            Brush color = model[1, 1].Background;
                            // model[1, 1].TextColor will return Brushes.Red
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.BaseStylesMap">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> that is associated with this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.HasBaseStylesMap">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.BaseStylesMap"/> has been associated with this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.BaseStylesMapChanged">
            <summary>
            Occurs when the reference for <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.BaseStylesMap"/> in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.CellModels">
            <summary>
            Manages cell types for the grid.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel">
            <summary>
            Occurs when the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> is querying for the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/>
            and the cell type is not found in the GridCellModelCollection.
            </summary>
            <remarks>
            The GridModel has a table with all cell types used in the grid. Whenever the grid encounters
            a new cell type that it cannot find in the table it will raise a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> event.
            The <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> identifies the name of the cell type. The
            <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs.CellModel"/> should receive the new instance of the
            associated cell object. This object will be stored in the table together with its name and
            reused among cells with the same <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/>.
            <para/>
            You should process this event if you want to add custom cell types and initialize these
            cell types on demand when associated cells are accessed the first time.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventHandler"/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.Selections">
            <summary>
            Manages selected ranges in the grid. Allows you to add and remove selections, determines
            selection state of a specific cell and more.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.CurrentCellState">
            <summary>
            GridCurrentCell.Activate and GridCurrentCell.Deactivate
            set and reset this state.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged">
            <summary>
            Occurs after the model updates its internal data structures when the model in the process of selecting
            a range of cells as a result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.SelectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean)"/>.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> will raise a  <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event before
            it updates its internal data structures and a  <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event after
            afterwards. A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> grid listens to this event and outline
            the selected range of cells.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging">
            <summary>
            Occurs before the model updates internal data structures when the model in the process of selecting
            a range of cells as a result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.SelectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean)"/>.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> will raise a  <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event before
            it updates its internal data structures and a  <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event
            afterwards. A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> grid listens to this event and outlines
            the selected range of cells.
            <para/>
            You can disallow the selection of specific cells at run-time when
            you assign true to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>.<para/>
            You can also modify the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs.Range"/> to include additional cells.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventHandler"/>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs"/>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.OleDroppedData">
            <summary>
            Occurs after the user releases the mouse over a cell at the end of an OLE drag-and-drop operation and
            the data were applied to the grid.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryDragDropMoveClearCells">
            <summary>
            Occurs when the user drops data onto another control using OLE drag-and-drop
            and does not press the Control Key. Set e.Cancel = True for this event if you do not
            want the grid to clear cell contents of the dragged cells.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.ActiveGridView">
            <summary>
            Gets or sets the active grid view.
            </summary>
            <remarks>
            If there are several views associated with this model, only one <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> can be active.
            <para/>
            Changing the active view will result in calls to <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Deactivate"/>
            and <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrentCell.Activate(System.Int32,System.Int32)"/> for the involved controls.
            <para/>
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanPaste">
            <summary>
            Occurs when the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanPaste"/> is called on the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> component of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCopy">
            <summary>
            Occurs when the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Copy"/> is called on the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> component of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCanCut">
            <summary>
            Occurs when the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Cut"/> is called on the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> component of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardPaste">
            <summary>
            Occurs when the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Paste"/> is called on the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> component of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardPasted">
            <summary>
            Occurs after the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Paste"/> is called on the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> component of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCopy">
            <summary>
            Occurs when the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Copy"/> is called on the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> component of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.ClipboardCut">
            <summary>
            Occurs when the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanCut"/> is called on the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/> component of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.GridCopyPaste">
            <summary>
            Gets or sets the GridCutPaste
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.TextDataExchange">
            <summary>
            Gets text data exchange for the grid. Lets you copy cell text to a stream or clipboard and recreate the
            cell text at a later time.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste">
            <summary>
            Gets clipboard operations for the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModel.CoveredRanges">
            <summary>
            Returns a TypeConverter with type information about the style.CellValue.
            </summary>
            <param name="style">The style object</param>
            <returns>A TypeConverter</returns>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridModel.OperationFeedback">
            <summary>
            Occurs when an operation takes a longer time and the user should be notified
            about its status and have a chance to abort.
            </summary>
            <remarks>
            See <see cref="T:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs"/> for more detailed discussion about this event.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.CopyPaste">
            <summary>
            Defines Copy-Paste options.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.CopyText">
            <summary>
            Set the CopyText option
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.CopyCellData">
            <summary>
            Set the CopyCell option
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.PasteText">
            <summary>
            Set the PasteText option
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.PasteCell">
            <summary>
            Set the PasteCell option
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.CutText">
            <summary>
            Set the CutText option
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.CutCell">
            <summary>
            Set the CutCell option
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.ExcludeCurrentCell">
            <summary>
            Omits the current cell during clipboard operations.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.IncludeStyle">
            <summary>
            Includes all style info while copy, cut and paste using IDataObject.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.IncludeHeaders">
            <summary>
            Includes all Header Text also while copy and cut operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.IncludeEmptyCells">
            <summary>
            Includes the Empty cell during clipboard operations.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.CopySummaries">
            <summary>
            Includes the Summaries during clipboard copy operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CopyPaste.CopyCaptions">
            <summary>
            Includes the Captions during clipboard copy operation.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelOptions.NotifyPropertyChanged(System.String)">
            <summary>
            Property Change Notifier
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridModelOptions._RowColStylePrecedence">
            <summary>
            set procedence style for either row or column
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.AllowExcelLikeResizing">
            <summary>
            Allows user to resize Hidden columns and hidden rows as in Excel.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ShowErrorIconOnEditing">
            <summary>
            Gets / sets ErrorIcon at Editing time.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.HiddenBorderThickness">
            <summary>
            Specifies the thickness of the line drawn at the border to indicate any hidden columns/rows
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.HiddenBorderBrush">
            <summary>
            Specifies the brush of the line drawn at the border to indicate any hidden columns/rows
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ExcelLikeCurrentCell">
            <summary>
            Defines Excel-like current cell behavior. When the user moves the current cell out of a selected
            range, the range will be cleared. If the user moves the current cell inside a selected range, the
            range will stay.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.CopyPasteOption">
            <summary>
            User Choice for how the clipboard operation is performed 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ColumnSizer">
            <summary>
            User Choice for how the column can be sized
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.MaxLength">
            <summary>
            User Choice for specifying how many rows to take into account for sizing
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ExcelLikeSelection" -->
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ExcelLikeSelectionFrame">
            <summary>
            Specifies whether the active selection should be outline with a selection frame.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ExcelLikeTabNavigation">
            <summary>
            It will enable or disable the Excel like tab key navigation
            </summary>
            <value><see langword="true"/> if set to true then skips the read only cells move to the next enabled cell;
            otherwise, move to the next cell <see langword="false"/>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.AllowSelection">
            <summary>
            Defines selection behavior of the grid.
            </summary>
            <value>
            A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionFlags"/> that specifies options to be applied.
            </value>
            <remarks>
            You can customize the mouse controller's behavior at run-time while the user is performing the action 
            by subscribing to the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> and 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> events.<para/>
            The <see cref="!:SelectCellsMouseButtonsMask"/> property lets you decide which mouse buttons 
            can be used for selecting cells.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.WrapCell">
            <summary>
            Go to first column in next row or last column in previous row when
            at end or beginning of a row and moving left or right. For more options, 
            use <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.WrapCellBehavior"/> instead.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.WrapCellBehavior">
            <summary>
            Go to first column in next row or last column in previous row when
            at end or beginning of a row and moving left or right.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ListBoxSelectionMode">
            <summary>
            Enables list box-like selection behavior for the grid when the user moves the current cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionMode"/> that defines the list box-like selection behavior of the grid.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ListBoxModeAllowUIElementClick">
            <summary>
            Gets or sets whether child UIElements in cells should receive mouse events when
            list box-like selection behavior is enabled for the grid. Set this true
            if you want to place buttons or checkboxes in cells.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.MulitExtendedArrowKeySelect">
            <summary>
            When you select GridSelectionMode.MultiExtended, this flag defines if the rows selection
            should be cleared and moved with the new current cell or if only the current cell
            should be moved without clearing selections.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ActivateCurrentCellBehavior">
            <summary>
            Specifies current cell activation behavior when moving the current cell or clicking inside a cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellActivateAction"/> enumeration that defines when to set the focus / toggle edit mode for the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.FloatCellMode">
            <summary>
            Get or set the value indicating whether to allow floating for the cell and its mode
            </summary>
            <value>
            A <see cref="!:GridFloatCellMode"/> enumeration that defines the mode of floating.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.FloodCell">
            <summary>
            Get or set the value indicationg whether the neghbouring cell float over the corresponding cell.
            </summary>
            <value>
            The boolean value indicating to allow the behavior
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.ScrollFrozen">
            <summary>
            Defines scroll behavior when user moves current cell with arrow keys into the frozen cells area.
            </summary>
            <remarks>
            True, if current cell is at the topmost nonfrozen row, scroll the view.
            False, move current cell into frozen cells. If current cell is at the top row, 
            scroll the view.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelOptions.FormulaDisplayBehavior">
            <summary>
            Defines when formulas are visible in a formula cell.
            </summary>
            <remarks>
            You can use this property to always hide formulas from your user, to always show
            formulas to your user, or only show them in a particular cell when it is either current
            or being edited.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridModelSelections">
            <summary>
            Manages selected ranges in the grid. Allows you to add and remove selections, determine
            selection state of a specific cell, and more.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModelSelections"/> object and associates it 
            with a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
            <param name="model">A reference to the parent <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.GetSelectedRanges(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList@,System.Boolean)">
            <summary>
            Retrieves a list with selected ranges or if there are no selected ranges, returns the current cell as selected range.
            </summary>
            <param name="ranges">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> where selected ranges will be copied to.</param>
            <param name="considerCurrentCell">True if current cell should be returned as selected range if there are no other selected ranges.</param>
            <returns>True if one or multiple ranges or current cell range could be returned; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.GetInvertStateRowCol(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            Determines if the specified cell position is found in a range list.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="colIndex">The column index.</param>
            <param name="rl">The range list with ranges to be searched.</param>
            <returns>True if cell position was found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.GetSelectedCols(System.Boolean,System.Boolean)">
            <summary>
            Returns selected columns in the grid.
            </summary>
            <param name="bRangeColsOnly">True if only selected columns should be returned; False if you want to treat single range cell selections as full column selections.</param>
            <param name="considerCurrentCell">True if current cell should be returned as selected range if there are no other selected ranges.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with column ranges.</returns>
            <remarks>
            If the user has selected the cell's range R1C2:R2C4 and the current cell is at R4C5.<para/>
            If you specify False for <paramref name="bRangeColsOnly"/>, the method will return range C2:C4. <para/>
            If you specify True for <paramref name="bRangeColsOnly"/> and also True for <paramref name="considerCurrentCell"/>,  
            the method will return range C5. <para/>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.GetSelectedRows(System.Boolean,System.Boolean)">
            <summary>
            Returns selected rows in the grid.
            </summary>
            <param name="bRangeRowsOnly">True if only selected rows should be returned; False if you want to treat single range cell selections as full row selections.</param>
            <param name="considerCurrentCell">True if current cell should be returned as selected range if there are no other selected ranges.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> with row ranges.</returns>
            <remarks>
            If the user has selected the cell's range R1C2:R2C4 and the current cell is at R4C5.<para/>
            If you specify False for <paramref name="bRangeColsOnly"/>, the method will return range R1:R2. <para/>
            If you specify True for <paramref name="bRangeColsOnly"/> and also True for <paramref name="considerCurrentCell"/>,
            the method will return range R4. <para/>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Add(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Adds a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> to the list of selected ranges.
            </summary>
            <param name="range">The new selection range to be added.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Remove(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Removes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> from the list of selected ranges.
            </summary>
            <param name="range">The new selection range to be added.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.SelectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean)">
            <summary>
            Adds or removes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfo"/> from the list of seletced ranges.
            </summary>
            <param name="range">The selection range to be added or removed.</param>
            <param name="bSelect">True if range should be added; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Clear">
            <summary>
            Clears all selections.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Clear(System.Boolean)">
            <summary>
            Clears all selections.
            </summary>
            <param name="raiseEvents">Indicates if SelectionChanging and SelectionChanged should be raised.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.ChangeSelection(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridSelectionReason)">
            <overload>
            Changes an existing selection.
            </overload>
            <summary>
            Changes an existing selection.
            </summary>
            <param name="oldRange">The range to be changed.</param>
            <param name="newRange">The new boundaries of the range.</param>
            <remarks>
            The grid calls this method when you select cells with the mouse.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.ChangeSelection(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean,Syncfusion.WinRT.Controls.Grid.GridSelectionReason)">
            <summary>
            Changes an existing selection.
            </summary>
            <param name="oldRange">The range to be changed.</param>
            <param name="newRange">The new boundaries of the range.</param>
            <param name="raiseEvents">Specifies if SelectionChanging and SelectionChanged events should be raised.</param>
            <remarks>
            The grid calls this method when you select cells with the mouse.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.GetEnumerator">
            <summary>
            Returns an enumerator for stepping through all selected ranges.
            </summary>
            <returns>The enumerator for the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Ranges"/> collection.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Ranges">
            <summary>
            The collection with all selected ranges.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelSelections.Count">
            <summary>
            The number of ranges in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModelSelections"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelSelections.SyncRoot">
            <summary>
             Returns NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelSelections.IsSynchronized">
            <summary>
             Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridMoveCellsState.SuspendSelections">
            <summary>
            Suspends the selection state when GridMoveCellsState is used
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.ArrowIndicatorDirection">
            <summary>
            Defines the direction of the drag indicator.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridDragColumnHeaderMouseController.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridDragColumnHeaderMouseController"/>
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.WinRT.Controls.Grid.GridDragColumnHeaderMouseController.HitTest(Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs,Syncfusion.WinRT.Controls.Scroll.IMouseController)" -->
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridDragColumnHeaderMouseController.UpIndicator">
            <summary>
            Gets the Up Drag Indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridDragColumnHeaderMouseController.DownIndicator">
            <summary>
            Gets the Down Drag Indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridDragColumnHeaderMouseController.Name">
            <summary>
            Returns the name of the mouse controller.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.PopupDragWindow">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.DestroyChild">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.ProvideVisual(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.Show">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.StartDrag">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.MoveTo(Windows.Foundation.Point)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.StopDrag">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.Hide">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.DestroyChildOnStopDrag">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.IsDragging">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.PopupDragWindow.IsShowing">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.PopupPositionWindow">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupPositionWindow.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupPositionWindow.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.PopupPositionWindow.Move(Windows.Foundation.Point)">
            <summary>
            Moves the popup to the specified point.
            </summary>
            <param name="p">The target point.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventHandler">
            <summary>
            Represents a method that handles events with <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs"/> that are raised when the user hovers over a column
            header  or drags column header with the mouse.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderReason">
            <summary>
            Reason why QueryAllowDragColumnHeader event was raised (Show Red Indicator, MouseUp or HitTest).
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderReason.HitTest">
            <summary>
            HitTest is occuring
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderReason.MouseUp">
            <summary>
            MouseUp
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs">
            <summary>
            Holds a reference to a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> that initiates the event and the column 
            that is affected.
            </summary>
            <remarks>
            Set <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.AllowDrag"/> to False if you do not want to allow the user 
            to drag the specified <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.Column"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.#ctor(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderReason)">
            <summary>
            Initializes the event args.
            </summary>
            <param name="grid">The table control.</param>
            <param name="column">Column Name.</param>
            <param name="insertBeforeColumn">Name of the column to insert at. You can call TableDescriptor.Columns[InsertBeforeColumn] to get the GridColumnDescriptor.</param>
            <param name="reason">Reason why this event was raised (Show Red Indicator, MouseUp, or HitTest).</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.Column">
            <summary>
            Column Name. You can call TableDescriptor.Columns[Column] to get the GridColumnDescriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.InsertBeforeColumn">
            <summary>
            Name of the column to insert at. You can call TableDescriptor.Columns[InsertBeforeColumn] to get the GridColumnDescriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.Reason">
            <summary>
            Reason why this event was raised (Show Red Indicator, MouseUp, or HitTest).
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.AllowDrag">
            <summary>
            Set <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.AllowDrag"/> to False if you do not want to allow the user 
            to drag the specified <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryDragColumnHeaderEventArgs.Column"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.DoubleUtil">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.DoubleUtil.IsNaN(System.Double)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.GridExcelLikeDragDropMouseController">
            <summary>
            Implements the datasource part of an OLE drag-and-drop operation in a grid control.
            </summary>    
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags">
            <summary>
            Drag-and-drop options used with EnableOleDropTarget
            </summary>    
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.Disabled">
            <summary>
            Disable drop target.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.ColHeader">
            <summary>
            Also copy / move column header cells.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.RowHeader">
            <summary>
            Also copy / move row header cells.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.Multiple">
            <summary>
            Allow dragging multiple selections.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.Text">
            <summary>
            Force dragging of CF_TEXT clipboard format.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.Styles">
            <summary>
            Force dragging of internal styles format.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.Compose">
            <summary>
            When copying internal styles, compose the full style of the cell and do not copy only the cell specific attributes.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.AutoScroll">
            <summary>
             Enable autoscroll when user drags out of windows.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.EdgeScroll">
            <summary>
            Enable edgescroll when user drags to the corner of the window.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.NoAppendRows">
            <summary>
            If the user pastes (or drops) more rows than currently available, don't append as many rows as needed.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.NoAppendCols">
            <summary>
            If the user pastes (or drops) more columns than currently available, don't append as many columns as needed.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.OutlineAppendRows">
            <summary>
            By default if the user drags multiple rows to the bottom of the grid in an ole drag operation the
            outlined rectangle will be clipped at the bottom of the current available rows. If you specify
            this option the new rows will be outlined below the last visible row.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.OutlineAppendCols">
            <summary>
            By default if the user drags multiple columns to the right of the grid in an ole drag operation the
            outlined rectangle will be clipped at the right of the current available columns. If you specify
            this option the new columns will be outlined below the last visible column.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDragDropFlags.CheckRangeDim">
            <summary>
            Later ... Paste only: Display "Selected Range is Different"-Dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.GridDataObjectConsumerOptions">
            <summary>
            Specifies which default data consumers should be enabled for the grid.
            <para/>
               This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a bitwise combination of its member values.
            </summary>
            <remarks>
            You can customize the mouse controller's behavior at run-time while the user is performing the action 
            by creating an object that implements <see cref="T:Syncfusion.WinRT.Controls.Grid.IGridDataObjectConsumer"/> and register this object
            with <see cref="!:GridControlBaseImp.RegisterDataObjectConsumer"/>. This allows you to add support for additional
            clipboard formats to be dragged into the grid from outside applications.
            <para/>
            You can change various options with <see cref="!:GridControlBaseImp.EnableOleDropTarget"/>. 
            <para/>
            When you change 
            <see cref="!:GridModelOptions.ControllerOptions"/> in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModelOptions"/>,
            this will actually end up calling <see cref="!:GridControlBaseImp.EnableOleDropTarget"/>
            for each associated view.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDataObjectConsumerOptions.None">
            <summary>
            No default data objects supported.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDataObjectConsumerOptions.Styles">
            <summary>
            Enable styles (internal) data objects. This allows you to drag / copy / paste complete cell information.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDataObjectConsumerOptions.Text">
            <summary>
            Enable text data format. This allows you to drag cell values.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.GridDataObjectConsumerOptions.All">
            <summary>
            Enable support for all default data objects.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridSelectCellsMouseController.isValidationMsgShown">
            <summary>
            isValidationMsgShown is True when the validation message shown. In Silverlight we don't have the support for checking the button state
            so that this flag was used to remove the selection while mouse over the grid.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellTextEventHandler">
            <summary>
            Represents a method that handles a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellText"/>, <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellText"/>, 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellFormattedText"/>, or <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellFormattedText"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs">
            <summary>
            Provides event data for the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellText"/>, <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellText"/>, 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellFormattedText"/>, or <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellFormattedText"/> event.
            </summary>
            <remarks>
            If you want to customize the grid's behavior, you should set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> 
            to True. The grid will check this flag to see whether it should accept your modification 
            or use a conversion.
            <para/>
            If you need identity information about the cell such as row and column index, you can get that
            information by querying <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellIdentity"/> of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.Style"/>
            object.
            <para/>
            The <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellFormattedText"/> and <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellText"/> events
            expect that you save the resulting value in <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue"/> of the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.Style"/>
            object.
            <para/>
            The <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellFormattedText"/> and <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellText"/> events
            expect that you save the resulting string in <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.Text"/>.
            <para/>
            The <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.TextInfo"/> is only used for  <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellFormattedText"/> and
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellFormattedText"/>.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCellTextEventHandler"/>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SaveCellFormattedText"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellFormattedText"/>
            <seealso cref="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.ApplyFormattedText(Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.String,System.Int32)"/>
            <seealso cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormattedText"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.#ctor(System.String,Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.Object,System.Int32)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="text">The string that represents the underlying cell value.</param>
            <param name="style">The style object.</param>
            <param name="value">The cell value.</param>
            <param name="textInfo"> textInfo is a hint where the call originated, e.g. GridCellBaseTextInfo.DisplayText.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.Text">
            <summary>
            The string that represents the underlying cell value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.Style">
            <summary>
            The style object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.Value">
            <summary>
            The cell value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellTextEventArgs.TextInfo">
            <summary>
            textInfo is a hint where the call originated, e.g. GridCellBaseTextInfo.DisplayText.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridModelEventArgs">
            <summary>
            Custom event argument base class used for events associated with a <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelEventArgs.GridModel"/>. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModelEventArgs"/> object.
            </summary>
            <param name="model">Reference to the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelEventArgs.GridModel"/>.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelEventArgs.GridModel">
            <summary>
            Reference to <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModelEventArgs.GridModel"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventHandler">
            <summary>
            Represents the method that handles a cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">An <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs">
            <summary>
            Provides data about the cancelable <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event.
            </summary>
            <remarks>
            The GridSelectionChangingEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event
            when the model is in the process of selecting a range of cells as a result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.SelectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean)"/>
            method call.
            <para/>
            You can disallow the selection of specific cells at run-time when
            you assign true to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>.<para/>
            You can also modify the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs.Range"/> to include additional cells.
            <para/>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> will raise a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event before
            it updates its internal data structures and a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event
            afterwards. A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> grid listens to this event and outlines
            the selected range of cells.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridSelectionReason,Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <overload>
            Initalizes a new object.
            </overload>
            <summary>
            Initalizes a new object.
            </summary>
            <param name="range">The range of cells to be selected.</param>
            <param name="reason">The current state of the user action and reason for this event (mouse, keyboard or programmatic).</param>
            <param name="clickRange">The range of cells to be selected when the previous range is reset. <para/>
            Will be set only if reason is GridSelectionReason.SetCurrentCell, GridSelectionReason.MouseDown, GridSelectionReason.MouseMove.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridSelectionReason)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="range">The range of cells to be selected.</param>
            <param name="reason">The current state of the user action and reason for this event (mouse, keyboard, or programmatic).</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs.Range">
            <summary>
            The range of cells to be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs.ClickRange">
            <summary>
            The range of cells to be selected when the previous range is reset. <para/>
            Will be set only if reason is GridSelectionReason.SetCurrentCell, GridSelectionReason.MouseDown, GridSelectionReason.MouseMove.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs.Reason">
            <summary>
            The current state of the user action and reason for this event (mouse, keyboard, or programmatic).
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event.
            </summary>
            <remarks>
            The GridSelectionChangedEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event 
            when the model in the process of selecting a range of cells as a result of a <see cref="M:Syncfusion.WinRT.Controls.Grid.GridModelSelections.SelectRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean)"/>
            method call.
            <para/>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> will raise a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanging"/> event before
            it updates its internal data structures and a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/> event
            afterwards. A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridControlBase"/> grid listens to this event and outlines
            the selected range of cells.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.SelectionChanged"/>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridSelectionChangingEventArgs"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,Syncfusion.WinRT.Controls.Grid.GridSelectionReason)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="range">The range of cells to be selected.</param>
            <param name="oldRanges">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> that holds all selected ranges before this user action.</param>
            <param name="reason">The origin source for this event (mouse, keyboard, or programmatic).</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs.Range">
            <summary>
            The range of cells to be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs.Reason">
            <summary>
            The origin source for this event (mouse, keyboard, or programmatic).
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridSelectionChangedEventArgs.OldRanges">
            <summary>
            A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridRangeInfoList"/> that holds all selected ranges before this user action.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> event.
            </summary>
            <remarks>
            The GridQueryCellModelEventArgs is a custom event argument class used by the 
            <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> event for querying the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/>
            based on a string cellType.
            <para/>
            The GridModel has a table with all cell types used in the grid. Whenever the grid encounters
            a new cell type that it cannot find in the table, it will raise a <see cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> event.
            The <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> identifies the name of the cell type. The 
            <see cref="P:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs.CellModel"/> should receive the new instance of the
            associated cell object. This object will be stored in the table together with its name and
            reused among cells with the same <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/>.
            <para/>
            You should process this event if you want to add custom cell types and initialize these
            cell types on demand when associated cells are accessed the first time.
            </remarks>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventHandler"/>
            <seealso cref="E:Syncfusion.WinRT.Controls.Grid.GridModel.QueryCellModel"/> 
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel,System.String)">
            <summary>
            Initalizes a new object.
            </summary>
            <param name="gridModel">The grid model.</param>
            <param name="cellType">The cell type identifier as used in the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> property.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs.CellType">
            <summary>
            The cell type identifier as used in the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridQueryCellModelEventArgs.CellModel">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> for the cell type. You should create a new instance
            of the specific cell model and save it to this property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridModelEventsHost.OnClipboardCanPaste(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="!:ClipboardCanPaste"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> containing event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridModelEventsHost.OnClipboardCanCopy(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="!:ClipboardCanCopy"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> containing event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridModelEventsHost.OnClipboardCanCut(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="!:ClipboardCanCut"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> containing event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridModelEventsHost.OnClipboardPaste(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="!:ClipboardPaste"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> containing event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridModelEventsHost.OnClipboardPasted(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="!:ClipboardPasted"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> containing event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridModelEventsHost.OnClipboardCut(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="!:ClipboardCut"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> containing event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridModelEventsHost.OnClipboardCopy(Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs)">
            <summary>
            Raises the <see cref="!:ClipboardCopy"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCutPasteEventArgs"/> containing event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel">
            <summary>
            This GridCellModel supports entering formulas in a grid cell. This support is provided
            through the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.Engine"/> member of this class. Engine is
            a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine"/>.
            </summary>
            <remarks>
            The default behavior is that any cell whose CellType is GridCellFormulaModel will
            be interpreted as a formula cell provided the text in the cell starts with '='. 
            So, for such cells you would enter formulas such as
            =A1+A2+A3 or =Sum(A1:A3), an an attempt would be made to parse and compute the entry.
            <para/>
            Alternatively, you can use the <see cref="F:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.formulaChar"/> character
            to specify which cells of CellType GridCellFormulaModel are to be used as formulas.
            You set this formulaChar private property through the class constructor which passes
            this parameter. If you set this value to '\0', every cell of CellType GridCellFormulaModel
            will be treated as a formula.
            <para/>
            The <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.RefreshCells(System.Int32,System.Int32)"/> method redraws all the formula cells that depend upon
            a particular cell. This method is called when the user changes a value that affects
            other formula cells.
            <para/>
            The <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.GetFormattedText(Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.Object,System.Int32)"/> method is where the actual calculations are done,
            if necessary, through calls to the Engine methods. This method also conditionally
            parses the formula only if it has been modified since the previous parse.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel"/> object.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.CreateRenderer">
            <summary>
            Creates formula cell renderer.
            </summary>
            <returns>The cell renderer that this method creates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.RefreshCells(System.Int32,System.Int32)">
            <summary>
            This method forces any formula cell dependent upon the passed-in cell in the row
            and column to be recomputed. This method is called by the model whenever
            the contents of the passed-in cell is changed. For example, the user changing a
            single non-formula cell may require the recomputing of several additional formula cells. 
            This method triggers the redrawing of these dependent cells.
            </summary>
            <param name="row">Row index of the cell that was modifed by the user.</param>
            <param name="col">Column index of the cell that was modified by the user.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.GetFormattedText(Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.Object,System.Int32)">
            <summary>
            Triggers the parsing and computing of formulas.
            </summary>
            <remarks>
            Overridden to trigger the parsing and computing of formulas. The 
            computed value is returned for non-editing cells. The raw formula
            text is returned when the cell is actively beng edited.
            </remarks>
            <param name="style">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object that holds cell information.</param>
            <param name="value">The value to format.</param>
            <param name="textInfo">textInfo is a hint who is calling, default is GridCellBaseTextInfo.DisplayText.</param>
            <returns>Either the computed value or the raw formula text.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.IsEmpty(System.String)">
            <summary>
            Returns whether the input string is null or has zero length.
            </summary>
            <param name="s">The input string.</param>
            <returns>True if null or zero length, false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.Grid">
            <summary>
            Gets the GridModel associated with this cell model.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.FormulaChar">
             <summary>
             Gets or sets the formula character.
             </summary>
            <remarks> 
             Set this field to a particular character such as '=' to conditionally flag a cell
             whose CellType is GridCellFormulaModel as holding a formula. If you do not 
             set this field, then all cells of CellType GridCellFormulaModel that begin with '='
             will be treated as a formula.
             </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.CalculatingSuspended">
            <summary>
            Gets or sets whether calculations should be done as values change in the underlying GridControl.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCellFormulaModel.Engine">
            <summary>
            Gets the GridFormulaEngine associated with the CellModel. <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine"/> encapsulates all 
            formula features. Use this object to add / remove library functions.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCellFormulaRenderer">
            <summary>
            Implements a GridCellRender that supports formulas.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaRenderer.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellFormulaRenderer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaRenderer.GetControlTextCore(Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo,System.Object)">
            <summary>
            Overridden to conditionally return either the style.Text property which holds the formula,
            or the style.FormattedText property which holds the formatted computed value.
            </summary>
            <param name="style">The style object.</param>
            <returns>Either the formula text or the computed text depending upon the context of the call.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCellFormulaRenderer.OnSaveChanges">
            <summary>
            Overridden to make sure the formula is recomputed as the changes are saved.
            </summary>
            <returns>True if the changes were saved.</returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine">
            <summary>
            Encapsulates the code required to parse and compute formulas. Hashtable
            properties maintain a Formula Library of functions as well as a list
            of dependent cells.
            <para/>
            You can add and remove library functions.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.formulaChar">
            <summary>
            The character that indicates a formula.
            </summary>
            <remarks>
            If this character is not 0, the text of a cell
            must begin with this character if the cell contains
            a formula. Common usage would be to use '=' as the
            character to begin a formula in a cell.
            
            This value is normally set through the cell model constructor.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetSheetFamilyItem(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Returns the GridSheetFamilyItem for the specified model. If there was no item registered for 
            the model, a new item is created and cached.
            </summary>
            <param name="model">The grid model.</param>
            <returns>The GridSheetFamilyItem for the specified model.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ToString">
            <summary>
            Displays information on the cell currently being calculated.
            </summary>
            <returns>String with information on the cell currently being calculated.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ValidSheetChars" -->
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ChangeGridSheetName(System.String,System.String,Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Changes a sheetname that was previously registered using <see cref="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RegisterGridAsSheet(System.String,Syncfusion.WinRT.Controls.Grid.GridModel,System.Int32)"/>. 
            This method iterates through all the cells in all the sheets in the sheet family, swapping all 
            occurrences of the oldName in any formula with the newName.
            </summary>
            <param name="oldName">The old sheet name.</param>
            <param name="newName">The new sheet name.</param>
            <param name="grid">The grid model.</param>
            <returns>True if the sheet was successfully renamed. If false returns,
            check whether the sheet family already contains the new name.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RegisterGridAsSheet(System.String,Syncfusion.WinRT.Controls.Grid.GridModel,System.Int32)">
             <summary>
             Registers a grid so it can be referenced in a formula from another grid.
             </summary>
             <param name="refName">The reference name used to refer to this grid from formulas in other grids.
             </param>
             <param name="model">The GridModel from the grid being registered.
             </param>
             /// <param name="sheetFamilyID">An integer previously created with a call 
             to GridFormulaEngine.CreateSheetFamilyID. This number is used to identify
             the grids as belonging to a particular family of grids. You can only reference
             grids from within the same family.
             </param>
             <remarks>
             Essential Grid supports multisheet references with its formulas. For example, if you
             have two tabpages with a GridControl on each, you can reference cells from the first
             in the second grid. For this to work, both grids need to be registered using this method.
             
             The syntax for using a sheet reference as part of a formula is to prefix a cell reference 
             with the sheet reference name followed by an exclamation point.
             
             The formula "= sheet1!A1 + sheet2!C3" would add the value of cell A1 for 
             the grid whose reference name is sheet1 to the value from cell C3 in the grid 
             whose reference name is sheet2.
              
             </remarks>
             <example> Use this code to use cross sheet references.
             <code lang="C#">
            		//Register 3 grids so cell can be referenced across grids.
            		int sheetfamilyID = GridFormulaEngine.CreateSheetFamilyID();
            		GridFormulaEngine.RegisterGridAsSheet("summary", this.gridControl1.Model, sheetfamilyID);
            		GridFormulaEngine.RegisterGridAsSheet("income", this.gridControl2.Model, sheetfamilyID);
            		GridFormulaEngine.RegisterGridAsSheet("expenses", this.gridControl3.Model, sheetfamilyID);
            		....
            		//Sample formula usage for cells in gridControl1, the 'summary' grid.
            		//This code sums up some cells from gridControl3, the 'expenses' grid, 
            		//and gridControl2, the 'income' grid.
            		
            		//Sum the range B2:B8 from the expenses grid.
            		this.gridControl1[3,4].Text = "= Sum(expenses!B2:expenses!B8)";
            
            		//Sum the range B2:B4 from the income grid.
            		this.gridControl1[4,4].Text = "= Sum(income!B2:income!B4)";
            		
             </code>
             <code lang="VB">
            		'Register 3 grids so cells can be referenced across grids.
            		Dim sheetfamilyID As Integer = GridFormulaEngine.CreateSheetFamilyID();
            		GridFormulaEngine.RegisterGridAsSheet("summary", Me.gridControl1.Model, sheetfamilyID)
            		GridFormulaEngine.RegisterGridAsSheet("income", Me.gridControl2.Model, sheetfamilyID) 
            		GridFormulaEngine.RegisterGridAsSheet("expenses", Me.gridControl3.Model, sheetfamilyID) 
            		....
            		'Sample formula usage for cells in gridControl1, the 'summary' grid.
            		'This code sums ups some cells from gridControl3, the 'expenses' grid, 
            		'and gridControl2, the 'income' grid.
            		
            		'Sum the range B2:B8 from the expenses grid.
            		Me.gridControl1(3,4).Text = "= Sum(expenses!B2:expenses!B8)"
            
            		'Sum the range B2:B4 from the income grid.
            		Me.gridControl1(4,4).Text = "= Sum(income!B2:income!B4)"
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.CreateSheetFamilyID">
            <summary>
            Returns an integer that is used to identify a family of grids.
            </summary>
            <remarks>
            Essential Grid supports multisheet references within a family of grids. To use
            this functionality, you employ the method to get a unique identifier for
            the family. Then in the RegisterGridAsSheet method that you call to add grids
            to this family, you pass this unique identifier to mark the grids as belonging
            to this family. You can only cross reference grids within the same family.
            </remarks>
            <returns>Sheet family id.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.UnregisterGridAsSheet(System.String,Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Unregisters a grid so it can no longer be referenced in a formula from another grid.
            </summary>
            <param name="refName">The reference name used to refer to this grid from formulas in other grids.
            </param>
            <param name="model">The grid model.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Constructor.
            </summary>
            <param name="gridModel">The GridModel from the underlying grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.Refresh(System.String)">
            <summary>
            Recalculates any cell that depends upon the passed in cell.
            </summary>
            <param name="s">A cell such as A21 or EE31.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RefreshRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Recalculates every cell that depends upon any cell in the passed-in range.
            </summary>
            <remarks>For example, if range is GridRangeInfo(1,1,2,2), and cells (5,6) and
            (12,17) hold formulas that reference the cells in the range, then cells (5,6) 
            and (12,17) will be re-computed as the result of this call.</remarks>
            <param name="range">GridRangeInfo object to be refreshed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RecalculateRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo)">
            <summary>
            Recalculates any formula cells in the specified range.
            </summary>
            <remarks>The calculations for non-visible formula cells are performed the next time 
             cell are actually displayed. If you want the calculation performed immediately 
             on cells (visible or not), call the two argument overload of RecalculateRange, 
             passing the forceCalculations argument as True.</remarks>
            <param name="range">GridRangeInfo object that specifies the cells to be recalculated.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RecalculateRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean)">
            <summary>
            Recalculates any formula cells in the specified range.
            </summary>
            <param name="range">GridRangeInfo object that specifies the cells to be recalculated.</param>
            <param name="forceCalculations">Determines whether the calculations on non-visible
            cells are performed immediately or delayed until the next time the cell is drawn.
            For visible cells, the calculations are done immediately.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RecalculateRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,System.Boolean,System.Boolean)">
            <summary>
            Recalculates any formula cells in the specified range.
            </summary>
            <param name="range">GridRangeInfo object that specifies the cells to be recalculated.</param>
            <param name="forceCalculations">Determines whether the calculations on non-visible
            cells are performed immediately or delayed until the next time the cell is drawn.
            For visible cells, the calculations are done immediately.</param>
            <param name="forceParsing">When forceParsing is False, a formula is only 
            re-parsed if FormulaTag is NULL, or FormulaTag.Formula is empty. Otherwise, the existing
            parsed formula in FormulaTag.Formula is used to perform the calculation. The value
            of forceParsing only affects the Engine if forceCalculations is True.</param>
            <remarks> This method does not do anything if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.CalculatingSuspended"/> is true.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RecalculateRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfo,Syncfusion.WinRT.Controls.Grid.GridModel,System.Boolean,System.Boolean)">
            <summary>
            Recalculates any formula cells in the specified range.
            </summary>
            <param name="range">GridRangInfo object that specifies the cells to be recalculated.</param>
            <param name="grd">The GridModel object where the range to be updated is located.</param>
            <param name="forceCalculations">Determines whether the calculations on non-visible
            cells are performed immediately or delayed until the next time the cell is drawn.
            For visible cells, the calculations are done immediately.</param>
            <param name="forceParsing">When forceParsing is False, a formula is only 
            re-parsed if FormulaTag is NULL, or FormulaTag.Formula is empty. Otherwise, the existing
            parsed formula in FormulaTag.Formula is used to perform the calculation. The value
            of forceParsing only affects the Engine if forceCalculations is True.</param>
            <remarks> This method does not do anything if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.CalculatingSuspended"/> is True.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.AdjustReferences(System.String,System.Int32,System.Int32)">
            <summary>
            Helper method for adjusting formulas.
            </summary>
            <param name="origText">Valid unparsed formula string.</param>
            <param name="rowOffset">Row offset adjusmtent to be made to the origText.</param>
            <param name="colOffset">Column offset adjustment to be made to the origText</param>
            <returns>Unparsed formula string derived from origText by adjusting the row 
            and column references.
            </returns>
            <remarks>
            For example, calling AdjustReferences("=A4+C4", 2, 1) returns the string "=B6+D6".
            This is a helper method that is used to adjust formula references for inserted and
            deleted rows and columns. Normally, you would not need this method unless you 
            are managing formulas outside the GridControl as in a virtual GridControl or a 
            GridDataBoundGrid. This AdjustReferences implementation does not support 
            updating references with sheet names within the formulas.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.AdjustReferences(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Helper method for adjusting formulas.
            </summary>
            <param name="origText">Valid unparsed formula string.</param>
            <param name="rowOffset">Row offset adjusmtent to be made to the origText.</param>
            <param name="colOffset">Column offset adjustment to be made to the origText</param>
            <param name="sheetNameWhereCopied">The name of the sheet where the copy took place.</param>
            <param name="currentSheetName">The name of the sheet where the cell holding origText is located.</param>
            <returns>Unparsed formula string derived from origText by adjusting the row 
            and column references.
            </returns>
            <remarks>
            This AdjustReferences implementation does support 
            updating references with sheet names within the formulas.</remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.FormulaErrorStrings">
            <summary>
            String array that holds the strings used in error messages within the Formula Engine.
            </summary>
            <remarks>If you want to change the error messages displayed within the Formula Engine,
            you can set the new strings into the appropriate position in the FormulaErrorStrings 
            array. You should assign your new
            strings to the corresponding positions. 
            </remarks>
            <example>Here is the code that shows position of each string in FormulaErrorStrings:
            <code lang="C#">
            	public string[] FormulaErrorStrings = new string[]
            	{
            		"binary operators cannot start an expression",	//0
            		"cannot parse",									//1
            		"bad library",									//2
            		"invalid char in front of",						//3
            		"number contains 2 decimal points",				//4
            		"expression cannot end with an operator",		//5
            		"invalid characters following an operator",		//6
            		"invalid character in number",					//7
            		"mismatched parentheses",						//8
            		"unknown formula name",							//9
            		"requires a single argument",					//10
            		"requires 3 arguments",							//11
            		"invalid Math argument",						//12
            		"requires 2 arguments",							//13
            		"bad index",									//14
            		"too complex",									//15
            		"circular reference: ",							//16
            		"missing formula",								//17
            		"improper formula",								//18
            		"invalid expression",							//19
            		"cell empty"									//20
            		"bad formula",									//21
            		"empty expression",								//22
            		"Virtual Mode required - set UsesVirtualDataSource", //23
            		"mismatched string quotes",                     //24
            		"wrong number of arguments",                    //25
            		"invalid arguments",							//26
            		"iterations do not converge",                   //27
            		"Control named '{0}' is already registered",    //28
                    "Calculation overflow",							//29
                    "missing operand"							    //30
            	};
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ParseDecimalSeparator">
            <summary>
            Character recognized by the parsing engine as decimal separator for numbers.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ParseArgumentSeparator">
            <summary>
            Character recognized by the parsing code as the delimiter for arguments in a named formula's argument list.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.IsFormulaValid(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Checks if given string holds a valid formula.
            </summary>
            <param name="text">String to be tested.</param>
            <param name="parsedFormula">Tokenized string holding holding valid parsed formula.</param>
            <param name="errorMessage">Error message from the grid if string is invalid.</param>
            <param name="computedValue">Computed value from parsed formula.</param>
            <returns>True if string holds a valid formula, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.IsFormulaValid(System.String)">
            <summary>
            Checks if the given string holds a valid formula.
            </summary>
            <param name="text">String to be tested.</param>
            <returns>True if string holds a valid formula, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.Parse(System.String)">
            <summary>
            Parses a formula string into a tokenized string.
            </summary>
            <param name="text">The string to be parsed.</param>
            <returns>The parsed string.</returns>
            <remarks> 
             This method accepts a string that holds a formula, like =Sum(A1:B5), 
             and translates this string into a tokenized expression that can
             be computed using the ComputedValue method. Before 
             calling the method, you should set FormulaContextCell
             to properly reflect which cell owns this formula.
             The return value, which is 
             the tokenized string, is referred to as a parsed formula string.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.MarkNamedRanges(System.String@)">
            <summary>
            Replaces namedranges with their values.
            </summary>
            <remarks>
            Accepts a string such as Sin(SumRange), and tokenizes it into
            bqSIN[A1A4a]b which serves as input to ComputedValue.
            </remarks>
            <param name="argList">argList containing named ranges.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.MarkLibraryFormulas(System.String@)">
            <summary>
            Tokenizes all library references.
            </summary>
            <remarks>
            Accepts a string such as Sin(A1+A2), and tokenizes it into
            bqSIN[A1A2a]b which serves as input to ComputedValue.
            </remarks>
            <param name="formula">Formula to be tokenized.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.UpdateDependentNamedRangeCell(System.String)">
            <summary>
            Updates all cells that depend upon the given named range.
            </summary>
            <param name="key">The named range whose cells should be updated.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RemoveNamedRangeDependency(System.String)">
            <summary>
            Removes entries in the DependentNamedRangeCells collection for the given named range.
            </summary>
            <param name="key">The named range.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.SetNamedRangeDependency(System.String,System.String)">
            <summary>
            Adds a cell to the DependentNamedRangeCells list.
            </summary>
            <param name="key">The named range.</param>
            <param name="cell1">The cell (such as C11 or AJ232).</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.AdjustNameRangesForSize">
            <summary>
            Orders a namedrange collection according to string length.
            </summary>
            <remarks>The GridFormulaEngine needs an ordered list of named ranges 
            to be able to properly parse named ranges. If you manually add named ranges
            to namedranges, then you should call this method afterwards.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.AddNamedRange(System.String,System.String)">
            <summary>
            Adds a named range to the namedranges collection.
            </summary>
            <param name="name">The name of the range to be added.</param>
            <param name="range">The range to be added.</param>
            <returns>True if successfully added, False otherwise.</returns>
            <remarks>
            The range should be a string such as A4:C8.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RemoveNamedRange(System.String)">
            <summary>
            Removes a range from the namedranges collection.
            </summary>
            <param name="name">The name of the range to be removed.</param>
            <returns>True is successfully remove, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.AddFunction(System.String,Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.LibraryFunction)">
            <summary>
            Adds a function to the Function Library.
            </summary>
            <param name="name">The name of the function to be added.</param>
            <param name="func">The function to be added.</param>
            <returns>True if successfully removed, False otherwise.</returns>
            <remarks>
            LibraryFunction is a delegate the defines the signature of functions that
            you can add to the Function Library.
            <code>
            public delegate string LibraryFunction(string args);
            </code>
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RemoveFunction(System.String)">
            <summary>
            Removes a function from the Function Library.
            </summary>
            <param name="name">The name of the function to be removed.</param>
            <returns>True if successfully removed, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAvg(System.String)">
            <summary>
            Returns the simple average of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the simple average of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeOr(System.String)">
            <summary>
            Returns the inclusive OR of all values treated as logical values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers. Each item in the list is considered True if it is nonzero,
            and False if it is zero.</param>
            <returns>A string holding the OR of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAnd(System.String)">
            <summary>
            Returns the AND of all values treated as logical values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers. Each item in the list is considered True if it is nonzero,
            and False if it is zero.</param>
            <returns>A string holding the AND of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNot(System.String)">
            <summary>
             Flips the logical value represented by the argument.
            </summary>
            <remarks>
            The argument is
            treated as a logical expression with a non-zero value considered True and a zero value considered False.
            </remarks>
            <param name="args">A string holding either a single argument consisting of a 
            cell reference, a formula, or a number. 
            </param>
            <returns>Returns 0 if the argument evaluates to a non-zero value. Otherwise, it returns 1.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIf(System.String)">
            <summary>
            Conditionally computes one of two alternatives depending upon a logical expression.
            </summary>
            <remarks>
            The first argument is
            treated as a logical expression with a non-zero value considered True and a zero value considered False.
            The value of only one of the alternatives is computed depending upon the logical expression.
            </remarks>
            <param name="args">A string holding a list of three arguments. 
            </param>
            <returns>Returns a string holding the second argument if the first argument is True (non-zero). Otherwise, it returns a string holding the third argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSum(System.String)">
            <summary>
            Returns the sum of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the sum of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMax(System.String)">
            <summary>
            Returns the maximum value of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the maximum value of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMin(System.String)">
            <summary>
            Returns the minimum value of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the minimum value of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePI(System.String)">
            <summary>
            Returns the number pi.
            </summary>
            <param name="args">Ignored. Can be empty.</param>
            <returns>A string holding the number pi.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSign(System.String)">
            <summary>
            Returns a number indicating the sign of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding a number representing the sign of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePow(System.String)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="args">String containing two parameters separated by commas:
            the first being base number,
            the second being the exponent.</param>
            <returns>A string holding the value of the base number raised to the exponent.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAcos(System.String)">
            <summary>
            Computes angle whose cosine is the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding angle whose cosine is the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAsin(System.String)">
            <summary>
            Computes angle whose sine is the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding angle whose sine is the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAtan(System.String)">
            <summary>
            Computes angle whose tangent is the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the tangent of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCos(System.String)">
            <summary>
            Computes the cosine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the cosine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSin(System.String)">
            <summary>
            Computes the sine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the sine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCosh(System.String)">
            <summary>
            Computes the hyperbolic cosine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the hyperbolic cosine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSinh(System.String)">
            <summary>
            Computes the hyperbolic sine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the hyperbolic sine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTanh(System.String)">
            <summary>
            Computes the hyperbolic tangent of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the hyperbolic tangent of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCeiling(System.String)">
            <summary>
            Computes the smallest whole number greater than or equal to the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the smallest whole number greater than or equal to the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFloor(System.String)">
            <summary>
            Computes the largest whole number less than or equal to the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the largest whole number less than or equal to the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLn(System.String)">
            <summary>
            Computes the natural logarithm of the value in the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding natural logarithm of the value in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLog(System.String)">
            <summary>
            Computes the logarithm of the first value using the second value as the base.
            </summary>
            <param name="argList">A cell reference, formula, or number.</param>
            <returns>A string holding logarithm of the value in the argument using the second argument as the base.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLog10(System.String)">
            <summary>
            Computes the base 10 logarithm of the value in the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding base 10 logarithm of the value in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeExp(System.String)">
            <summary>
            Computes e raised to the value of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the e raised to the value of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSqrt(System.String)">
            <summary>
            Computes the square root of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the square root of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAbs(System.String)">
            <summary>
            Computes the absolute value of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the absolute value of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTan(System.String)">
            <summary>
            Computes the tangent the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the tangent of the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRand(System.String)">
            <summary>
            Returns an evenly distributed random number greater than or equal
            zero and less than one.
            </summary>
            <param name="args">Ignored. Can be empty.</param>
            <returns>A string holding the random number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSumIf(System.String)">
            <summary>
            Computes the sum of range2
            if the item in the range1 satisfies the condition.
            </summary>
            <param name="range">Range1, condition, range2.</param>
            <returns>The conditional sum.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDb(System.String)">
            <summary>
            Computes the declining balance of an asset.
            </summary>
            <param name="argList"> Delimited string containing the initial cost, 
            salvage value, life of asset, period of calculation, and months in initial year.</param>
            <returns>Declining balance.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDdb(System.String)">
            <summary>
            Computes the double declining balance of an asset.
            </summary>
            <param name="argList"> Delimited string containing the initial cost, 
            salvage value, life of asset, period of calculation, factor.</param>
            <returns>Double declining balance.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFv(System.String)">
            <summary>
            Computes the future value of an investment.
            </summary>
            <param name="argList"> Delimited string containing the rate as percentage per period, 
            number of periods, payment per period, present value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Future value of an investment.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIpmt(System.String)">
            <summary>
            Computes the interest payment for a period.
            </summary>
            <param name="argList"> Delimited string containing the rate as percentage per period, the period,
            number of periods, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIrr(System.String)">
            <summary>
            Computes the internal rate of return of a series of cash flows.
            </summary>
            <param name="argList"> Delimited string containing a range of cells and an initial guess.</param>
            <returns>Internal rate of return.</returns>
            <remarks>
            This IRR calculation uses Newton's method to approximate a root of 
                      f(r) = Sum( values[i]/(1+r)^i) = 0
            where the Sum index is i = 1 to the number of values. The algorithm returns a value if 
            the relative difference between root approximations is less than 1e-5. It fails if this
            accuracy is not attained in 20 iterations.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeXirr(System.String)">
            <summary>
            Computes the internal rate of return of a series of cash flows.
            </summary>
            <param name="argList">values, dates, guess. Values and dates are ranges of cells holding the values and dates.
            Guess is the initial guess. The first date is the the start date for the calculation.</param>
            <returns>Internal rate of return.</returns>
            <remarks>
            This XIRR calculation is similar to IRR except that the values are not equally spaced in time.
             The algorithm returns a value if 
            the relative difference between root approximations is less than 1e-5. It fails if this
            accuracy is not attained in 20 iterations.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIspmt(System.String)">
            <summary>
            Computes the simple interest payment.
            </summary>
            <param name="argList"> Delimited string containing the rate as percentage per period, the period,
            number of periods, and present value.</param>
            <returns>Interest payment.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMirr(System.String)">
            <summary>
            Computes the modified internal rate of return of a series of cash flows.
            </summary>
            <param name="argList"> Delimited string containing a range of cells, 
            finance interest rate, and a reinvest interest rate.</param>
            <returns>Modified internal rate of return.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNper(System.String)">
            <summary>
            Computes the number of periods in an investment.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period, 
            payment per period, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Number of periods.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNpv(System.String)">
            <summary>
            Computes the net present value of an investment.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period  
            and a list of invested values.</param>
            <returns>Net present value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePmt(System.String)">
            <summary>
            Computes the payment for a loan.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period, 
            number of periods, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Payment amount.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePpmt(System.String)">
            <summary>
            Computes the principal payment for a period.
            </summary>
            <param name="argList"> Delimited string containing the rate as percentage per period, the period,
            number of periods, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Principal payment.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePv(System.String)">
            <summary>
            Computes the present value of an investment.
            </summary>
            <param name="argList"> Delimited string containing the rate as percentage per period, 
            number of periods, payment per period, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Present value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRate(System.String)">
            <summary>
            Computes the internal rate of return of a series of cash flows.
            </summary>
            <param name="argList"> Delimited string containing a range of cells and an initial guess.</param>
            <returns>Internal rate of return.</returns>
            <remarks>
            This IRR calculation uses Newton's method to approximate a root of 
                      f(r) = Sum( values[i]/(1+r)^i) = 0
            where the Sum index is i = 1 to the number of values. The algorithm returns a value if 
            the relative difference between root approximations is less than 1e-7. It fails if this
            accuracy is not attained in 20 iterations.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSln(System.String)">
            <summary>
            Computes the straight-line depreciation of an asset per period.
            </summary>
            <param name="argList"> Delimited string containing the cost, 
            salvage value, and life.</param>
            <returns>Depreciation.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSyd(System.String)">
            <summary>
            Computes the sum of years digits depreciation of an asset per period.
            </summary>
            <param name="argList"> Delimited string containing the cost, 
            salvage value, life, and period.</param>
            <returns>Depreciation for the requested period.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeVdb(System.String)">
            <summary>
            Computes the variable declining balance of an asset
            </summary>
            <param name="argList"> Delimited string containing the initial cost, 
            salvage value, life of asset, period of calculation, factor.</param>
            <returns>Variable declining balance.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAcosh(System.String)">
            <summary>
            The inverse of Cosh.
            </summary>
            <param name="args">Value >= 1.</param>
            <returns>ACosh(value).</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAsinh(System.String)">
            <summary>
            The inverse of Sinh.
            </summary>
            <param name="args">Value.</param>
            <returns>ASinh(value).</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAtanh(System.String)">
            <summary>
            The inverse of Tanh.
            </summary>
            <param name="args">|Value| &lt; 1.</param>
            <returns>ATanh(value).</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAtan2(System.String)">
            <summary>
            The ArcTangent of the x and y values. 
            </summary>
            <param name="argList">x_value and y_value.</param>
            <returns>Angle whose tangent is y_value/x_value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCombin(System.String)">
            <summary>
            The number of combinations of a given number of items. 
            </summary>
            <param name="argList">number, number_items.</param>
            <returns>The number of combinations.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDegrees(System.String)">
            <summary>
            Converts radians into degrees.
            </summary>
            <param name="args">Value in radians.</param>
            <returns>Degrees.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeEven(System.String)">
            <summary>
            Rounds up to larger in magnitude even number.
            </summary>
            <param name="args">Number to be rounded.</param>
            <returns>Rounded even value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFact(System.String)">
            <summary>
            Factorial of a given number.
            </summary>
            <param name="args">x.</param>
            <returns>x!.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeOdd(System.String)">
            <summary>
            Rounds up to larger in magnitude odd number.
            </summary>
            <param name="args">Number to be rounded.</param>
            <returns>Rounded odd value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRadians(System.String)">
            <summary>
            Converts degrees into radians.
            </summary>
            <param name="args">Value in degrees.</param>
            <returns>Radians.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRound(System.String)">
            <summary>
            Rounds a number to a specified number of digits.
            </summary>
            <param name="argList">Number and number of digits.</param>
            <returns>Rounded number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRounddown(System.String)">
            <summary>
            Rounds a number to a specified number of digits.
            </summary>
            <param name="argList">Number and number of digits.</param>
            <returns>Rounded number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRoundup(System.String)">
            <summary>
            Rounds a number to a specified number of digits.
            </summary>
            <param name="argList">Number and number of digits.</param>
            <returns>Rounded number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSumsq(System.String)">
            <summary>
            Returns the sum of the square of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the sum of the squares of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSumx2my2(System.String)">
            <summary>
            Returns the sum of the differences of squares of the two ranges.
            </summary>
            <param name="range">x_range and y_range.</param>
            <returns>A string holding sum of the differences of squares.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSumx2py2(System.String)">
            <summary>
            Returns the sum of the sums of squares of the two ranges.
            </summary>
            <param name="range">x_range and y_range.</param>
            <returns>A string holding sum of the sums of squares.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSumxmy2(System.String)">
            <summary>
            Returns the sum of the squares of the differences between two ranges.
            </summary>
            <param name="range">x_range and y_range.</param>
            <returns>A string holding sum of the squares of the differences.</returns>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.Treat1900AsLeapYear">
            <summary>
            Specifies if 1900 should be treated as Leap Year (Excel Compatibility)
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDate(System.String)">
            <summary>
            Returns the number of days since 01 Jan 1900.
            </summary>
            <param name="argList">Year, month, and day.</param>
            <returns>Number of days.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDatevalue(System.String)">
            <summary>
            Returns the number of days since 01 Jan 1900.
            </summary>
            <param name="argList">Text containing a date.</param>
            <returns>Number of days.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDay(System.String)">
            <summary>
            Returns the day of the serial number date.
            </summary>
            <param name="argList">Serial number date.</param>
            <returns>Day.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDays360(System.String)">
            <summary>
            Number of days between 2 dates using 360 day year.
            </summary>
            <param name="argList">Serial number date1, serial number date1, and method.</param>
            <returns>Days between the dates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeHour(System.String)">
            <summary>
            Returns the hour of the given time.
            </summary>
            <param name="argList">Given time.</param>
            <returns>Hour.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMinute(System.String)">
            <summary>
            Returns the Minute of the given time.
            </summary>
            <param name="argList">Given time.</param>
            <returns>Minute.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSecond(System.String)">
            <summary>
            Returns the second of the given time.
            </summary>
            <param name="argList">Given time.</param>
            <returns>Second.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMonth(System.String)">
            <summary>
            Returns the month of the given date.
            </summary>
            <param name="argList">Given time.</param>
            <returns>Month.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNow(System.String)">
            <summary>
            Returns the current date and time as a date serial number.
            </summary>
            <param name="argList">Ignored.</param>
            <returns>Current date and time as serial number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeToday(System.String)">
            <summary>
            Returns the current date as a date serial number.
            </summary>
            <param name="argList">Ignored.</param>
            <returns>Current date as date serial number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTime(System.String)">
            <summary>
            Returns a fraction of a day.
            </summary>
            <param name="argList">Hour, minute, and second.</param>
            <returns>Fraction of a day.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTimevalue(System.String)">
            <summary>
            Returns a fraction of a day.
            </summary>
            <param name="argList">Time as a text string.</param>
            <returns>Fraction of a day.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeWeekday(System.String)">
            <summary>
            Day of the week.
            </summary>
            <param name="argList">Serial number date1 and return_type.</param>
            <returns>Days between the dates.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeYear(System.String)">
            <summary>
            Returns the year of the given date.
            </summary>
            <param name="argList">Given date.</param>
            <returns>Month.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAvedev(System.String)">
            <summary>
            Returns the average deviation of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the average deviation of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAveragea(System.String)">
            <summary>
            Returns the simple average of all values (including text) listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the simple average of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeGammaln(System.String)">
            <summary>
            Returns the natural logarithm of the gamma function.
            </summary>
            <param name="argList">The value to be evaluated.</param>
            <returns>Returns the natural logarithm of the gamma function.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeGammadist(System.String)">
            <summary>
            Returns the gamma distribution.
            </summary>
            <param name="argList">X, alpha, beta, cumulative.</param>
            <returns>Returns the gamma distribution.</returns>
            <remarks>
            X, alpha and beta should be positive real numbers. Cumulative should be either 
            True if you want to return the value of the distribution function, or False
            if you want to return the value of the density function. The distribution value
            is computed interactively using Trapezoidal Rule to six to seven significant digits
            or 20 iteration maximum.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeGammainv(System.String)">
            <summary>
            Returns the inverse of gamma distribution.
            </summary>
            <param name="argList">P, alpha, beta</param>
            <returns>Returns x such that gamma distribution at x is p.</returns>
            <remarks>
            P, alpha and beta should be positive real numbers, with p between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeGeomean(System.String)">
            <summary>
            Returns the geometric mean of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>The geometric mean of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeHarmean(System.String)">
            <summary>
            Returns the harmonic mean of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>The harmonic mean all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeHypgeomdist(System.String)">
            <summary>
            Returns the hypergeometric distribution.
            </summary>
            <param name="argList">Number of sample successes, number of sample, number of population successes, number of population.</param>
            <returns>Returns the gamma distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIntercept(System.String)">
            <summary>
            Returns the y-intercept of the least square fit line through the given points.
            </summary>
            <param name="range">y_range, x_range.</param>
            <returns>y-intercept.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeBinomdist(System.String)">
            <summary>
            Returns the binomial distribution.
            </summary>
            <param name="argList">Number of successes, number of trials, probability, cumulative.</param>
            <returns>Returns the binomial distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeChidist(System.String)">
            <summary>
            Returns the chi-squared distribution.
            </summary>
            <param name="argList">X degrees of freedom.</param>
            <returns>Returns the chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeChiinv(System.String)">
            <summary>
            Returns the inverse of the chi-squared distribution.
            </summary>
            <param name="argList">X degrees of freedom.</param>
            <returns>Returns the inverse of the chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeChitest(System.String)">
            <summary>
            Returns the Chi Test for independence.
            </summary>
            <param name="range">Actual_range, expected_range.</param>
            <returns>y-intercept.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNormdist(System.String)">
            <summary>
            Returns the normal distribution.
            </summary>
            <param name="argList">X, mean, standarddev, cumulative.</param>
            <returns>Returns the normal distribution.</returns>
            <remarks>
            Cumulative should be either 
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function. The distribution value
            is computed interactively using Trapezoidal Rule to six to seven significant digits
            or 20 iteration maximum.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNormsDist(System.String)">
            <summary>
            Returns the standard normal cumulative distribution function. The distribution has a mean of 0 (zero) and a standard deviation of one.
            <para>Syntax: NORMSDIST(z)</para>
            </summary>
            <param name="argList">Z is the value for which you want the distribution.</param>
            <returns>Returns string standard normal cumulative distribution function.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNorminv(System.String)">
            <summary>
            Returns the inverse of normal distribution.
            </summary>
            <param name="argList">P, mean, standard deviation.</param>
            <returns>Returns x such that normal distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNormsInv(System.String)">
            <summary>
            Returns the inverse of the standard normal cumulative distribution. The distribution has a mean of zero and a standard deviation of one.
            <para>Syntax: NORMSINV(p)</para>
            </summary>
            <param name="argList">p is a probability corresponding to the normal distribution.</param>
            <remarks>
            p should be between 0 and 1.
            </remarks>        
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeConfidence(System.String)">
            <summary>
            Returns a confidence interval radius.
            </summary>
            <param name="argList">Alpha, standard deviation, size.</param>
            <returns>Returns x such that normal distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCorrel(System.String)">
            <summary>
            Returns the correlation coefficient between the two sets of points.
            </summary>
            <param name="range">Range1, range2.</param>
            <returns>Correlation coefficient.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCount(System.String)">
            <summary>
            Returns the count of all values (including text) listed in the argument
            evaluate to a number.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the count of all numerical values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCounta(System.String)">
            <summary>
            Returns the count of all values (including text) listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the count of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCountblank(System.String)">
            <summary>
            Returns the count of blank cells listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the count of blank cells listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCountif(System.String)">
            <summary>
            Counts the cells specified by some criteria.
            </summary>
            <param name="argList">The criteria range, the criteria.</param>
            <returns>Returns string to the cell count</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCovar(System.String)">
            <summary>
            Returns the covariance between the two sets of points.
            </summary>
            <param name="range">Range1, range2.</param>
            <returns>Covariance.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeCritbinom(System.String)">
            <summary>
            Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.
            </summary>
            <param name="argList">Number of trials, probability, alpha.</param>
            <returns>Returns the critcal value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDevsq(System.String)">
            <summary>
            Returns the sum of the squares of the mean deviations.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>Sum of the squares of the mean deviation.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeExpondist(System.String)">
            <summary>
            Returns the exponential distribution.
            </summary>
            <param name="argList">X, lambda, cumulative.</param>
            <returns>Returns the exponential distribution.</returns>
            <remarks>
            Cumulative should be either 
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function. 
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFdist(System.String)">
            <summary>
            Returns the F (Fisher) probability distribution.
            </summary>
            <param name="argList">X, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns the F probability distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFinv(System.String)">
            <summary>
            Returns the inverse of F distribution.
            </summary>
            <param name="argList">P, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns x such that F distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFisher(System.String)">
            <summary>
            Returns the Fisher transformation of the input variable.
            </summary>
            <param name="argList">Input variable x.</param>
            <returns>Fisher transformation of x.</returns>
            <remarks>
            X should be between -1 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFisherinv(System.String)">
            <summary>
            Returns the inverse of Fisher transformation.
            </summary>
            <param name="argList">Input variable y.</param>
            <returns>The value x such that the Fisher transformation y is x.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeForecast(System.String)">
            <summary>
            Returns a forecasted value based on two sets of points using Least Square Fit regression.
            </summary>
            <param name="range">X, rangex, rangey.</param>
            <returns>Forecasted.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeKurt(System.String)">
            <summary>
            Returns the kurtosis of the passed-in values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>The kurtosis of the data.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLarge(System.String)">
            <summary>
            Returns the kth largest value in the range.
            </summary>
            <param name="range">Range, k.</param>
            <returns>Kth largest value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLognormdist(System.String)">
            <summary>
            Returns the lognormal distribution.
            </summary>
            <param name="argList">X, mean, standarddev.</param>
            <returns>Returns the lognormal distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLoginv(System.String)">
            <summary>
            Returns the inverse of the lognormal distribution.
            </summary>
            <param name="argList">P, mean, standarddev.</param>
            <returns>Returns the value x where the lognormal distribution of x is p.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMaxa(System.String)">
            <summary>
            Returns the maximum value of all values listed in the argument including logical values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the maximum value of all values listed in the argument.</returns>
            <remarks> True is treated as 1 and False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMedian(System.String)">
            <summary>
            Returns the median value in the range.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>Median value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMina(System.String)">
            <summary>
            Returns the minimum value of all values listed in the argument including logical values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the minimum value of all values listed in the argument.</returns>
            <remarks> True is treated as 1 and False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMode(System.String)">
            <summary>
            Returns the most frequent value in the range.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>The most frequent value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeNegbinomdist(System.String)">
            <summary>
            Returns the negative binomial distribution.
            </summary>
            <param name="argList">Number of failures, success threshold, probability, cumulative.</param>
            <returns>Returns the negative binomial distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePearson(System.String)">
            <summary>
            Returns the Pearson product moment correlation coefficient.
            </summary>
            <param name="range">range1, range2</param>
            <returns>Pearson product</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePercentile(System.String)">
            <summary>
            Returns the percentile position in the range.
            </summary>
            <param name="range">Range, k.</param>
            <returns>Percentile position.</returns>
            <remarks>K is a value between 0 and 1.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePercentrank(System.String)">
            <summary>
            Returns the percentage rank in the range.
            </summary>
            <param name="range">Range, x, signifcant digits.</param>
            <returns>Percentile position.</returns>
            <remarks>Signifcant digits are optional, defaulting to 3.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePermut(System.String)">
            <summary>
            The number of permutations of n items taken k at the time. 
            </summary>
            <param name="argList">N, k</param>
            <returns>The number of combinations.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputePoisson(System.String)">
            <summary>
            Returns the Poisson distribution.
            </summary>
            <param name="argList">X, mean, cumulative.</param>
            <returns>Returns the exponential distribution.</returns>
            <remarks>
            Cumulative should be either 
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function. 
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeProb(System.String)">
            <summary>
            Returns the probability that a value in the given range occurs.
            </summary>
            <param name="range">Xrange1, prange2, lowerbound, upperbound.</param>
            <returns>The probability.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeQuartile(System.String)">
            <summary>
            Returns the quartile position in the range.
            </summary>
            <param name="range">Range, q.</param>
            <returns>Percentile position.</returns>
            <remarks>Q is 0, 1, 2, 3, 4.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRank(System.String)">
            <summary>
            Returns the rank of x in the range.
            </summary>
            <param name="range">X, range, order.</param>
            <returns>Rank.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRsq(System.String)">
            <summary>
            Returns the square of the Pearson product moment correlation coefficient.
            </summary>
            <param name="range">Range1, range2.</param>
            <returns>Square of the Pearson product.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSkew(System.String)">
            <summary>
            Returns the skewness of a distribution.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>Skewness of a distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSlope(System.String)">
            <summary>
            Returns the slope of the least square fit line through the given points.
            </summary>
            <param name="range">Y_range, x_range.</param>
            <returns>y-intercept.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSmall(System.String)">
            <summary>
            Returns the kth smallest value in the range.
            </summary>
            <param name="range">Range, k.</param>
            <returns>Kth smallest value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeStandardize(System.String)">
            <summary>
            Returns a normalized value.
            </summary>
            <param name="argList">X, mean, stddev.</param>
            <returns>Normalized value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeStdev(System.String)">
            <summary>
            Returns the sample standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>The sample standard deviation.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeStdeva(System.String)">
            <summary>
            Returns the sample standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>The sample standard deviation.</returns>
            <remarks>Treats True as 1 and False as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeStdevp(System.String)">
            <summary>
            Returns the population standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>The population standard deviation.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeStdevpa(System.String)">
            <summary>
            Returns the population standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.
            </param>
            <returns>The population standard deviation.</returns>
            <remarks>Treats True as 1 and False as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSteyx(System.String)">
            <summary>
            Returns the standard error of the least square fit line through the given points.
            </summary>
            <param name="range">Y_range, x_range.</param>
            <returns>Standard error.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTrimmean(System.String)">
            <summary>
            Returns the mean of the range after removing points on either extreme.
            </summary>
            <param name="range">Range, percent.</param>
            <returns>Kth smallest value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeVar(System.String)">
            <summary>
            Returns sample variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>The sample variance.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeVara(System.String)">
            <summary>
            Returns sample variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>The sample variance.</returns>
            <remarks> True is treated as 1 and False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeVarp(System.String)">
            <summary>
            Returns population variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>The population variance.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeVarpa(System.String)">
            <summary>
            Returns population variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>The population variance.</returns>
            <remarks> True is treated as 1 and False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeWeibull(System.String)">
            <summary>
            Returns the Weibull distribution.
            </summary>
            <param name="argList">X, alpha, beta, cumulative.</param>
            <returns>Returns the Weibull distribution.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeZtest(System.String)">
            <summary>
            Returns the one-tailed probability value of a Z test.
            </summary>
            <param name="range">Range, mu, sigma.</param>
            <returns>Kth smallest value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeHLookUp(System.String)">
            <summary>
            Returns a horizontal table look up value.
            </summary>
            <param name="range">Contains search value, table, return index and match properties.</param>
            <returns>Matching value found in the table.</returns>
            <remarks> For example, =HLOOKUP("Axles",A1:C4,2,TRUE) looks for the exact 
            match for Axles in A1:C1 and returns the corresponding value in A2:C2. 
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeOffSet(System.String)">
            <summary>
            Returns a range that is the offset of the reference range by rows and cols.
            </summary>
            <param name="arg">reference, rows, cols, [height], [width]</param>
            <returns>A range offset.</returns>
            <remarks>The returned range is the range passed in through the reference variable offset
            by the number of rows in the rows variable and number of columns in the cols variable. If height and
            width are present in the argument list, they determine the number of rows and columns
            in the returned range. Otherwise, the dimensions of the returned range match the input range.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMatch(System.String)">
            <summary>
            Finds the index a specified value in a lookup_range.
            </summary>
            <param name="arg">look_value, lookup_range, match_type</param>
            <returns>The relative index of the lookup_value in the lookup_range.</returns>
            <remarks>
            Lookup_range should be a either a single row range or a single column range.
            If match_type is 0, the relative index of the first exact match (ignoring case)
            in the specified range is returned. If match_type is 1, the values in the range
            should be in ascending order, and the index of the largest value less than or
            equal to the lookup_value is returned. If match_type is -1, the values in the range
            should be in descending order, and the index of the smallest value greater than or
            equal to the lookup_value is returned.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeVLookUp(System.String)">
            <summary>
            Returns a vertical table look up value.
            </summary>
            <param name="range">Contains search value, table, return index and match properties.</param>
            <returns>Matching value found in the table.</returns>
            <remarks> For example, =VLOOKUP("Axles",A1:C4,2,TRUE) looks for the exact 
            match for Axles in A1:A4 and returns the corresponding value in B1:B4. 
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLeft(System.String)">
            <summary>
            Returns the left so many characters in the given string.
            </summary>
            <param name="range">Contains the string and the number of characters.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLen(System.String)">
            <summary>
            Returns the length of the given string.
            </summary>
            <param name="range">Contains the string.</param>
            <returns>An integer length.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMid(System.String)">
            <summary>
            Returns a substring of the given string.
            </summary>
            <param name="range">Contains the original string, start position of the substring, 
            and the number of characters in the substring.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeRight(System.String)">
            <summary>
            Returns the right so many characters in the given string.
            </summary>
            <param name="range">Contains the string and the number of characters.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.IsSeparatorInTIC(System.String)">
            <summary>
            Returns True if the ParseArgumentSeparator character is included in a string.
            </summary>
            <param name="s">The string to be searched.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetStringArray(System.String)">
            <summary>
            Returns an array of strings from an argument list.
            </summary>
            <param name="s">A delimited argument list.</param>
            <returns>Array of strings from an argument list.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeConcatenate(System.String)">
            <summary>
            Returns a single character string.
            </summary>
            <param name="range">List of strings to be concatenated.</param>
            <returns>A single string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIndirect(System.String)">
            <summary>
            Returns the reference specified by a text string. References are immediately evaluated to display their contents.
            <para>Syntax: INDIRECT(CellRefString, [IsA1Style])</para>
            </summary>
            <param name="args">Cell reference string.</param>
            <returns>Reference specified the argument.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSubstitute(System.String)">
            <summary>
            In a given string, this method substitutes an occurrence of one string with another string.
            </summary>
            <param name="range">A list of 3 or 4 arguments: the original string, the search string, the 
            replacement string, and optionally, an integer representing the occurrence to be replaced.
               </param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeProduct(System.String)">
            <summary>
            Returns the product of the arguments in the list.
            </summary>
            <param name="range">List of arguments.</param>
            <returns>Product of the arguments.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeText(System.String)">
            <summary>
            Returns a quoted string from a date or number.
            </summary>
            <param name="range">Value to be converted to a string.</param>
            <returns>Quoted string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeValue(System.String)">
            <summary>
            Returns a number.
            </summary>
            <param name="range">A date or number string.</param>
            <returns>A number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeMod(System.String)">
            <summary>
            Returns the remainder after dividing one number by another.
            </summary>
            <param name="range">Two numbers in a list.</param>
            <returns>The remainder.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeInt(System.String)">
            <summary>
            Returns the integer value.
            </summary>
            <param name="range">Number to be truncated.</param>
            <returns>An integer.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTrunc(System.String)">
            <summary>
            Truncates a number to an integer.
            </summary>
            <param name="range">Value and number of digits.</param>
            <returns>Truncated value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeSumProduct(System.String)">
            <summary>
            Returns the sum of the products of corresponding values.
            </summary>
            <param name="range">Two cell ranges.</param>
            <returns>Sum of the products.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsError(System.String)">
            <summary>
            Returns True is the string denotes an error.
            </summary>
            <param name="range">String to be tested.</param>
            <returns>True if the value is an error.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIfError(System.String)">
            <summary>
            Returns a value you specify if a formula evaluates to an error
            otherwise, returns the result of the formula.
            </summary>
            <param name="args">String to be tested.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsNumber(System.String)">
            <summary>
            Determines whether the string contains a number or not.
            </summary>
            <param name="range">String to be tested.</param>
            <returns>True if the string is a number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFalse(System.String)">
             <summary>
            Returns the logical value False. 
             </summary>
             <param name="empty">Empty string.</param>
             <returns>Logical False value string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTrue(System.String)">
            <summary>
            Returns the logical value True.
            </summary>
            <returns>Logical True value string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeDollar(System.String)">
            <summary>
            Converts a number to text using currency format.
            </summary>
            <param name="args">Number and the number of digits.</param>
            <returns>Currency format string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeFixed(System.String)">
            <summary>
            Rounds a number to the specified number of decimals, formats the number
            in decimal format using a period and commas, and return the result as text.
            </summary>
            <param name="args">
            Number, number of digits, a flag that prevents from include
            commas in the returned text.
            </param>
            <returns>Formatted number as string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeLower(System.String)">
            <summary>
            Converts text to lowercase.
            </summary>
            <param name="args">Value to convert.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeUpper(System.String)">
            <summary>
            Converts text to uppercase.
            </summary>
            <param name="args">Value to convert.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeAsc(System.String)">
            <summary>
            Changes full-width characters to half-width characters.
            </summary>
            <param name="args">Value to convert.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeTrim(System.String)">
             <summary>
             Removes all leading and trailing white-space characters.
             </summary>
             <param name="args">Value to trim.</param>
             <returns>
             The string that remains after all leading and trailing white-space characters
             were removed.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsLogical(System.String)">
            <summary>
            Determines whether the value is a logical value.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is a logical value, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsNA(System.String)">
            <summary>
            Determines whether the value is the #NA error value.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is the #NA error value, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsErr(System.String)">
            <summary>
            Returns True is the string denotes an error except #N/A.
            </summary>
            <param name="range">Value to be tested.</param>
            <returns>True if the value is an error except #N/A, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsBlank(System.String)">
            <summary>
            Determines whether the value is empty string.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is empty, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsText(System.String)">
            <summary>
            Determines whether the value is string or not.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is a string, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputeIsNonText(System.String)">
            <summary>
            Determines whether the value is not a string.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is not a string, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.IsCellReference(System.String)">
            <summary>
            Determines whether the arg is a valid cell name.
            </summary>
            <param name="args">Cell name.</param>
            <returns>True is the arg is a valid cell name, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.IsFormulaResultString(System.String,System.String)">
            <summary>
            Determines whether the computed value is a valid cell name.
            </summary>
            <param name="formula">Formula to </param>
            <param name="cell"></param>
            <returns>True if the computed value is string type, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RecurciveFormulaCheck(System.String,System.String)">
            <summary>
            Determines whether the computed value is a valid cell name 
            by checking all it dependent cells.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.InitLibraryFunctions">
            <summary>
            Creates and initially loads the Function Library with the supported functions.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetCellsFromArgs(System.String)">
            <summary>
            Accepts an argument string and returns a string array of cells.
            </summary>
            <remarks>
            Converts arguments in these forms to a string array of individual cells.<para/>
            	A1,A2,B4,C1,...,D8<para/>
            	A1:A5<para/>
            	A1:C5<para/>
            </remarks>
            <param name="args">String containing a cell range.</param>
            <returns>String array of cells.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetValueFromGrid(System.Int32,System.Int32)">
            <summary>
            Conditionally gets either the formula value or the cell 
            value depending upon whether the requested cell is a FormulaCell.
            </summary>
            <param name="row">Row index of the requested cell.</param>
            <param name="col">Column index of the requested cell.</param>
            <returns>String holding either the cell value or the computed formula value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetValueFromGrid(System.String)">
            <summary>
            Conditionally gets either the formula value or the cell 
            value depending upon whether the requested cell is a FormulaCell.
            </summary>
            <param name="cell1">The alphanumeric cell label, like A1, or EE14.</param>
            <returns>String holding either the cell value or the computed formula value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetValueFromArg(System.String)">
            <summary>
            Computes the value contained in the argument.
            </summary>
            <remarks>
            This method takes the argument and checks whether it is a 
            parsed formula, raw number, or cell reference like A21.
            The return value is a string that holds the computed value of 
            the passed-in argument.
            </remarks>
            <param name="arg">A parsed formula, raw number, or cell reference.</param>
            <returns>A string with the computed number in it.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetValueFromArg(System.String,System.Boolean)">
            <summary>
            Computes the value contained in the argument.
            </summary>
            <remarks>
            This method takes the argument and checks whether it is a 
            parsed formula, raw number, or cell reference like A21.
            The return value is a string that holds the computed value of 
            the passed-in argument.
            </remarks>
            <param name="arg">A parsed formula, raw number, or cell reference.</param>
            <param name="returnString">If False, this method returns the empty 
            string if the arg is a string. If True, this method will return the string value.</param>
            <returns>A string with the arg value in it.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.RowIndex(System.String)">
            <summary>
            Returns the row index from a cell reference.
            </summary>
            <param name="s">String holding a cell reference such as C21 or AB11.</param>
            <returns>An integer with the corresponding row number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ColIndex(System.String)">
            <summary>
            Returns a column index from a cell reference.
            </summary>
            <param name="s">String holding a cell reference such as C21 or AB11.</param>
            <returns>An integer with the corresponding column number.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.MarkupResultToIncludeInFormula(System.String@)">
            <summary>
            Code copied form our CalcEngine (Syncfusion.Calculate.Base ) to improve the nested if calculation
            </summary>
            <param name="s">string</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ComputedValue(System.String)">
            <summary>
            Computes the value of a parsed formula.
            </summary>
            <param name="formula">The formula to be computed.</param>
            <returns>A string holding the computed value.</returns>
            <remarks> 
             The string passed into ComputedValue must have been parsed using the Parse
             method. Before calling the method, you should set FormulaContextCell
             to properly reflect which cell owns this formula.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.IsDirty(Syncfusion.WinRT.Controls.Grid.GridFormulaTag)">
            <summary>
            Returns whether or not the calculation for this GridFormulaTag is current or not.
            </summary>
            <param name="tag">The GridFormulaTag to be tested.</param>
            <returns>Returns true if the tag has been computed with the most recent values, false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.SetDirty(Syncfusion.WinRT.Controls.Grid.GridFormulaTag)">
            <summary>
            Marks the underlying formula as dirty, indicating it needs to be recomputed. It does this by setting the Text property to null.
            </summary>
            <param name="tag">The GridFormulaTag to be marked as not computed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.GetFormulaText(System.String@)">
            <summary>
            Given a string, it returns a string that is passed through the FormulaParsing event
            to allow any listener to modify it.
            </summary>
            <param name="s">A string that is to be potentially parsed.</param>
            <returns>The string returned by GridFormulaParsingEventArgs.Text.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.IsCircularReference(System.String,System.String)">
            <summary>
            Determines whether the given formula at the given cell will cause a circular reference.
            </summary>
            <param name="cell">The alphanumeric cell label, like A1, or EE14.</param>
            <param name="formula">The formula to be tested.</param>
            <returns>True if the given formula causes a circular reference, false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.FormulaContextCell">
            <summary>
            Gets or sets the cell (in the column-row notation of A1 or E21) whose 
            formula is being parsed or computed.
            </summary>
            <remarks>
            This property should be set only if you are directly parsing and 
            computing formulas by calling the Parse or ComputedValue methods. In this 
            case, you should set the property before calling either method. FormulaContextCell
            is used to provide support for CurrentRowNotation, circular calculation checks,
            and reference updating.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.SupportBlanksInSheetNames">
            <summary>
            Gets or sets whether blanks are treated as significant in sheet names.
            </summary>
            <remarks>
            Earlier versions of GridFormulaEngine did not support the use of blanks
            in sheet names. (They were treated as insignificant.) The current version
            does treat blanks as significant. If you want to revert to the prior
            treatment of blanks in sheet names, then set this property to false.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.FixedReferenceOnlyOnPaste">
            <summary>
            Determines whether fixed references should be adjusted on other than paste.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.DependentCells">
            <summary>
            Contains a mapping between a cell and a list of formula cells that depend on it.
            </summary>
            <remarks>
            The key is the given cell, and the value is a Hashtable of cells containing
            formulas that reference this cell.
            </remarks>
            <example> Here is code that will list formula cells affected by changing the given cell.
            <code lang="C#">
            public void DisplayAllAffectedCells()
            {
            	GridFormulaEngine engine = ((GridCellFormulaModel)this.gridControl1.Model.CellModels["FormulaCell"]).Engine;
            
            	foreach(object o in engine.DependentCells.Keys)
            	{
            		string s1 = o as string;
            		Console.Write(s1 + " affects ");
            		Hashtable ht = (Hashtable) engine.DependentCells[s1];
            		foreach(object o1 in ht.Keys)
            		{
            			string s2 = o1 as string;
            			Console.Write(s2 + " ");
            		}
            		Console.WriteLine("");
            	}
            }
            </code>
            <code lang="VB">
            	Public Sub DisplayAllAffectedCells()
            		Dim engine As GridFormulaEngine = CType(Me.gridControl1.Model.CellModels("FormulaCell"), GridCellFormulaModel).Engine
            		Dim o As Object
            		For Each o In  engine.DependentCells.Keys
            			Dim s1 As String = CStr(o)
            			Console.Write((s1 + " affects "))
            			Dim ht As Hashtable = CType(engine.DependentCells(s1), Hashtable)
            			Dim o1 As Object
            			For Each o1 In  ht.Keys
            				Dim s2 As String = CStr(o1)
            				Console.Write((s2 + " "))
            			Next o1
            			Console.WriteLine("")
            		Next o
            	End Sub 'DisplayAllAffectedCells
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.DependentFormulaCells">
            <summary>
            Contains a mapping between a formula cell and a list of cells upon which it depends.
            </summary>
            <remarks>
            The key is the given formula cell, and the value is a Hashtable of cells that this 
            formula cell references.
            </remarks>
            <example> Here is code that lists formula cells affected by changing a given cell:
            <code lang="C#">
            	public void DisplayAllFormulaDependencies()
            	{
            		GridFormulaEngine engine = ((GridCellFormulaModel)this.gridControl1.Model.CellModels["FormulaCell"]).Engine;
            		
            		foreach(object o in engine.DependentFormulaCells.Keys)
            		{
            			string s1 = o as string;
            			Console.Write(s1 + " depends upon ");
            			Hashtable ht = (Hashtable) engine.DependentFormulaCells[s1];
            			foreach(object o1 in ht.Keys)
            			{
            				string s2 = o1 as string;
            				Console.Write(s2 + " ");
            			}
            			Console.WriteLine("");
            		}
            	}
            </code>
            <code lang="VB">
            	Public Sub DisplayAllFormulaDependencies()
            		Dim engine As GridFormulaEngine = CType(Me.gridControl1.CellModels("FormulaCell"), GridCellFormulaModel).Engine
              
            		Dim o As Object
            		For Each o In  engine.DependentFormulaCells.Keys
            			Dim s1 As String = CStr(o)
            			Console.Write((s1 + " depends upon "))
            			Dim ht As Hashtable = CType(engine.DependentFormulaCells(s1), Hashtable)
            			Dim o1 As Object
            			For Each o1 In  ht.Keys
            				Dim s2 As String = CStr(o1) 
            				Console.Write((s2 + " "))
            			Next o1
            			Console.WriteLine("")
            		Next o
            	End Sub 'DisplayAllFormulaDependencies
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.MaximumCircularChecks">
            <summary>
            Gets / sets the number of recursive checks done
            for circular references.
            </summary>
            <remarks>
            When you edit a cell, the engine parsing will attempt
            to flag circular references as an error. This value sets the
            number of dependent cells it will check before assuming there
            is no circular reference. Checking every reference can be 
            time consuming depending upon the formulas being used. This
            property lets you decide how many recursions the engine will 
            allow when looking for circular references. The default value
            is -1 meaning no checks are done as you type formula into the 
            cell. Setting this property to int.MaxValue will make the 
            engine check all dependent cells for a circular reference.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.DoCircularCheckInValidating">
            <summary>
            Gets or sets whether circular references should be checked in 
            the CurrentCell.Validating event.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.CloneableFormulaTags">
            <summary>
            Gets / sets whether FormulaTags are cloned when
            setting one FormulaTag object equal to another. 
            </summary>
            <remarks>
            This is by default set to False as normally the FormulaEngine
            expects to be working with referenced objects, and not clones 
            of referenced objects.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.UsesVirtualDataSource">
            <summary>
            Indicates whether the underlying data is virtually bound to the grid.
            </summary>
            <remarks>If the formula engine knows the data is stored within a GridControl.Data
            object, it can optimize data access. If the grid is being populated through
            virtual techniques (handling QueryCellInfo), the formula engine has to get the data 
            through that means. The default value is to assume the data is coming from a virtual
            datasource. There are some other situations, like formulas in headers or frozen cells, when
            this property should be set to True.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.CalculatingSuspended">
            <summary>
            Indicates whether formulas are immediately calculated as dependent cells are changed.
            </summary>
            <remarks>Use this property to suspend calculations while a series of changes 
            are made to dependent cells either by the user or programmatically. When the changes are 
            complete, set this property to False, and then call Engine.RecalculateRange to recalculate
            the affected range. See the sample in GridCellFormulaModel.CalculatingSuspended.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.MaximumRecursiveCalls">
            <summary>
            Specifies the maximum number of recursive calls that can be used to compute a cellvalue.
            </summary>
            <remarks>This property comes into play when you have a calculated formula cell that depends on  
            another calculated formula that depends on another calculated formula and so on. If the 
            'depends on another formula' number exceeds MaximumRecursiveCalls, you will see a Too Complex message
            displayed in the cell. The default value is 100, but you can set it higher or lower depending upon 
            your expected needs. The purpose of the limit is to avoid a circular reference locking up your
            application.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.CurrentRowNotationEnabled">
            <summary>
            Enables / disables using row = 0 in formulas to represent the current row.
            </summary>
            <remarks> 
            When this property is set True, entering zero as a row in a formula is
            interpreted to be the current row. Using the current row notation allows
            you to sort a column in the grid and maintain the relative formula. 
            After sorting, you do have to call engine.RecalculateRange to allow the
            relative formulas to reset themselves. 
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ForceParsingOfLibraryFunctionArguments">
            <summary>
            Gets or sets whether all function arguments are parsed using GridFormulaEngine.Parse.
            </summary>
            <remarks>
            If you are using NamedRanges or CurrentRowNotationEnabled inside function arguments, 
            you should set this property 
            to true to make sure the proper substitutions are done on the arguments.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.NamedRanges">
            <summary>
            Gets the named range Hashtable.
            </summary>
            <remarks>
            The key is the uppercase name and the value is the range for this name.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.NamedRangesOriginalNames">
            <summary>
            Gets the named range Hashtable that holds the original case name as the value.
            </summary>
            <remarks>
            The key is the uppercase name and the value is the original name.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.NamedRangesSized">
            <summary>
            Holds namedranges in order of string length.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.DependentNamedRangeCells">
            <summary>
            Holds hashtables containing cells that depend upon namedranges.
            </summary>
            <remarks>
            The key properties in DependentNamedRangeCells are namedranges. The
            value properties are hashtables.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.LibraryFunctions">
            <summary>
            Contains the current library functions.
            </summary>
            <remarks>
            This field gives you direct access to all Library Functions. 
            The function name serves as the hash key, and the function delegate
            serves as the hash value.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.UseCommonLibrary">
            <summary>
            Gets or sets whether you want all grids to share the same collection of library functions.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.UseNoAmpersandQuotes">
            <summary>
            Gets or sets whether strings concatenated using the ampersand operator should 
            be returned inside double quote marks.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.MaximumStackDepth">
            <summary>
            Depth of the engine's calculation stack.
            </summary>
            <remarks>
            It is unlikely that you will need to adjust this value, as
            its default value of 100 is quite large.
            Any time a formula is to be computed, a Stack object is created
            with this number of elements to hold temporary calculations
            as the formula is being computed. 
            For example, this formula: 1+1+1+...+1 requires a stack 
            depth of 2 as there are only 2 temporary values needed as the 
            formula is evaluated. However, this formula: 1+(1+(1+(1+1)))
            requires a depth of 5, as the five 1's are pushed onto the 
            stack before the first addition (the right-most one) is
            performed.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.FunctionEngineContext">
            <summary>
            Gets the formula engine that holds the proper state information for LibraryFunction call.
            </summary>
            <remarks>
            If you are adding your own custom library functions and need to access GridFormulaEngine members like
            GetCellsFromArgs or GetValueFromArg from your code, then you should use this static property to retrieve the proper
            GridFormulaEngine object. This only matters if you are using multiple grids that you have registered using
            RegisterGridAsSheet, and are adding your own custom formulas. Note that GridFormulaEngine.FunctionEngineContext
            is only defined within the scope of a library function call, and will be null at all other times.
            </remarks>
            <example> Use GridFormulaEngine.FunctionEngineContext to retrieve the engine 
            when writing custom functions.
            <code lang="C#">
            public string ComputeSumPosNums(string args)
            {
            	GridFormulaEngine engine = GridFormulaEngine.FunctionEngineContext;
            	string sum = "";
            	foreach(string r in args.Split(new char[]{','}))
            	{
            		if(r.IndexOf(':') > -1) //is a cellrange
            		{
            			foreach(string s in engine.GetCellsFromArgs(r))
            			{
            				s1 = engine.GetValueFromArg(s).Replace("'","");
            				//... do some calculations to compute sum
            			}
            		}
            	}	
            	return sum.ToString();
            }
            </code>
            <code lang="VB">
            Public Function ComputeSumPosNums(args As String) As String
               Dim engine As GridFormulaEngine = GridFormulaEngine.FunctionEngineContext
               Dim sum As String = ""
               Dim r As String
               For Each r In  args.Split(New Char() {","c})
            		If r.IndexOf(":"c) > - 1 Then 'is a cellrange
            			Dim s As String
            			For Each s In  engine.GetCellsFromArgs(r)
            				s1 = engine.GetValueFromArg(s).Replace("'", "")
            				'... do some calculations to compute sum
            			Next s 
            		End If
               Next r
               Return sum.ToString()
            End Function 'ComputeSumPosNums
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.ActiveFunctionName">
            <summary>
            Returns the function name of the active function call. Empty if not in a call.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.AllowShortCircuitIFs">
            <summary>
            Gets or sets whether IF function calculations should specifically avoid
            computing the non-used alternative.
            </summary>
            <remarks>
            The default value is false for code legacy consistency. When AllowShortCircuitIFs  
            is set true, only the necessary alternative of an IF function is computed. To support
            this behavior, a change in how nested IF function calculations are done is necessary.
            The default way of calculating nested functions is inside-out, with the inner most 
            functions being computed to a value before the next outer function is evaluated. To 
            support short circuiting IF functions, nested IF functions need to be computed from 
            the outside-in to know what alternative needs to be evaluated. This outside-in calculation
            pattern only applies to IF functions, and only when AllowShortCircuitIFs is true.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.EnsureIFCallDuringShortCircuit">
            <summary>
            Gets or sets whether the IF function implementation is called when <see cref="P:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.AllowShortCircuitIFs"/> is true.
            The default behavior is to not call the IF Function code in the library, but instead, work directly with the
            IF clauses.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.FormulaParsing">
            <summary>
            Occurs whenever a string needs to be tested to determine whether it should be treated as a formula string and parsed,
            or be treated as a non-formula string. This event allows for preprocessing the unparsed formula.
            </summary>
            <remarks>This event may be raised more than once in the processing of a string into a formula.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.LenComparer">
            <summary>
            Used by AdjustNameRangesForSize to create an ArrayList
            ordered by string length.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.LenComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares 2 strings based on their length.
            </summary>
            <param name="x">String 1.</param>
            <param name="y">String 2.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFormulaEngine.LibraryFunction">
            <summary>
            Delegate used to define functions that you add to the Function Library.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridSheetFamilyItem">
            <summary>
            Encapsulates the properties that are needed to support multiple families of crossed-referenced grids.
            This class is for internal use only.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFormulaParsingEventHandler">
            <summary>
            Event delegate for the GridFormulaParsing event 
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFormulaParsingEventArgs">
            <summary>
            Used by the <see cref="!:GridFormulaParsing"/> event, GridFormulaParsingEventArgs holds a reference 
            to the string that is to be parsed. The GridFormulaParsing event allows the listener to preprocess
            the string that is being parsed.
            </summary>
            <remarks>
            Please note that this event may be raised more than once as a string is parsed. 
            </remarks>
            <example> Here is a code snippet that shows how to tell a grid to also treat any text in a formula cell 
            that begins with a minus(-) or a plus(+) as formulas. The default behavior is to treat only text beginning
            with equal(=) as formulas.
            <code lang="C#">
            	//subscribe to the event before any formulas are loaded into the grid...
            	this.engine = ((GridCellFormulaModel)gridControl1.CellModels["FormulaCell"]).Engine;
                this.engine.FormulaParsing += new GridFormulaParsingEventHandler(engine_FormulaParsing);
            	
            	//Here is the handler code that adds an = if necessary so any string beginning with +, - or =
                //is treated as a formula.
                  void engine_FormulaParsing(object sender, GridFormulaParsingEventArgs e)
                  {
                      //allow cells starting with + and - to be treated as formula cells.
                      if (e.Text.StartsWith("-"))
                           e.Text = "=" + e.Text;
                      else if (e.Text.StartsWith("+"))
                           e.Text = "=" + e.Text.Substring(1);
                  }         
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaParsingEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaParsingEventArgs.#ctor(System.String)">
            <summary>
            Holds a reference to the string that is to be parsed..
            </summary>
            <param name="text">The formula that is to be parsed.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaParsingEventArgs.Text">
            <summary>
            Get or sets the formula about to be parsed.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridShowFormulaBehavior">
            <summary>
            Specifies behavior for displaying formula text.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridShowFormulaBehavior.WhenEditing">
            <summary>
            Display the formula text only when the cell is actively being edited.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridShowFormulaBehavior.WhenCurrent">
            <summary>
            Display the formula text whenever the cell is the current cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridShowFormulaBehavior.Always">
            <summary>
            Always display the formula text.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridShowFormulaBehavior.Never">
            <summary>
            Never display the formula text.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFormulaTag">
            <summary>
            Support class that encapsulates the parsed formula and computed value
            for a cell.
            </summary>
            <remarks>
            This class holds the parsed value of the formula in its Formula property,
            and holds the computed value of the formula in its Text property. Each
            cell that is a formula cell stores a GridFormulaTag object in its GridStyleInfo.FormulaTag
            property. When the cell is drawn, if its GridFormulaTag.Formula property is empty,
            the formula in the GridStyleInfo.Text property is parsed, and placed into the
            GridFormulaTag.Formula property. If the GridFormulaTag.Text property is empty, the 
            GridFormulaTag.Formula is computed, and the computed value is stored in GridFormulaTag.Text.
            Thus, formulas are parsed and computed only when the GridFormulaTag member is empty,
            otherwise, the stored values are used. Emptying these properties is how the
            Formula Engine initiates a refresh of the calculated values when dependent
            cells are modified.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="formula">The parsed formula.</param>
            <param name="text">The computed value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="formula">The parsed formula.</param>
            <param name="text">The computed value.</param>
            /// <param name="row">The row at which this formula is being parsed.</param>
            <param name="col">The col at which this formula is being parsed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.ToString">
            <summary>
            Overriden.
            </summary>
            <returns>Displays the parsed formula and computed value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.Reset">
            <summary>
            Sets Text and Formula to null and ParsedRow and ParsedCol to -1.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.ResetText">
            <summary>
            Sets Text to null.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.ResetFormula">
            <summary>
            Sets Text and Formula to null.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.Formula">
            <summary>
            Gets / sets the parsed formula.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.ParsedRow">
            <summary>
            Gets the column where the formula was last parsed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.ParsedCol">
            <summary>
            Gets the column where the formula was last parsed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFormulaTag.Text">
            <summary>
            Get / sets text representing the computed value.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleIdentity.Dispose">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleIdentity.GetBaseStyles(Syncfusion.WinRT.Styles.IStyleInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleIdentity.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleIdentity.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStyleIdentity.Info">
            <summary>
            Results of ToString method.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle">
            <summary>
            GridBaseStyle represents base styles in the grid. A base style has a name and holds the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object
            with style information. Cells in the grid can reference a base style with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BaseStyle"/>.
            </summary>
            <remarks>
            The grid has four system-defined base styles:
            <list type="table">
            <listheader><term>Name</term><description>Descriptions</description></listheader>
            <item><term>Standard</term><description>Holds cell information for all cells.</description></item>
            <item><term>Header</term><description>Holds cell information for row and column headers.</description></item>
            <item><term>Row Header</term><description>Holds cell information specific to row headers.</description></item>
            <item><term>Column Header</term><description>Holds cell information specific to column headers.</description></item>
            </list>
            You can format each cell in the grid individually, but settings that have not been initialized will be inherited from a base style
            whereas the standard style is the style that any cell will inherit information from.
            <para/>
            You can register custom base styles with the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> map that you can access with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.BaseStylesMap"/>.
            <para/>
            Base styles themselves can be inherited from other base styles. The "Row Header" base style is derived from the "Header" base style for example.
            </remarks>
            <example>
            The following example shows how to modify base styles and how to add a new custom base style:
            <code lang="C#">
                GridStyleInfo standard = model.BaseStylesMap["Standard"].StyleInfo;
                GridStyleInfo header = model.BaseStylesMap["Header"].StyleInfo;
                GridStyleInfo rowHeader = model.BaseStylesMap["Row Header"].StyleInfo;
                GridStyleInfo colHeader = model.BaseStylesMap["Column Header"].StyleInfo;
            
                standard.TextColor = Color.FromArgb(0, 21, 84);
                header.Interior = new BrushInfo(GradientStyle.Vertical, Color.FromArgb(238, 234, 216), Color.FromArgb(203, 199, 184));
                rowHeader.Interior = new BrushInfo(GradientStyle.Horizontal, Color.FromArgb(238, 234, 216), Color.FromArgb(203, 199, 184));
                standard.Font.Facename = "Helvetica";
                standard.Interior = new BrushInfo(Color.FromArgb(237, 240, 247));
            
            
                GridStyleInfo customStyle = model.BaseStylesMap["Custom Style"].StyleInfo;
                standard.Interior = new BrushInfo(Color.Green);
                    model[1, 1].BaseStyle = "Custom Style";
            </code>
            </example>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> object.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.#ctor(System.String,System.Boolean,Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore,Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> with name and style information and associates it with a base styles map.
            </summary>
            <param name="name">The name of the base style.</param>
            <param name="isSystem">True if this is a system base style that cannot be deleted; False otherwise.</param>
            <param name="styleInfoStore">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> with style settings.</param>
            <param name="styleInfoMap">The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> for this base style.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.#ctor(System.String,System.Boolean,Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> with name and style information.
            </summary>
            <param name="name">The name of the base style.</param>
            <param name="isSystem">True if this is a system base style that cannot be deleted; False otherwise.</param>
            <param name="styleInfoStore">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> with style settings.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.#ctor(System.String,System.Boolean,Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> with name and style information.
            </summary>
            <param name="name">The name of the base style.</param>
            <param name="isSystem">True if this is a system base style that cannot be deleted; False otherwise.</param>
            <param name="styleInfo">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> with style settings.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> with a name.
            </summary>
            <param name="name">The name of the base style.</param>
            <param name="isSystem">True if this is a system base style that cannot be deleted; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.Clone">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> object and copies all properties from this object.
            </summary>
            <returns>The new created <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.ToString">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.Name">
            <summary>
            The base style name.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.IsSystem">
            <summary>
            Indicates if this a system style that cannot be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.BaseStylesMap">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> this base style belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.StyleInfo">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> with style settings for this base style.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> returned by this property is simply a wrapper for
            the settings in <see cref="P:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.StyleInfoStore"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStyle.StyleInfoStore">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> with style settings for this base style.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap">
            <summary>
            GridBaseStylesMap holds a collection of base styles for a grid and lets you add, remove, and change base styles.
            </summary>
            <remarks>
            A base style has a name and holds the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object
            with style information. Cells in the grid can reference a base style with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BaseStyle"/>.
            <para/>
            The grid has four system-defined base styles as discussed in <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> overview. The
            <see cref="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.RegisterStandardStyles"/> method adds these system styles to the collection.
            <para/>
            You can register custom base styles with the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> map that you can access with <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.BaseStylesMap"/>.
            <para/>
            Use <see cref="!:ShowGridBaseStylesMapDialog"/> to let users customize base styles at run-time.
            </remarks>
            <example>
            The following example shows how to modify base styles and how to add a new custom base style:
            <code lang="C#">
                GridStyleInfo standard = model.BaseStylesMap["Standard"].StyleInfo;
                GridStyleInfo header = model.BaseStylesMap["Header"].StyleInfo;
                GridStyleInfo rowHeader = model.BaseStylesMap["Row Header"].StyleInfo;
                GridStyleInfo colHeader = model.BaseStylesMap["Column Header"].StyleInfo;
            
                standard.TextColor = Color.FromArgb(0, 21, 84);
                header.Interior = new BrushInfo(GradientStyle.Vertical, Color.FromArgb(238, 234, 216), Color.FromArgb(203, 199, 184));
                rowHeader.Interior = new BrushInfo(GradientStyle.Horizontal, Color.FromArgb(238, 234, 216), Color.FromArgb(203, 199, 184));
                standard.Font.Facename = "Helvetica";
                standard.Interior = new BrushInfo(Color.FromArgb(237, 240, 247));
            
            
                GridStyleInfo customStyle = model.BaseStylesMap["Custom Style"].StyleInfo;
                standard.Interior = new BrushInfo(Color.Green);
                    model[1, 1].BaseStyle = "Custom Style";
            </code>
            </example>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/>
            <seealso cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.#ctor(Syncfusion.WinRT.Controls.Grid.GridBaseStyle[])">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> and copies an array of base styles.
            </summary>
            <param name="baseStyles">An array with <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> styles.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Clone">
            <summary>
            Creates a new instance <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/> and initializes it with all base styles from this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.GetBaseStylesMapStyles(System.String,System.Int32@)">
            <summary>
            Copies a base style and all base styles it depends on into an array.
            </summary>
            <param name="name">The name of the base style.</param>
            <param name="level">The maximum number of levels to look at when walking referenced
            base styles.</param>
            <returns>An array of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> objects with the first base style and all base styles it depends on.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.RegisterStandardStyles">
            <summary>
            Adds "Standard", "Header", "Row Header", and "Column Header" base styles.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.GetNewBaseStyleName">
            <summary>
            Gets a suggestion for a new base style name, e.g. when the user adds a new
            base style in the <see cref="!:GridBaseStyleCollectionEditor"/>.
            </summary>
            <returns>A string for a new base style name.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Add(Syncfusion.WinRT.Controls.Grid.GridBaseStyle)">
            <summary>
            Adds a base style to the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/>.
            </summary>
            <param name="baseStyle">The base style to be added.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Remove(System.String)">
            <summary>
            Removes the base style with the specified name.
            </summary>
            <param name="name">The name of the base style to be removed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.AddRange(Syncfusion.WinRT.Controls.Grid.GridBaseStyle[])">
            <summary>
            Adds a range of base styles to the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.CopyTo(Syncfusion.WinRT.Controls.Grid.GridBaseStyle[],System.Int32)">
            <summary>
            Copies all base styles into an array of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> starting at specified index.
            </summary>
            <param name="values">The array of <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> where the values should be copied to.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.GetEnumerator">
            <summary>
            Returns an enumerator that can enumerate through the base styles object in this collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Modified">
            <summary>
            Property Modified (bool)
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.InCollectionEditor">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Item(System.String)">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> for the specified name.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Item(System.Int32)">
            <summary>
            Gets / sets a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyle"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.Count">
            <summary>
            The number of base styles in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to base styles table.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.IsReadOnly">
            <summary>
            Gets a value indicating whether the base styles collection is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridBaseStylesMap.IsSynchronized">
            <summary>
            Gets a value indicating whether the base styles collection is synchronized.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Empty">
            <summary>
            An empty style object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.#ctor">
            <summary>
            Initalizes a new style object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.#ctor(Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Initalizes a new style object and copies all data from an existing style object.
            </summary>
            <param name="style">The style object that contains the original data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.#ctor(Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore)">
            <summary>
            Initalizes a new style object and associates it with an existing <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoIdentityBase)">
            <summary>
            Initalizes a new style object and associates it with an existing <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoIdentityBase,Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore)">
            <summary>
            Initalizes a new style object and associates it with an existing <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>.
            </param>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CreateSubObjectIdentity(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetOffLineCopy">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> and copies its cell and identity information from the current object. The new
            instance will be made offline so that changes in this style object are not be stored in the GridData
            </summary>
            <returns>A new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> instance.</returns>
            <remarks>
            Lets a style object load base styles and default values but disables
            saving changes back to the grid. (see OnStyleChanged below)
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetDefaultStyle">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetBackground">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Background"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetForeground">
            <summary>
            Resets text color information.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetAcceptsReturn">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AcceptsReturn"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetAutoWordSelection">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AutoWordSelection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetAllowRowResize">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AllowRowResize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetHorizontalAlignment">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HorizontalAlignment"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetTextWrapping">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextWrapping"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetTextTrimming">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextTrimming"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetMaxLength">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.MaxLength"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetVerticalAlignment">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.VerticalAlignment"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetBaseStyle">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BaseStyle"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetBorderMargins">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BorderMargins"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetTextMargins">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextMargins"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetPadding">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Padding"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetBorders">
            <summary>
            Resets the borders information.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetFont">
            <summary>
            Resets font information.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellItemTemplate">
            <summary>
            Resets <see cref="!:GridStyleInfo.CellTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellEditTemplate">
            <summary>
            Resets <see cref="!:GridStyleInfo.CellTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellItemTemplateKey">
            <summary>
            Resets <see cref="!:GridStyleInfo.CellTemplateKey"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellEditTemplateKey">
            <summary>
            Resets <see cref="!:GridStyleInfo.CellTemplateKey"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellType">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellValue">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellValue2">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue2"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCellValueType">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValueType"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetCulture(System.Boolean)">
            <summary>
            Gets the culture information from the style object or returns CultureInfo.CurrentCulture
            if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CultureInfo"/> is NULL.
            </summary>
            <param name="useCurrentCultureIfNull">True if CultureInfo.CurrentUICulture should be returned
            when <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CultureInfo"/> is NULL.</param>
            <returns>The culture information with rules for parsing and formatting the cell's value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetCultureInfo">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CultureInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetDescription">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Description"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetEnabled">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Enabled"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetError">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Error"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetErrorInfo">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ErrorInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetException">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Exception"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetFormatProvider">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormatProvider"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetParseFormats">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ParseFormats"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetReadOnly">
            <summary>
            Resets Read-only information.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetStrictValueType">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.StrictValueType"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetDisplayMember">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DisplayMember"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetValueMember">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ValueMember"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetItemsSource">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ItemsSource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetChoiceList">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ChoiceList"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetIsEditable">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.IsEditable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetText">
            <summary>
            Resets the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Text"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetFormattedText(System.Object)">
            <overload>
            Return formatted text for the specified value.
            GridStyleInfo.CultureInfo is used for conversion to string.
            </overload>
            <summary>
            Return formatted text for the specified value.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>A string that holds the formatted text.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ApplyFormattedText(System.String)">
            <overload>
            Parses the formatted text using Format and cell value type information stored in the current style object.
            The text is parsed using GridStyleInfo.CultureInfo information.
            </overload>
            <summary>
            Parses the formatted text using Format and cell value type information stored in the current style object.
            The text is parsed using GridStyleInfo.CultureInfo information.
            </summary>
            <param name="text">The formatted text.</param>
            <returns>True if the text could be parsed correctly and converted to a cell value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetFormattedText(System.Object,System.Int32)">
            <summary>
            Return formatted text for the specified value.
            GridStyleInfo.CultureInfo is used for conversion to string.
            </summary>
            <param name="value">The value to be formatted.</param>
            <param name="textInfo">A hint that specifies the current action why the text is formatted.</param>
            <returns>A string that holds the formatted text.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ApplyFormattedText(System.String,System.Int32)">
            <summary>
            Parses the formatted text using Format and cell value type information stored in the current style object.
            The text is parsed using GridStyleInfo.CultureInfo information.
            </summary>
            <param name="text">The formatted text.</param>
            <param name="textInfo">A hint that specifies the current action why the text is parsed.</param>
            <returns>True if the text could be parsed correctly and converted to a cell value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetText(System.Object)">
            <summary>
            Returns text for the specified value (ignoring any <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Format"/> settings).
            CultureInfo.CurrentCulture is used for conversion to string.
            </summary>
            <param name="value">The value to be converted to string.</param>
            <returns>A string that represents the value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ApplyText(System.String)">
            <summary>
            Parses the text (ignoring any <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Format"/> settings) and assigns it to CellValue.
            The text is parsed using CultureInfo.CurrentCulture information.
            </summary>
            <param name="text">The text to be parsed.</param>
            <returns>True if the text could be parsed correctly and converted to a cell value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetFormulaTag">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormulaTag"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetTag">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Tag"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetTooltipTemplateKey">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TooltipTemplateKey"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetShowTooltip">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShowTooltip"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetImageList">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageList"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetImageIndex">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageIndex"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetImageContentStretch">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentStretch"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetImageContentAlignment">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentAlignment"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AdjustImageMargins(Windows.Foundation.Rect)">
            <summary>
            Adjusts image margins according to client rectangle.
            </summary>
            <param name="rectangle">Client rectangle.</param>
            <returns>Corrected margins.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetImageMargins">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageMargins"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AdjustImageWidthAndHeightToMargin(Windows.UI.Xaml.Thickness,Windows.Foundation.Size)">
            <summary>
            Adjusts the margins accroding to the width and height of the image.
            </summary>
            <param name="defaultMargin">Default margins.</param>
            <param name="clientSize">Client rectangle.</param>
            <returns>Adjusted margins.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AdjustImageWidthAndHeightToMargin(Windows.UI.Xaml.Thickness,Syncfusion.WinRT.Controls.Grid.GridControlBase)">
            <summary>
            Adjusts the margins accroding to the width and height of the image.
            </summary>
            <param name="defaultMargin">Default margins.</param>
            <param name="grid">The grid.</param>
            <returns>Adjusted margins.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetImageWidth">
            <summary>
            Returns the image width.
            </summary>
            <returns>Width of the image.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetImageWidth">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageWidth"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.GetImageHeight">
            <summary>
            Gets the image height.
            </summary>
            <returns>Height of the image.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetImageHeight">
            <summary>
            Resets <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageHeight"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetErrorAlartTitle">
            <summary>
            Resets the error alart title.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShouldSerializeErrorAlartTitle">
            <summary>
            Shoulds the serialize error alart title.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetErrorAlertText">
            <summary>
            Resets the error alert text.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShouldSerializeErrorAlertText">
            <summary>
            Shoulds the serialize error alert text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetDataValidationTooltip">
            <summary>
            Resets the data validation tooltip.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShouldSerializeDataValidationTooltip">
            <summary>
            Shoulds the serialize data validation tooltip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetShowDataValidationTooltip">
            <summary>
            Resets the show data validation tooltip.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShouldSerializeShowDataValidationTooltip">
            <summary>
            Shoulds the serialize show data validation tooltip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetDataValidationTooltipTemplateKey">
            <summary>
            Resets the data validation tooltip template key.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShouldSerializeDataValidationTooltipTemplateKey">
            <summary>
            Shoulds the serialize data validation tooltip template key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ResetDataValidationTooltipLocation">
            <summary>
            Resets the data validation tooltip location.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShouldSerializeDataValidationTooltipLocation">
            <summary>
            Shoulds the serialize data validation tooltip location.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellIdentity">
            <summary>
            Holds identity information such as row and column index for the current <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Store">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasBackground">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Background"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasForeground">
            <summary>
            Determines if text color has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasAcceptsReturn">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AcceptsReturn"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasAutoWordSelection">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AutoWordSelection"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasAllowRowResize">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AllowRowResize"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasHorizontalAlignment">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HorizontalAlignment"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasTextWrapping">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextWrapping"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasTextTrimming">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextTrimming"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasMaxLength">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.MaxLength"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasVerticalAlignment">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.VerticalAlignment"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasBaseStyle">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BaseStyle"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BorderMargins">
            <summary>
            Holds extra border margins in pixels. When drawing a cell, this specifies the area between the
            cell rectangle without border and the inner rectangle of the cell with cell buttons. 
            </summary>
            <remarks>
            <para/>
            The default value for the BorderMargins property is CellMarginsInfo.Empty.<para/>
            The property affects the behavior or appearance of call cell types:<para/>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyBorderMargins">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasBorderMargins">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BorderMargins"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextMargins">
            <summary>
            Holds extra border margins in pixels. When drawing a cell, this specifies the area between the
            cell rectangle without border and the inner rectangle of the cell with cell buttons. 
            </summary>
            <remarks>
            <para/>
            The default value for the TextMargins property is CellMarginsInfo.Empty.<para/>
            The property affects the behavior or appearance of call cell types:<para/>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyTextMargins">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasTextMargins">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextMargins"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Padding">
            <summary>
            Gets or sets cell padding.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyPadding">
            <internalonly/>
            <summary>For internal use.</summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasPadding">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Padding"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyBorders">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasBorders">
            <summary>
            Determines if border information has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyFont">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasFont">
            <summary>
            Determines if font information has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellItemTemplate">
            <summary>
            Determines if <see cref="!:GridStyleInfo.CellTemplate"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellEditTemplate">
            <summary>
            Determines if <see cref="!:GridStyleInfo.CellTemplate"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellItemTemplateKey">
            <summary>
            Determines if <see cref="!:GridStyleInfo.CellTemplateKey"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellEditTemplateKey">
            <summary>
            Determines if <see cref="!:GridStyleInfo.CellTemplateKey"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellType">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellValue">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue2">
            <summary>
            Gets or sets the cell value 2 information of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellValue2">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue2"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCellValueType">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValueType"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasCultureInfo">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CultureInfo"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasDescription">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Description"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasEnabled">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Enabled"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasError">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Error"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ErrorInfo">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/> for the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasErrorInfo">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ErrorInfo"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasException">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Exception"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasFormat">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Format"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormatProvider">
            <summary>
            Gets or sets the cell FormatProvider.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasFormatProvider">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasFormatProvider"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ParseFormats">
            <summary>
            Specifies the permissable formats used to parse user entries of cell values.
            </summary>
            <remarks>
            <para/>
            The default value for the ParseFormats property is NULL.<para/>
            The property affects the behavior or appearance of the following cell types:<para/>
            It can be used to specify various DateTime formats that are allowed when the user enters a DateTime cell value.
            <para/>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasParseFormats">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ParseFormats"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasReadOnly">
            <summary>
            Determines if Read-only information has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasStrictValueType">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.StrictValueType"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasDisplayMember">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DisplayMember"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasValueMember">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ValueMember"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasItemsSource">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ItemsSource"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasChoiceList">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ChoiceList"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasIsEditable">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.IsEditable"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormatPreview">
            <summary>
            Returns a formatted text for the default value for a specified <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValueType"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormattedText">
            <summary>
            Gets the value formatted with the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Format"/> mask and custom formatting of the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.GetFormattedText(Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.Object,System.Int32)"/> method of the associated <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> or sets the value by calling the <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCellModelBase.ApplyFormattedText(Syncfusion.WinRT.Controls.Grid.GridStyleInfo,System.String,System.Int32)"/> of the associated <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasText">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Text"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellModel">
            <summary>
            Returns the associated <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> for this style object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasFormulaTag">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormulaTag"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasTag">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Tag"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TooltipTemplateKey">
            <summary>
            Gets or sets the template for cell tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasTooltipTemplateKey">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TooltipTemplateKey"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShowTooltip">
            <summary>
            Gets or sets whether to show cell tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasShowTooltip">
            <summary>
            Determines if <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShowTooltip"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CommentTemplateKey">
            <summary>
            Gets or sets the template(key) for the cell comment tip display.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Comment">
            <summary>
            Gets or sets the text that should appear in the cell comment tip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Image">
            <summary>
            Gets or Sets an image to the underlying ImageList collection. This is a wrapper property that provides a way to easily set one image for this style.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageList">
            <summary>
            Gets or Sets a list of Images. This would have higher preference than ErrorInfo image.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasImageList">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageList"/> is initialized for current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageIndex">
            <summary>
            Gets or Sets the ImageIndex that is referred from style.ImageList property.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasImageIndex">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageIndex"/> is initialized for current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyImageContentStretch">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentStretch">
            <summary>
            Specifies whether to stretch the image or retain the image size when a row or column is resized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasImageContentStretch">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentStretch"/> is initialized for current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyImageContentAlignment">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentAlignment">
            <summary>
            Defines the alignment options for text in text-image cells.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasImageContentAlignment">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentAlignment"/> is initialized for current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyImageMargins">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageMargins">
            <summary>
            Gets or sets the image margins.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasImageMargins">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageMargins"/> is initialized for current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyImageWidth">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageWidth">
            <summary>
            Gets or sets the image width.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasImageWidth">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageWidth"/> is initialized for current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnlyImageHeight">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageHeight">
            <summary>
            Gets or sets the image height.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasImageHeight">
            <summary>
            Determines whether <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageHeight"/> is initialized for current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ErrorAlartTitle">
            <summary>
            Gets or sets the error alart title.
            Used to hold the error alert tile, while import the excel file to grid.
            </summary>
            <value>The error alart title.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasErrorAlartTitle">
            <summary>
            Gets a value indicating whether this instance has error alart title.
            </summary>
            <value>
            	<c>true</c> if this instance has error alart title; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ErrorAlertText">
            <summary>
            Gets or sets the error alert text.
            Used to hold the error alert text, while import the excel file to grid.
            </summary>
            <value>The error alert text.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasErrorAlertText">
            <summary>
            Gets a value indicating whether this instance has error alert text.
            </summary>
            <value>
            	<c>true</c> if this instance has error alert text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasDataValidationTooltip">
            <summary>
            Gets a value indicating whether this instance has data validation tooltip.
            </summary>
            <value>
            	<c>true</c> if this instance has data validation tooltip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShowDataValidationTooltip">
            <summary>
            Gets or sets a value indicating whether show data validation tooltip.
            </summary>
            <value>
            	<c>true</c> if show data validation tooltip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasShowDataValidationTooltip">
            <summary>
            Gets a value indicating whether this instance has show data validation tooltip.
            </summary>
            <value>
            	<c>true</c> if this instance has show data validation tooltip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DataValidationTooltipTemplateKey">
            <summary>
            Gets or sets the data validation tooltip template key.
            </summary>
            By using this we can customize the data validation tooltip.
            <value>The data validation tooltip template key.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasDataValidationTooltipTemplateKey">
            <summary>
            Gets a value indicating whether this instance has data validation tooltip template key.
            </summary>
            <value>
            	<c>true</c> if this instance has data validation tooltip template key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DataValidationTooltipLocation">
            <summary>
            Gets or sets the data validation tooltip location.
            </summary>
            By using this property, we can specify the data validation tooltip location.
            <value>The data validation tooltip location.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HasDataValidationTooltipLocation">
            <summary>
            Gets a value indicating whether this instance has data validation tooltip location.
            </summary>
            <value>
            	<c>true</c> if this instance has data validation tooltip location; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection">
            <summary>
                A collection that stores 'GridBaseStyle' objects.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection.#ctor">
            <summary>
                Initializes a new instance of 'GridBaseStyleCollection'.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection.#ctor(Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection)">
            <summary>
                Initializes a new instance of 'GridBaseStyleCollection' based on an already existing instance.
            </summary>
            <param name='griValue'>
                A 'GridBaseStyleCollection' from which the contents is copied
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection.#ctor(Syncfusion.WinRT.Controls.Grid.GridBaseStyle[])">
            <summary>
                Initializes a new instance of 'GridBaseStyleCollection' with an array of 'GridBaseStyle' objects.
            </summary>
            <param name='griValue'>
                An array of 'GridBaseStyle' objects with which to initialize the collection
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection.AddRange(Syncfusion.WinRT.Controls.Grid.GridBaseStyle[])">
            <summary>
                Copies the elements of an array at the end of this instance of 'GridBaseStyleCollection'.
            </summary>
            <param name='griValue'>
                An array of 'GridBaseStyle' objects to add to the collection.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection.AddRange(Syncfusion.WinRT.Controls.Grid.GridBaseStyleCollection)">
            <summary>
                Adds the contents of another 'GridBaseStyleCollection' at the end of this instance.
            </summary>
            <param name='griValue'>
                A 'GridBaseStyleCollection' containing the objects to add to the collection.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initalizes a new <see cref="!:GridIntegerEditStyleInfo"/> object and associates it with an existing <see cref="!:GridStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="!:GridStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore)">
            <summary>
            Initalizes a new <see cref="!:GridIntegerEditStyleInfo"/> object and associates it with an existing <see cref="!:GridStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="!:GridStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore"/> that holds data for this <see cref="!:GridIntegerEditStyleInfo"/>.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore"/> object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo.#ctor">
            <summary>
            Initializes a new empty <see cref="!:GridIntegerEditStyleInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo.GetDefaultStyle">
            <summary>
            Returns <see cref="!:GridIntegerEditStyleInfo.Default"/>.
            </summary>
            <returns>A <see cref="!:GridIntegerEditStyleInfo"/> object with default values.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo.Default">
            <summary>
            Returns a default <see cref="!:GridIntegerEditStyleInfo"/> to be used with a default style.
            </summary>
            <value>The default.</value>
            <remarks>
            The <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Default"/> of the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> class
            will return the validation info that this method generates through its
            overriden version of <see cref="M:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfo.GetDefaultStyle"/>.
            <para/>
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore">
            <summary>
            Implements the data store for the <see cref="!:GridIntegerEditStyleInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore.MaxValueProperty">
            <summary>
            Provides information about the <see cref="!:GridIntegerEditStyleInfo.MaxValue"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore.MinValueProperty">
            <summary>
            Provides information about the <see cref="!:GridIntegerEditStyleInfo.MinValue"/> property. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore.#ctor">
            <overload>
            Initializes a new <see cref="!:GridIntegerEditStyleInfoStore"/> object.
            </overload>
            <summary>
            Initializes a new empty <see cref="!:GridIntegerEditStyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore.Clone">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridCurrencyEditStyleInfoStore.StaticDataStore">
            <override/>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo">
            <summary>
            Provides a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> object for font settings in a cell. 
            Each font property of the cell can be configured individually. <para/>
            Font properties thathave not been initialized will inherit default 
            values from a base style.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.Dispose">
            <summary>
            Releases the all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.#ctor">
            <overload>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/>
            </overload>
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/>  object and associates it with an existing <see cref="!:GridStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="!:GridStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinRT.Controls.Grid.GridFontInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/>  object and associates it with an existing <see cref="!:GridStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="!:GridStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore"/> that holds data for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/>.
            All changes in this style object will saved in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore"/> object.</param>
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.MakeCopy(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.GetDefaultStyle">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.ResetFontFamily">
            <summary>
            Resets <see cref="!:GridStyleInfo.FontFamily"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.ResetFontSize">
            <summary>
            Resets <see cref="!:GridStyleInfo.FontSize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.ResetFontStretch">
            <summary>
            Resets <see cref="!:GridStyleInfo.FontStretch"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.ResetFontStyle">
            <summary>
            Resets <see cref="!:GridStyleInfo.FontStyle"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.ResetFontWeight">
            <summary>
            Resets <see cref="!:GridStyleInfo.FontWeight"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.ResetOrientation">
            <summary>
            Resets the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.Orientation"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.Default">
            <summary>
            Returns a default <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/> to be used with a default style.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Default"/> of the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> class
            will return the default border info that this method generates through its
            overriden version of <see cref="M:Syncfusion.WinRT.Controls.Grid.GridFontInfo.GetDefaultStyle"/>.
             </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.HasFontFamily">
            <summary>
            Determines if <see cref="!:GridStyleInfo.FontFamily"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.HasFontSize">
            <summary>
            Determines if <see cref="!:GridStyleInfo.FontSize"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.HasFontStretch">
            <summary>
            Determines if <see cref="!:GridStyleInfo.FontStretch"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.HasFontStyle">
            <summary>
            Determines if <see cref="!:GridStyleInfo.FontStyle"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.HasFontWeight">
            <summary>
            Determines if <see cref="!:GridStyleInfo.FontWeight"/> has been initialized for the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.Orientation">
            <summary>
            Gets or sets the orientation of this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.HasOrientation">
            <summary>
            Determines if the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridFontInfo.Orientation"/> property has been initialized.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.FontFamilyProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.FontSizeProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.FontStretchProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.FontStretch"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.FontStyleProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.FontWeightProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.OrientationProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.#ctor">
            <overload>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore"/>
            </overload>
            <summary>
            Initializes an empty <see cref="T:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.Clone">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridFontInfoStore.StaticDataStore">
            <override/>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo">
            <summary>
            GridRenderStyleInfo can be attached to a GridRenderer.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo.#ctor(Syncfusion.WinRT.Controls.Grid.GridControlBase,Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Initalizes a new style object and associates it with an existing <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>.
            </param>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/>.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/> object.
            </param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridRenderStyleInfo.ModelStyle">
            <summary>
            give access to underlying model style. use it to apply changes to style 
            (.e.g. in gridControl textbox: modelstyle.cellvalue = ...)
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.ImageContentAlignment">
            <summary>
            Defines the alignment options for text in text image cells.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.ImageContentAlignment.Left">
            <summary>
            Image appears before the cell content.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.ImageContentAlignment.Right">
            <summary>
            Image appears after the cell content.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.ImageContentStretch">
            <summary>
            Defines options for stretching the image in the image cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.ImageContentStretch.Fill">
            <summary>
            Stretches or shrinks the image to fit the cell size.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.ImageContentStretch.Uniform">
            <summary>
            Retains the image size.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridFloatCellsMode">
            <summary>
            This enumeration specifies floating cell's behavior in a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/>.
            </summary>
            <remarks>
            See <see cref="!:GridModelOptions.FloatCellsMode"/>.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFloatCellsMode.None">
            <summary>
            Floating cell's behavior is disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridFloatCellsMode.OnDemandCalculation">
            <summary>
            Floating cells are calculated before they are displayed and results are saved. Floating cells will
            only be recalculated if the width or contents of cells change.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.#ctor(Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles,System.Int32,System.Int32)">
            <overload>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> with a reference to <see cref="!:VolatileData"/>, row, and column index.
            </summary>
            <param name="data">A reference to <see cref="!:VolatileData"/>.</param>
            <param name="rowIndex">Row index.</param>
            <param name="colIndex">Column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.#ctor(Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> with a reference to <see cref="!:VolatileData"/>, row and column index, and offline state.
            </summary>
            <param name="data">A reference to <see cref="!:VolatileData"/>.</param>
            <param name="pos">Cell coordinates.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.#ctor(Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> with a reference to <see cref="!:VolatileData"/>, row and column index, and offline state.
            </summary>
            <param name="data">A reference to <see cref="!:VolatileData"/></param>
            <param name="rowIndex">Row index.</param>
            <param name="colIndex">Column index.</param>
            <param name="offLine">True if changes in this style object should not be stored in the associated <see cref="!:VolatileData"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.#ctor(Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles,Syncfusion.WinRT.Controls.Cells.RowColumnIndex,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> with a reference to <see cref="!:VolatileData"/>, row and column index, and offline state.
            </summary>
            <param name="data">A reference to <see cref="!:VolatileData"/>.</param>
            <param name="pos">Cell coordinates.</param>
            <param name="offLine">True if changes in this style object should not be stored in the associated <see cref="!:VolatileData"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.#ctor(Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> and copies its data from an existing object.
            </summary>
            <param name="other">The existing object to copy data from.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.Finalize">
            <summary>
            Removes the associated cell cache object from the volatile data store.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.Dispose">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.MakeOfflineIdentity">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> and copies its identity information from the current object. The new
            instance will be detached from <see cref="!:VolatileData"/> so that changes in this style object are not be stored in the associated <see cref="!:VolatileData"/>.
            </summary>
            <returns>A new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity"/> instance.</returns>
            <remarks>
            Lets a style object load base styles and default values but disables
            saving changes back to the grid. (see OnStyleChanged below)
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.GetBaseStyles(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Overriden. Returns base styles from <see cref="!:VolatileData"/> by calling <see cref="!:VolatileData.GetBaseStyles"/>.
            </summary>
            <param name="thisStyleInfo">A reference to a <see cref="T:Syncfusion.WinRT.Styles.IStyleInfo"/>.</param>
            <returns>An array of base styles.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.ResetBaseStylesCache">
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Overridden. If the style is not offline, saves its changes in the <see cref="!:VolatileData"/>.
            </summary>
            <param name="style">A reference to the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> object.</param>
            <param name="sip">The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the changed style property.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.LookupCellModel(System.String)">
            <summary>
            Returns a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> for the specified id / cell type name.
            </summary>
            <param name="id">Cell type name.</param>
            <returns>The <see cref="T:Syncfusion.WinRT.Controls.Grid.GridCellModelBase"/> for the given id.</returns>
            <remarks>
            Calls <see cref="!:IGridData.LookupCellModel"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.ToString">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.OffLine">
            <summary>
            True if changes in this style object should not be stored in the associated <see cref="!:VolatileData"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.Data">
            <summary>
            Reference to <see cref="!:VolatileData"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.RowIndex">
            <summary>
            The row index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.ColumnIndex">
            <summary>
            The column index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfoIdentity.CellRowColumnIndex">
            <summary>
            The cell coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CellTypeProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellType"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CellValueProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValue"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CellEditTemplateProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellEditTemplate"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CellItemTemplateProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellItemTemplate"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CellEditTemplateKeyProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellEditTemplateKey"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CellItemTemplateKeyProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellItemTemplateKey"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CellValueTypeProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CellValueType"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.FormatProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Format"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ParseFormatsProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ParseFormats"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.BaseStyleProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BaseStyle"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ErrorProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Error"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ErrorInfoProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ErrorInfo"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ExceptionProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Exception"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CultureInfoProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CultureInfo"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ReadOnlyProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ReadOnly"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.StrictValueTypeProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.StrictValueType"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.BackgroundProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Background"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ForegroundProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.BorderMarginsProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BorderMargins"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.PaddingProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.BorderMargins"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.TextMarginsProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextMargins"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.BordersProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Borders"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.FontProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Font"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.DescriptionProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Description"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.EnabledProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Enabled"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ValueMemberProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ValueMember"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.DisplayMemberProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DisplayMember"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ItemsSourceProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ItemsSource"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ChoiceListProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ChoiceList"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.IsEditableProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.IsEditable"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.TagProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Tag"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.AcceptsReturnProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AcceptsReturn"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.AutoWordSelectionProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AutoWordSelection"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.AllowRowResizeProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AllowRowResize"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.TextAlignmentProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.TextAlignment"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.EnableFloatingCellProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.AcceptsReturn"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.FloatCellModeProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.FloatCellMode"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.FloodCellProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FloodCell"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.HorizontalAlignmentProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.HorizontalAlignment"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.TextWrappingProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TextWrapping"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ExclusiveChoiceListProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.ExclusiveChoiceList"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.AutoCompleteProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DropDownStyle"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.StaysOpenOnEditProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.StaysOpenOnEdit"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.NumberFormatProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.NumberFormat"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.NegativeForegroundProperty">
            <summary>
            Provides information about the <see cref="!:GridCurrencyEditStyleInfo.NegativeForeground"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.MaxLengthProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.MaxLength"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.VerticalAlignmentProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.VerticalAlignment"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ShowTooltipProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.ToolTip"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.TooltipTemplateKeyProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.TooltipTemplateKey"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CommentTemplateKeyProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.CommentTemplateKey"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.CommentProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.Comment"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ImageListProperty">
            <override/>
            
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageList"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ImageIndexProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageIndex"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ImageContentStretchProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentStretch"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ImageContentAlignmentProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ImageWidthProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageWidth"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ImageHeightProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageHeight"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ImageMarginsProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ImageMargins"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ConditionalFormatProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ConditionalFormat"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ApplyConditionalFormatBasdOnProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ApplyConditionalFormatBasdOn"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ShowDataValidationTooltipProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ShowDataValidationTooltip"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.DataValidationTooltipProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DataValidationTooltip"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ErrorAlertProperty">
            <summary>
            Provides information about the <see cref="!:GridStyleInfo.ErrorAlert"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.ErrorAlartTitleProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.ErrorAlartTitle"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.DataValidationTooltipTemplateKeyProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DataValidationTooltipTemplateKey"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.DataValidationTooltipLocationProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.DataValidationTooltipLocation"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.FormatProviderProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridStyleInfo.FormatProvider"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.#ctor">
            <overload>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/>.
            </overload>
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridStyleInfoStore.Clone">
            <override/>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles">
            <summary>
            VolatileData allocates its own style objects and maintains a weak reference to them.
            Once the style object is finalized, the weak reference is removed from the hashtable.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles.GetItem(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Gets the cached style information for a specific cell.
            </summary>
            <param name="cell">The cell coordinate.</param>
            <returns>The cached GridStyleInfo; NULL if no cache entry was found.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles.SetItem(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Saves style information to be cached.
            </summary>
            <param name="cell">The cell coordinate.</param>
            <param name="style">The GridStyleInfo to be cached.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles.ResetItem(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Resets cache for a specific cell.
            </summary>
            <param name="cell">The cell coordinates.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles.Clear(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Resets cache for a specific cell.
            </summary>
            <param name="cell">The cell coordinates.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles.Clear">
            <summary>
            Empty the cache.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles.Item(System.Int32,System.Int32)">
            <summary>
            Gives access to a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridStyleInfo"/> at a given row and column index. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridVolatileCellStyles.BaseStylesMap">
            <summary>
            Gets the base styles map.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridColumnAutoSizer.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Constructor 
            </summary>
            <param name="gcB"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridColumnAutoSizer.ColumnWidths_LineSizeChanged(System.Object,Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs)">
            <summary>
            Column Width Line size changed
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">RangeChangedEventArguments</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridColumnAutoSizer._SizeChanged(System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
            Parent Element Size changed Event Handler
            </summary>
            <param name="sender">Sender Object </param>
            <param name="e">SizeChangedEventArgs</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridColumnAutoSizer.ApplySizes">
            <summary>
            Apply Sizes as per the user request
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridColumnAutoSizer.Dispose">
            <summary>
            IDisposable interace implementation
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridColumnAutoSizer.MouseControllerRemover">
            <summary>
            Removes Mouse Controller
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridColumnAutoSizer.MouseControllerAdder">
            <summary>
            Removes Mouse Controller
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.CommentAlignment">
            <summary>
            Defines the options to display Cell Comment Tip.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CommentAlignment.TopLeft">
            <summary>
            Top Left edge.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CommentAlignment.TopRight">
            <summary>
            Top Right edge.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CommentAlignment.BottomLeft">
            <summary>
            Bottom Left edge.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.CommentAlignment.BottomRight">
            <summary>
            Bottom Right edge.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridCommentService">
            <summary>
            A helper class to show comment tips for grid cells.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.GetCommentDelay(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.SetCommentDelay(Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Sets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.GetShowComment(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of ShowTooltips property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.SetShowComment(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of ShowTooltips property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCommentService.SelectionChangedFlagProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.GetSelectionChangedFlag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.SetSelectionChangedFlag(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCommentService.MouseDownFlagProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.GetMouseDownFlag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.SetMouseDownFlag(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridCommentService.MouseLeaveFlagProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.GetMouseLeaveFlag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.SetMouseLeaveFlag(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridCommentService.Dispose(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Releases all the resources used by this component.
            </summary>
            <param name="d">The parent grid.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste">
            <summary>
            This class manages cut-copy-paste operations for the grid
            </summary>
            <remarks>
            You access this class from a grid with the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridModel.CutPaste"/>
            property of a <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModel"/> instance.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.copyRangeList">
            <summary>
            hold the DataObject for ClipBoard
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste"/>.
            </summary>
            <param name="model">The grid model.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.gridData">
            <summary>
            Contain the GridStyleInfo for Cells
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanCopy">
            <summary>
            Checks if there are selected ranges that can be copied to clipboard or if the current cell's contents can be copied.
            </summary>
            <param name="gridControl">reference for GridModel</param>
            <param name="mod">reference for GridModel</param>
            <returns>True if there is information available to be copied to clipboard.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Copy">
            <summary>
            Copies the contents of cells in selected to clipboard and the current cell's contents.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanCut">
            <summary>
            Checks if there are selected ranges that can be cut and copied to clipboard or if the current cell's contents can be cut and copied.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Cut">
            <summary>
            Cuts and copies the contents of cells in selected to clipboard and the current cell's contents.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CanPaste">
            <summary>
            Checks if there is information on the clipboard that can be pasted into the grid.
            </summary>
            <param name="gridControl">Reference for GridControl</param>
            <returns>Call this method for example to enable or gray out menu commands like "Paste Cells".</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Paste">
            <summary>
            Paste information from the clipboard into the grid at the current selected range or current cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.GetExpandedRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            Expands the Range list when it is Table, ROws, Cols to Cells. 
            </summary>
            <param name="rangeList">Range List to Expand.</param>
            <returns>Expanded Cells Range</returns>
            <remarks>When  we Select Entire Table, Column, Rows etc.. Expanded Ranges is must.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CopyRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Boolean,System.Boolean)">
            <summary>
            Copies the contents of a specified range of cells to clipboard.
            </summary>
            <param name="rangeList">contains the currently selected range list</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CopyTextToClipboard(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Boolean)">
            <summary>
            Copies the formatted text of a specified range of cells to clipboard.
            </summary>
            <param name="rangeList">The range list with cells to be copied.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CopyXmlToClipboard(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Boolean)">
            <summary>
             Copy the Cells with basic styles in Xml format to support in MS Excel. 
            </summary>
            <param name="rangeList">Range list  to copy the data </param>
            <param name="clear">If set to <see langword="true"/> the selection clears otherwise the selection remains.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CopyCellsToDataObject(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Boolean)">
            <summary>
            Creates a object and initializes it with style objects and covered cell information of a range of cells in the grid.
            </summary>
            <param name="rangeList">contains the currently selected range</param>
            <param name="bLoadBaseStyles">Contain the base style</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CutRange(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            Cuts and copies the contents of a specified range of cells to clipboard.
            </summary>
            <param name="rangeList">contains the currently selected range list</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.OnPasteFromClipboard(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.String)">
            <summary>
            Get The DataObject From the Clipboard 
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.PasteBoundCheck(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
             Checks the space avaliblity for Buffer text to paste. 
            </summary>
            <param name="rangeList"> Selected Ranges</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.PasteBoundCheck(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.String,System.String)">
            <summary>
             Calculates the Required space ondemad using buffer value when the Range is not selected.
            </summary>
            <param name="rangeList"></param>
            <param name="buffer"></param>
            <param name="delim"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CopyCellsToDataObject(Syncfusion.WinRT.Controls.Grid.GridCellData@,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Copy the Cell Models from the Selected Ranges. 
            </summary>
            <param name="data"></param>
            <param name="rangeList"></param>
            <param name="clear">If set to <see langword="true"/>, Clears the selected Ranges ; otherwise,  remains the selected ranges.</param>
            <param name="row"></param>
            <param name="column"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.PasteCellsFromStyle(Syncfusion.WinRT.Controls.Grid.GridCellData,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            PAste the cell models.
            </summary>
            <param name="data">Copies Cell Models</param>
            <param name="rangeList">Cepied Range list</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.PasteCellsFromStyle(System.String,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            Set the style information for the new cell.
            </summary>
            <param name="buffer"></param>
            <param name="rangeList"></param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.Model">
            <summary>
            Gets or sets the grid model.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CutFlag">
            <summary>
            Specifies whether the current operation is clipboard-cut.
            </summary>
            <value>
            <c>True, if the current operation is clipboard-cut; false otherwise.</c>
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelCutPaste.CutCell">
            <summary>
            Specifies whether the current operation is clipboard-cut and whether to cut the cell text along with its style.
            </summary>
            <value>
            <c>True, if the current operation is clipboard-cut and the CopyPaste option is CutCell; false otherwise.</c>
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange">
            <summary>
            Manages text data exchange for the grid. Lets you copy cell text to a stream or clipboard and recreate the
            cell text at a later time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.#ctor(Syncfusion.WinRT.Controls.Grid.GridModel)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange"/>.
            </summary>
            <param name="model">Grid model.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.CopyTextToBuffer(System.String@,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Copy cellvalue to the buffer
            </summary>
            <param name="buffer">contain the formatted text for clipboard</param>
            <param name="rangeList">currently selected rangeList</param>
            <param name="nrowsdone">Number of rows affected</param>
            <param name="ncolsdone">Number of columns affected</param>
            <param name="gridControl">Reference for gridControl</param>
            <returns>returns true after successful copy the selected cell text value to the buffer</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.CutValueFromCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Apply the default value to cell when Cut operation executed
            </summary>
            <param name="rowindex">Row value for the cell</param>
            <param name="colindex">Column value for the cell</param>
            <param name="clear">Clear the selected ranges.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.CopyXmlToBuffer(System.String@,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Copy the selected cells in XmlDocument format
            </summary>
            <param name="buffer">Returns the Xml content of copied ranges</param>
            <param name="rangeList">currently selected rangeList</param>
            <param name="nrowsdone">Number of rows affected</param>
            <param name="ncolsdone">Number of columns affected</param>
            <param name="clear">Clear the selected ranges.</param>
            <returns>returns true after successful copy the selected cell text value to the buffer</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.GetXmlHeaderContent">
            <summary>
            Returns the Header content of the Xml Document. 
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.GetDefaultXmlStyle">
            <summary>
            Returns the default cell style of the table. 
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.CreateXmlCellStyles(Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Returns the Cell style  in Xml format. 
            </summary>
            <param name="style">Cell Style</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.CreateXmlCellContent(Syncfusion.WinRT.Controls.Grid.GridStyleInfo)">
            <summary>
            Returns the Cell content of the Table. 
            </summary>
            <param name="style"> Cell Styles</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.PasteTextFromBuffer(System.String,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            Paste Text From The Buffer
            </summary>
            <param name="buffer">For Holding final clipboard value</param>
            <param name="rangeList">conatin the selected range</param>
            <param name="gridControl">reference for gridControl</param>
            <returns>return true after fill the cell value from the buffer</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.CalcBufferDimension(System.String,System.Int32@,System.Int32@)">
            <summary>
            Calculates the Buffer dimentison as how many rows and cols does it required to paste.
            </summary>
            <param name="psz"></param>
            <param name="nRows"></param>
            <param name="nCols"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.PasteTextRowCol(System.Int32,System.Int32,System.String)">
            <summary>
            Pastes the text value to the cell
            </summary>
            <param name="rowIndex">Row value for the cell</param>
            <param name="colIndex">Column value for the cell</param>
            <param name="text">New String value for the cell</param>
            <returns>successful paste returns true</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.GetCopyTextRowCol(System.Int32,System.Int32)">
            <summary>
            Get the value of the cell
            </summary>
            <param name="rowIndex">contain the row value</param>
            <param name="colIndex">contain the column value</param>
            <param name="gridControl">Reference for gridControl</param>
            <returns>the value of the cell</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.Model">
            <summary>
            Returns grid model.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridModelTextDataExchange.TabDelimiter">
            <summary>
            Gets or sets the character that is used for separating columns when importing text file.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridTooltipService">
            <summary>
            A helper class to show tooltips for grid cells.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.GetTooltipDelay(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of TooltipDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.SetTooltipDelay(Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Sets the value of TooltipDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.GetShowTooltips(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of ShowTooltips property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.SetShowTooltips(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of ShowTooltips property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridTooltipService.SelectionChangedFlagProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.GetSelectionChangedFlag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.SetSelectionChangedFlag(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridTooltipService.MouseDownFlagProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.GetMouseDownFlag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.SetMouseDownFlag(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of CommentDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridTooltipService.MouseLeaveFlagProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.GetMouseLeaveFlag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of TooltipDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.SetMouseLeaveFlag(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of TooltipDelay property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.Dispose(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Releases all the resources used by this component.
            </summary>
            <param name="d">The parent grid.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.GetShowErrorTooltips(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of ShowErrorTooltips property.
            </summary>
            <param name="dpo">The grid.</param>
            <returns>True if the operation is successful; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridTooltipService.SetShowErrorTooltips(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of ShowErrorTooltips property.
            </summary>
            <param name="dpo">The grid.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.IGridCopyPaste">
            <summary>
            For Custom Copy To Clipboard.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridCopyPaste.Copy(Syncfusion.WinRT.Controls.Grid.GridCellData,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            User use this method to implement Cut Operation
            </summary>
            <param name="gridCellData">Contain The Currently Selected Cells Style</param>
            <param name="rangeList">Contain The Currently Selected Range</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridCopyPaste.Cut(Syncfusion.WinRT.Controls.Grid.GridCellData,Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            User use this method to implement Copy Operation
            </summary>
            <param name="gridCellData">Contain The Currently Selected Cells Style</param>
            <param name="rangeList">Contain The Currently Selected Range</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.IGridCopyPaste.Paste(Syncfusion.WinRT.Controls.Grid.GridRangeInfoList)">
            <summary>
            User use this method to implement Paste Operation
            </summary>
            <param name="RangeList">Contain The Currently Selected Cells Style</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.ErrorType">
            <summary>
            Defines possible error types.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.ErrorType.Information">
            <summary>
            Error information.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.ErrorType.ErrorMessage">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.ErrorType.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo">
            <summary>
            Used to display error tool tips for the cells. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/> object and associates it with an existing <see cref="!:GridStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="!:GridStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/> object and associates it with an existing <see cref="!:GridStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="!:GridStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore"/> that holds data for this <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/>.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore"/> object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.GetDefaultStyle">
            <summary>
            Returns <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.Default"/>.
            </summary>
            <returns>A <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/> object with default values.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.CreateSubObjectIdentity(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Creates a product-specific identity object for a sub object.
            </summary>
            <param name="sip">Sub object.</param>
            <returns>An identity object for a subobject of this style.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.AdjustErrorInfoMargin(Windows.UI.Xaml.Thickness,Windows.Foundation.Size)">
            <summary>
            Adjusts the margin of error info display according to the client area.
            </summary>
            <param name="defaultMargin">Default margin.</param>
            <param name="clientSize">Client size.</param>
            <returns>Adjusted margin.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.AdjustErrorInfoMargin(Windows.UI.Xaml.Thickness,Syncfusion.WinRT.Controls.Grid.GridControlBase,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Adjusts the margin of error info display according to the client area.
            </summary>
            <param name="defaultMargin">Default margin.</param>
            <param name="grid">The grid.</param>
            <param name="rowColIndex">Row index.</param>
            <returns>Adjusted margin.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetErrorType">
            <summary>
            Resets the ErrorType property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ShouldSerializeErrorType">
            <summary>
            Specifies whether the ErrorType property is serializable.
            </summary>
            <returns>True if it can be serialized.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetErrorContentAlignment">
            <summary>
            Resets the ErrorContentAlignment property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetCustomBrush">
            <summary>
            Resets the CustomImage property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetErrorMessage">
            <summary>
            Resets the ErrorMessage property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetErrorTooltipTemplateKey">
            <summary>
            Resets the ErrorTooltipTemplateKey property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetErrorTooltipBackgroundBrush">
            <summary>
            Resets the ErrorTooltipBackgroundBrush property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetErrorTooltipForegroundBrush">
            <summary>
            Resets the ErrorTooltipForegroundBrush property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetImageWidth">
            <summary>
            Resets the ImageWidth property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetImageHeight">
            <summary>
            Resets the ImageHeight property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ResetImageMargins">
            <summary>
            Resets the ImageMargins property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.AdjustImageMargins(Windows.Foundation.Rect)">
            <summary>
            Adjusts the image margins according to the client rectangle.
            </summary>
            <param name="rectangle">Client rectangle.</param>
            <returns>Adjusted margins.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.Default">
            <summary>
            Gets the default style for <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ReadOnlyErrorType">
            <summary>
            Returns the read only error type.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorType">
            <summary>
            Gets or sets the Error Type.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasErrorType">
            <summary>
            Specifies whether the ErrorType property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ReadOnlyErrorContentAlignment">
            <summary>
            Returns the error content alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorContentAlignment">
            <summary>
            Gets or sets the error content alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasErrorContentAlignment">
            <summary>
            Specifies whether the ErrorContentAlignment property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.CustomImage">
            <summary>
            Gets or sets a custom image to use in the place of error icon.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasCustomImage">
            <summary>
            Specifies whether the CustomImage property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasErrorMessage">
            <summary>
            Specifies whether the ErrorMessage property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorTooltipTemplateKey">
            <summary>
            Gets or sets the template for the error tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasErrorTooltipTemplateKey">
            <summary>
            Specifies whether the ErrorTooltipTemplateKey property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorTooltipBackgroundBrush">
            <summary>
            Gets or sets the background for error tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasErrorTooltipBackgroundBrush">
            <summary>
            Specifies whether the ErrorTooltipBackgroundBrush property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorTooltipForegroundBrush">
            <summary>
            Gets or sets the foreground for error tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasErrorTooltipForegroundBrush">
            <summary>
            Specifies whether the ErrorTooltipForegroundBrush property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ImageWidth">
            <summary>
            Gets or sets the width of the error icon.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasImageWidth">
            <summary>
            Specifies whether the ImageWidth property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ImageHeight">
            <summary>
            Gets or sets the height of the error icon.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasImageHeight">
            <summary>
            Specifies whether the ImageHeight property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ImageMargins">
            <summary>
            Defines the margins for the error icon.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.HasImageMargins">
            <summary>
            Specifies whether the ImageMargins property is initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ReadOnlyImageMargins">
            <summary>
            Gets the margins of error image.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore">
            <summary>
            Implements the data store for the <see cref="!:GridMaskEditInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ErrorTypeProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorType"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ErrorContentAlignmentProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorContentAlignment"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ErrorCustomImageProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.CustomImage"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ErrorMessageProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorMessage"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ErrorTooltipTemplateKeyProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorTooltipTemplateKey"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ErrorTooltipBackgroundBrushProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorTooltipBackgroundBrush"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ErrorTooltipForegroundBrushProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ErrorTooltipForegroundBrush"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ImageWidthProperty">
            <summary>
            Provides information about the <see cref="!:GridErrorStyleInfo.ImageWidthProperty"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ImageHeightProperty">
            <summary>
            Provides information about the <see cref="!:GridErrorStyleInfo.ImageHeightProperty"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.ImageMarginsProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfo.ImageMargins"/> property. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore"/> object.
            </overload>
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.Clone">
            <override/>
            <summary>Returns a copy of current object.</summary>
            <returns>A copy of current object.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Grid.GridErrorStyleInfoStore.StaticDataStore">
            <override/>
        </member>
    </members>
</doc>
