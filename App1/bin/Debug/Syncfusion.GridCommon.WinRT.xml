<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.GridCommon.WinRT</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1"/> class provides a default implementation of 
            the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/> interface for a cell renderer in a 
            <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/>.<para/>
            You should derive from this class to implement custom cell renderer classes. 
            There is however no dependency on CellRendererBase inside the 
            VirtualizingCellsControl, the VirtualizingCellsControl
            base class only depends on this interface.
            <para/>
            If you want to implement a renderer with support for live UIElement visuals 
            inside the cell you should derive from the <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1"/>
            or grid/treeview adapted VirtualizingCellRendererBase classes.
            </summary>
            <typeparam name="S">The type for render cell styles. The type must 
            implement <see cref="T:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo"/></typeparam>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.Disposable">
            <summary>
            This class provides a base class that implements the IDisposable interface
            as suggested in the .NET documentation using the Disposable pattern.
            </summary>
            <remarks>If you derive from this class, you only need to override the protected
            Dispose method and check the disposing parameter.</remarks>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.NonFinalizeDisposable">
            <summary>
            This is a base class for Disposable. It implements the IDisposable interface
            as suggested in the .NET documentation using the Disposable pattern but it does not
            implement a finalizer. If you need finalization you need to derive from Disposable
            or add a finalizer to your derived class and manually call Dispose from the Finalizer.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.NonFinalizeDisposable.Dispose">
            <overload>
            Releases all resources used by the Component.
            </overload>
            <summary>
            Releases all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.NonFinalizeDisposable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="!:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.Disposable.Finalize">
            <summary>
            <see cref="M:System.Object.Finalize"/>.<para/>
            In C# and C++, finalizers are expressed using destructor syntax.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer">
            <summary>
            Defines the interface for a cell renderer in a <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/>.
            A default implementation of this interface is provided by the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1"/> class
            from which you should derive custom cell renderer classes. There is however no dependency
            on CellRendererBase inside the VirtualizingCellsControl, the VirtualizingCellsControl
            base class only depends on this interface.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)">
            <summary>
            Called <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> to arrange the
            cells UIElement children. <see cref="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1"/> implements this 
            method and calls the virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnArrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,`0)"/> method.
            </summary>
            <param name="aca">The arange cell layout information.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.PrepareUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.PrepareCellUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame)"/> to
            prepare the cells UIElement children.
            <see cref="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1"/> implements this method and calls the
            virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnPrepareUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame,`0)"/> method.
            <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1"/> overrides this method and
            creates new UIElements and wires them with the parent cells control.
            </summary>
            <param name="aca">The arrange cell layout information.</param>
            <param name="uiElements">The UI elements.</param>
            <param name="canvas">The canvas to which any UIElement elements should be added.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.UnloadUIElements(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.CellUIElements)">
            <summary>
            This method is called after a cell is scrolled out of view. 
            <see cref="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1"/> implements this method and calls the
            virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnUnloadUIElements(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.CellUIElements)"/> method.
            <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1"/> overrides this method and
            creates either removes the cell renderer visuals from the parent canvas 
            or hide them and reuse it later in same canvas depending on whether
            <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.AllowRecycle"/> was set.
            </summary>
            <param name="host">The host.</param>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <param name="visuals">The visuals.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.CancelMouseCapture(Windows.UI.Xaml.UIElement)">
            <summary>
            This method is called from <see cref="!:CellMouseCaptureInfo"/> to
            take away mouse capture when context of mouse operation changes (e.g. from selecting
            text inside one cell to selecting multiple cells in a grid)<para/>
            <see cref="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1"/> implements this method and calls the
            virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnCancelMouseCapture(Windows.UI.Xaml.UIElement)"/> method.
            </summary>
            <param name="element">The UIElement child</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.RecaptureMouse(Windows.UI.Xaml.UIElement)">
            <summary>
            This method is called from <see cref="!:CellMouseCaptureInfo"/> to
            restore mouse capture when context of mouse operation changes back to original context.
            <para/>
            <see cref="T:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1"/> implements this method and calls the
            virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnRecaptureMouse(Windows.UI.Xaml.UIElement)"/> method.
            </summary>
            <param name="element">The UIElement child</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.RefreshCellUIElementsContent(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.CellUIElements,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determine if cell at given cells row and column index is associated with UIElement. If yes,
            reintialize the cells UIElement. You should implement this method in the cell renderer
            and redirect the call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RefreshCellUIElementsContent(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)"/>
            on the supplied <paramref name="cellsControl"/>. If you have a complex renderer 
            (e.g. a nested grid) for which there is no need to reinitalize contents you can
            override this method and do nothing. This usually is called as a response to an 
            earlier <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.InvalidateCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)"/>.
            call.
            </summary>
            <param name="cellsControl">The cells control.</param>
            <param name="cellUIElements">The cell visuals.</param>
            <param name="rowColumnIndex">Index of the row column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Hide(Windows.UI.Xaml.UIElement)">
            <summary>
            Hides the specified UIElement. You should implement this method in your renderer
            and call e.Arrange(new Rect(0, 0, 0, 0)); If this however causes problems then
            you can instead call e.Visibility = Visibility.Hidden;.
            Using Arrange has one benefit for example that capture state of a textbox does not
            get affected.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ICellRenderer.UnloadUIElementsWhenScrolledOutOfView">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCellUIElements(Windows.Foundation.Size)"/> to
            determine whether the parent control should unload visuals
            when the cell is scrolled out of the viewable area.
            </summary>
            <value><c>true</c> if visuals should be unloaded when scrolled out of view; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnPrepareUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame,`0)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> to 
            prepare the cells UIElement children.
            <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1"/> overrides this method and
            creates new UIElements and wires them with the parent cells control.
            </summary>
            <param name="aca">The arange cell layout information.</param>
            <param name="uiElements">The UI elements.</param>
            <param name="canvas">The canvas to which any UIElement elements should be added.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnArrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,`0)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> to
            arrange the cells UIElement children.
            </summary>
            <param name="aca">The arange cell layout information.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnUnloadUIElements(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.CellUIElements)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.UnloadUIElements(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.CellUIElements)"/> after a cell is scrolled out of view. 
            <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1"/> overrides this method and
            creates either removes the cell renderer visuals from the parent canvas 
            or hide them and reuse it later in same canvas depending on whether
            <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.AllowRecycle"/> was set.
            </summary>
            <param name="host">The host.</param>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <param name="visuals">The visuals.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnCancelMouseCapture(Windows.UI.Xaml.UIElement)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.CancelMouseCapture(Windows.UI.Xaml.UIElement)"/> to take away 
            mouse capture when context of mouse operation changes (e.g. from selecting
            text inside one cell to selecting multiple cells in a grid)
            </summary>
            <param name="element">The UIElement child</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnRecaptureMouse(Windows.UI.Xaml.UIElement)">
            <summary>
            Called from from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.RecaptureMouse(Windows.UI.Xaml.UIElement)"/> to restore mouse 
            capture when context of mouse operation changes back to original context
            </summary>
            <param name="element">The UIElement child</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.RefreshCellUIElementsContent(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.CellUIElements,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determine if cell at given cells row and column index is associated with UIElement. If yes,
            reinitialize the cells UIElement. You should implement this method in the cell renderer
            and redirect the call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RefreshCellUIElementsContent(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)"/>
            on the supplied <paramref name="cellsControl"/>. If you have a complex renderer
            (e.g. a nested grid) for which there is no need to reinitalize contents you can
            override this method and do nothing. This usually is called as a response to an 
            earlier <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.InvalidateCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)"/>.
            </summary>
            <param name="cellsControl">The cells control.</param>
            <param name="cellUIElements">The cell visuals.</param>
            <param name="rowColumnIndex">Index of the row column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.Hide(Windows.UI.Xaml.UIElement)">
            <summary>
            Hides the specified UIElement. You should implement this method in your renderer
            and call e.Arrange(new Rect(0, 0, 0, 0)); If this however causes problems then
            you can instead call e.Visibility = Visibility.Hidden;.
            Using Arrange has one benefit for example that capture state of a textbox does not
            get affected.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.IsInArrange">
            <summary>
            Gets a value indicating whether this instance is processing <see cref="M:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.OnArrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,`0)"/>.
            </summary>
            <value>
            	<c>true</c> if this instance is in arrange; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.SupportsRenderOptimization">
            <summary>
            Gets or sets whether the renderer supports rendering itself directly to the
            drawing context. When this is possible the UIElement will only be created
            when the user moves the mouse over the cell or if the UIElement is needed for
            other reasons, e.g. animate after change. The benefit of rendering directly to the 
            DrawingContext instead of creating the UIElement is a much improved scrolling 
            performance. The default value is false.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.AllowCancelMouseCapture">
            <summary>
            Gets or sets a value indicating whether the control supports canceling mouse capture.
            </summary>
            <value>
            	<c>true</c> if control supports canceling mouse capture; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellRendererBase`1.UnloadVisualsWhenScrolledOutOfView">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCellUIElements(Windows.Foundation.Size)"/> to
            determine whether the parent control should unload visuals
            when the cell is scrolled out of the viewable area.
            </summary>
            <value><c>true</c> if visuals should be unloaded when scrolled out of view; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1">
            <summary>
            VirtualizingCellRendererBase is an abstract base class for cell renderers
            that need live UIElement visuals displayed in a cell. You can derive from
            this class and provide the type of the UIElement you want to show inside cells
            as type parameter. The class provides strong typed virtual methods for 
            initializing content of the cell and arranging the cell visuals.
            <para/>
            The class manages the creation 
            of cells UIElement objects when the cell is scrolled into view and also 
            unloading of the elements. The class offers an optimization in which 
            elements can be recycled when <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.AllowRecycle"/> is set. 
            In this case when a cell is scrolled out of view
            it is moved into a recycle bin and the next time a new element is scrolled into
            view the element is recovered from the recycle bin and reinitialized with the
            new content of the cell.<para/>
            Another optimization is support for cells rendering themselves directly to the
            drawing context. When <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.SupportsRenderOptimization"/> is true the 
            UIElement will only be created
            when the user moves the mouse over the cell or if the UIElement is needed for
            other reasons.<para/>
            After a UIElement was created the virtual methods <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.WireUIElement(`0)"/> 
            and <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.UnwireUIElement(`0)"/> are called to wire any event listeners.
            <para/>
            Updates to appearance and content of child elements, creation and unloading
            of elements will not trigger ArrangeOverride or Render calls in parent canvas.
            <para/>
            In Grid and Tree control you should not derive from this class. Instead you should
            derive from the GridVirtualizingCellRendererBase and TreeVirtualizingCellRendererBase classes.
            These classes are the exact same code base as this class with the only difference that they 
            derive from GridCellRendererBase and TreeCellRenderer base classes instead. It is 
            currently not possible with C# to the base class as template type parameter. This is
            the reason for this copy/paste approach for the codebase of this class.
            </summary>
            <typeparam name="T">The type of the UIElement that should be placed inside cells</typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnArrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> to
            arrange the cells UIElement children. The method checks
            <see cref="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.ShouldCreateVisuals"/> and if this is true
            it will initialize the newly created UIElement with attached properties
            about CellRowColumnIndex, RenderCellInfo, CellRenderer, 
            initialize its default properties with a call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.InitializeDefaultProperties(`0)"/>
            and its cell specific content with a call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.InitializeContent(`0,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)"/>.
            The UIElement is arranged on the canvas with a call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.ArrangeUIElement(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,`0,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)"/>.
            </summary>
            <param name="aca">The arange cell layout information.</param>
            <param name="style">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.InitializeDefaultProperties(`0)">
            <summary>
            Set Backgrounds, BorderThickness, Padding and IsEnabled properties.
            </summary>
            <param name="uiElement"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.ArrangeUIElement(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,`0,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Arranges the UI element by setting the Left, Top, Right, Bottom attached
            properties and its Width, Height, MaxWidth and MaxHeight properties. The
            visibility is set to Visibility.Visible and the elements Measure and
            Arrange methods are called.
            </summary>
            <param name="aca">The arrange cell layout.</param>
            <param name="uiElement">The UI element.</param>
            <param name="style">The cell style.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.SetBounds(Windows.UI.Xaml.UIElement,Windows.Foundation.Rect)">
            <summary>
            Helper method which arranges an UI element by setting the Left, Top, Right, Bottom attached
            properties and its Width, Height, MaxWidth and MaxHeight properties. The
            visibility is set to Visibility.Visible and the elements Measure and
            Arrange methods are called.
            </summary>
            <param name="el">The element.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.SetBounds(Windows.UI.Xaml.UIElement,Windows.Foundation.Rect,System.Boolean,System.Boolean)">
            <summary>
            Helper method which arranges an UI element by setting the Left, Top, Right, Bottom attached
            properties and its Width, Height, MaxWidth and MaxHeight properties. The
            visibility is set to Visibility.Visible and the elements Measure and
            Arrange methods are called.
            </summary>
            <param name="el">The element.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.GetUIElement(Syncfusion.WinRT.Controls.Cells.CellUIElements)">
            <summary>
            Gets the UI element or null if the cell visuals do not have any UIElement visuals.
            </summary>
            <param name="cellUIElements">The cell visuals.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.InitializeContent(`0,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnArrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)"/> to initialize the content of the cell 
            using the information from the cell style (value, text,
            behavior etc.). The method calls the virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnInitializeContent(`0,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)"/> which 
            you should override in your derived class.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnInitializeContent(`0,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Called to initialize the content of the cell 
            using the information from the cell style (value, text,
            behavior etc.). You must override this method in your
            derived class.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnPrepareUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> to
            prepare the cells UIElement children.
            VirtualizingCellRendererBase overrides this method and
            creates new UIElements and wires them with the parent cells control.
            </summary>
            <param name="aca">The arange cell layout information.</param>
            <param name="uiElements">The UI elements.</param>
            <param name="canvas">The canvas to which any UIElement elements should be added.</param>
            <param name="cellInfo">The cell style info.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.CreateUIElement(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Creates a new UIElement of type specified with the class type parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnUnloadUIElements(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.CellUIElements)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.UnloadUIElements(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.CellUIElements)"/> after a cell is scrolled out of view.
            VirtualizingCellRendererBase overrides this method and
            creates either removes the cell renderer visuals from the parent canvas
            or hide them and reuse it later in same canvas depending on whether
            <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.AllowRecycle"/> was set.
            </summary>
            <param name="host">The host.</param>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <param name="visuals">The visuals.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnWireUIElement(`0)">
            <summary>
            Wire events from uiElement
            </summary>
            <param name="uiElement"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.OnUnwireUIElement(`0)">
            <summary>
            Unwire previously wired events from uiElement. 
            </summary>
            <param name="uiElement"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.Dispose(System.Boolean)">
            <summary>
            This gets called when parent grid is unloaded. Unload all elements
            that were saved for later reuse.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.AllowRecycle">
            <summary>
            Gets or sets a value indicating whether elements can be recycled when scrolled out of view.
            In this case when a cell is scrolled out of view
            it is moved into a recycle bin and the next time a new element is scrolled into
            view the element is recovered from the recycle bin and reinitialized with the
            new content of the cell. The default value is false.
            </summary>
            <value><c>true</c> if elements can be recycled when scrolled out of view; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.AllowTransparentBackground">
            <summary>
            Gets or sets a value indicating whether the background of the UIElement visual
            placed in the cell can be set to <see cref="!:Brushes.Transparent"/>. This is needed
            in order for the cells control to draw the cell background color behind the UIElement.
            The default value is true.
            </summary>
            <value>
            	<c>true</c> if [allow transparent background]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.SupportsRenderOptimization">
            <summary>
            Gets or sets whether the renderer supports rendering itsself directly to the
            drawing context. When this is possible the UIElement will only be created
            when the user moves the mouse over the cell or if the UIElement is needed for
            other reasons, e.g. animate after change. The benefit of rendering directly to the 
            DrawingContext instead of creating the UIElement is a much improved scrolling 
            performance. The default value is false.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1.InInitializeContent">
            <summary>
            Gets a value indicating whether InitializeContent was called.
            </summary>
            <value><c>true</c> if InitializeContent was called; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager">
            <summary>
            Provides routines for managing cells visuals (aka UIElement children)
            of rendered cells that have been associated with one or more UIElement
            visuals. An instance of this class can be accessed with the 
            <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangedCellUIElements"/> property
            of a <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.UnloadAll">
            <summary>
            Clears all cell visuals and unloads them.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.Unload(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Clears the visuals for a single cell only and unloads them.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.Unload(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Clears the visuals for a range of cells and unloads them.
            </summary>
            <param name="cellSpan">The range of cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.Contains(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determines whether the specified cell has UIElement children and if
            the children are alive.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <returns>
            	<c>true</c> if  the specified cell has UIElement children and if
            the children are alive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.GetCellUIElements(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Gets the cell visuals for a cell.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.GetCellUIElements(System.Int32,System.Int32)">
            <summary>
            Gets the cell visuals for a cell.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.Invalidate(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Marks the visuals for a cell to be reinitialized with
            a call to <see cref="!:VirtualizingCellsControl.EraseRenderedCell"/> next time
            OnRender is called.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.Invalidate(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Marks the visuals for a range of cells to be reinitialized with
            a call to <see cref="!:VirtualizingCellsControl.EraseRenderedCell"/> next time
            OnRender is called.
            </summary>
            <param name="span">The range of cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.InsertRows(System.Int32,System.Int32)">
            <summary>
            Update visuals cell row and column index when rows were inserted.
            </summary>
            <param name="insertAtRowIndex">The row index.</param>
            <param name="count">The number of inserted rows.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.InsertRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellUIElementsDictionary)">
            <summary>
            Update visuals cell row and column index when rows were inserted.
            </summary>
            <param name="insertAtRowIndex">The row index.</param>
            <param name="count">The number of inserted rows.</param>
            <param name="moveVisuals">A container with saved state from a preceeding <see cref="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.RemoveRows(System.Int32,System.Int32)"/> call when rows should be moved.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.RemoveRows(System.Int32,System.Int32)">
            <summary>
            Update visuals cell row and column index when rows were removed.
            </summary>
            <param name="removeAtRowIndex">The row index.</param>
            <param name="count">The number of removed rows.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.RemoveRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellUIElementsDictionary)">
            <summary>
            Update visuals cell row and column index when rows were removed.
            </summary>
            <param name="removeAtRowIndex">Index of the remove at row.</param>
            <param name="count">The number of removed rows.</param>
            <param name="moveVisuals">A container to save state for a subsequent 
            <see cref="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.InsertRows(System.Int32,System.Int32)"/> call when rows should be moved. When null, 
            cell visuals that belong to the removed rows are unloaded. 
            Otherwise these visuals will be saved into this container.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.InsertColumns(System.Int32,System.Int32)">
            <summary>
            Update visuals cell column and column index when columns were inserted.
            </summary>
            <param name="insertAtColumnIndex">The column index.</param>
            <param name="count">The number of inserted columns.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.InsertColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellUIElementsDictionary)">
            <summary>
            Update visuals cell column and column index when columns were inserted.
            </summary>
            <param name="insertAtColumnIndex">The column index.</param>
            <param name="count">The number of inserted columns.</param>
            <param name="moveVisuals">A container with saved state from a preceeding <see cref="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.RemoveColumns(System.Int32,System.Int32)"/> call when columns should be moved.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.RemoveColumns(System.Int32,System.Int32)">
            <summary>
            Update visuals cell column and column index when columns were removed.
            </summary>
            <param name="removeAtColumnIndex">The column index.</param>
            <param name="count">The number of removed columns.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.RemoveColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellUIElementsDictionary)">
            <summary>
            Update visuals cell column and column index when columns were removed.
            </summary>
            <param name="removeAtColumnIndex">Index of the remove at column.</param>
            <param name="count">The number of removed columns.</param>
            <param name="moveVisuals">A container to save state for a subsequent 
            <see cref="M:Syncfusion.WinRT.Controls.Cells.ArrangedCellUIElementsManager.InsertColumns(System.Int32,System.Int32)"/> call when columns should be moved. When null, 
            cell visuals that belong to the removed columns are unloaded. 
            Otherwise these visuals will be saved into this container.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellArgs">
            <summary>
            Provides layout information about a cell such as the VisibleRow, VisibleColumb, the CellRect,
            Covered Cell Span and also cell style information.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellArgs.#ctor(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Windows.Foundation.Rect,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellArgs"/> class.
            </summary>
            <param name="cellsControl">The cells control.</param>
            <param name="visibleRow">The visible row.</param>
            <param name="visibleColumn">The visible column.</param>
            <param name="cellRect">The cell rect.</param>
            <param name="ci">The cell style.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellArgs.SubtractBorderMargins(Windows.Foundation.Rect,Windows.UI.Xaml.Thickness)">
            <summary>
            Remove border margins to get cells client area.
            </summary>
            <param name="cellRect"></param>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellsControl">
            <summary>
            Gets the cells control.
            </summary>
            <value>The cells control.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.RowIndex">
            <summary>
            Gets the absolute index of the row.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.ColumnIndex">
            <summary>
            Gets the absolute index of the column.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellRect">
            <summary>
            Gets or sets the cell rectangle.
            </summary>
            <value>The cell rectangle.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.VisibleCoveredCellInfo">
            <summary>
            Gets the visible covered cell info.
            </summary>
            <value>The visible covered cell info.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellInfo">
            <summary>
            Gets the cell style information.
            </summary>
            <value>The cell style information.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.IsRowHeaderAtLeftSide">
            <summary>
            Gets a value indicating whether this instance is row header at left side.
            </summary>
            <value>
            	<c>true</c> if this instance is row header at left side; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.IsColumnHeaderAtTop">
            <summary>
            Gets a value indicating whether this instance is column header at top.
            </summary>
            <value>
            	<c>true</c> if this instance is column header at top; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.IsRowFooterAtRightSide">
            <summary>
            Gets a value indicating whether this instance is row footer at right side.
            </summary>
            <value>
            	<c>true</c> if this instance is row footer at right side; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.IsColumnFooterAtBottom">
            <summary>
            Gets a value indicating whether this instance is column footer at bottom.
            </summary>
            <value>
            	<c>true</c> if this instance is column footer at bottom; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.VisibleColumn">
            <summary>
            Gets the visible column.
            </summary>
            <value>The visible column.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.VisibleRow">
            <summary>
            Gets the visible row.
            </summary>
            <value>The visible row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellRowColumnIndex">
            <summary>
            Gets the index of the cell row column.
            </summary>
            <value>The index of the cell row column.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellClipRect">
            <summary>
            Gets the cells clipping rectangle.
            </summary>
            <value>The cells clipping rectangle.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.OriginalCellRect">
            <summary>
            Gets the original cell rectangle. This might differ from the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellRect"/>
            if the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellRect"/> was modified. For example OnArrangeCell and OnRenderCell
            in VirtualizingCellsControl substract border from the CellRect.
            </summary>
            <value>The original cell rectangle.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellUIElements">
            <summary>
            Gets the cell visuals.
            </summary>
            <value>The cell visuals.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.RenderCellArgs">
            <summary>
            Provides layout information about a cell such as the VisibleRow, VisibleColumb, the CellRect,
            Covered Cell Span and also cell style information. RenderCellArgs is only used for "Render"
            methods in <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RenderCellArgs.#ctor(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Windows.Foundation.Rect,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.RenderCellArgs"/> class.
            </summary>
            <param name="cellsControl">The cells control.</param>
            <param name="visibleRow">The visible row.</param>
            <param name="visibleColumn">The visible column.</param>
            <param name="cellRect">The cell rectangle.</param>
            <param name="ci">The cell style information.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs">
            <summary>
            Provides layout information about a cell such as the VisibleRow, VisibleColumb, the CellRect,
            Covered Cell Span and also cell style information. ArrangeCellArgs is only used for "Arrange"
            methods in <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/>. ArrangeCellArgs also has member for
            <see cref="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.CellUIElements"/> and <see cref="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.ShouldCreateVisuals"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.#ctor(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Windows.Foundation.Rect,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs"/> class.
            </summary>
            <param name="cellsControl">The cells control.</param>
            <param name="visibleRow">The visible row.</param>
            <param name="visibleColumn">The visible column.</param>
            <param name="cellRect">The cell rectangle.</param>
            <param name="ci">The cell style information.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.#ctor(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Windows.Foundation.Rect,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs"/> class.
            </summary>
            <param name="cellsControl">The cells control.</param>
            <param name="visibleRow">The visible row.</param>
            <param name="visibleColumn">The visible column.</param>
            <param name="cellRect">The cell rectangle.</param>
            <param name="ci">The cell style information.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.CellUIElements">
            <summary>
            Gets the cells visuals.
            </summary>
            <value>The cells visuals.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.HasVisuals">
            <summary>
            Gets a value indicating whether the cell has visuals.
            </summary>
            <value>
            	<c>true</c> if the cell has visuals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.ShouldCreateVisuals">
            <summary>
            Gets a value indicating whether visuals should be create for the cell.
            </summary>
            <value><c>true</c> if should create visuals should be create for the cell; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.ShouldReinitializeContent">
            <summary>
            Gets a value indicating whether the UIElements should be reinitialized.
            </summary>
            <value>
            	<c>true</c> if UIElements should be reinitialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.IsProcessingArrangeCellUIElements">
            <summary>
            Gets a value indicating whether the parent cells control is calling <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/>.
            </summary>
            <value>
            	<c>true</c> if parent cells control is calling <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs.ForceMeasure">
            <summary>
            Gets a value indicating whether the UIElement.Measure method
            needs to be called.
            </summary>
            <value><c>true</c> if UIElement.Measure method
            needs to be called; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoStore">
             <summary>
             Provides storage for the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object.
             </summary>
             <remarks>
             You cannot instantiate a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> class directly. You have
             to derive a concrete class from this class that you can instantiate.<para/>
             In derived classes of <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>, you always need to
             implement a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> / <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
             pair. The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> holds all the data that are specific
             to the style object and should be persisted.<para/>
             The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> is a wrapper around the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
             It provides type safe accessor properties to modify data of the underlying
             data store and can hold temporary information about the style object that
             does not need to be persisted.<para/>
            
             In Essential Grid for example, the GridStyleInfo class holds extensive identity
             information about a style object such as cached base styles, row and column index,
             a reference to the grid model and more. These are all the information that can be discarded
             when the style is no longer used (because maybe the cell is not visible anymore). Only
             the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> part needs to be kept alive.
             <para/>
             <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> allows you to register any number of properties but keeps the data
             very memory efficient. Only properties that are actually used for a style
             object will be allocated for an object. The StyleObjectStore handles the storage of objects.
             For short integers, enums and Boolean values the data will be stored in a BitVector32
             structure to save even more memory.
             <para/>
             See the overview for <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> for further discussion about style objects.
             </remarks>
             <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoIdentityBase"/>
             <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.IStyleInfo">
            <summary>
            Defines an interface implemented both by <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> and <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
            that allows you to check the state of the object, read and write specific property and execute
            style operations with the <see cref="M:Syncfusion.WinRT.Styles.IStyleInfo.ModifyStyle(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)"/>. method.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleInfo.IsSubset(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and indicates whether
            the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="style">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleInfo.ModifyStyle(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.WinRT.Styles.StyleModifyType"/>.
            </summary>
            <param name="style">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleInfo.MergeStyle(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style object
            and keeps only those properties that are equal.
            </summary>
            <param name="style">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleInfo.ParseString(System.String)">
            <summary>
            Parses a given string and applies the results to affected properties in this style object.
            </summary>
            <param name="s">The string to be interpreted.</param>
            <remarks>
            <see cref="M:Syncfusion.WinRT.Styles.IStyleInfo.ParseString(System.String)"/> consumes strings previously generated with
            a <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> method call.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleInfo.HasValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleInfo.GetValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.IStyleInfo.IsEmpty">
            <summary>
            Indicates whether the style is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.IStyleInfo.IsChanged">
            <summary>
            Indicates whether any properties for this object have changed since it was applied last time.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.IStyleInfo.Store">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.FindStyleInfoProperty(System.String)">
            <summary>
            Searches the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> with the given name.
            </summary>
            <param name="name">The name of the property to look for.</param>
            <returns>A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that is associated with the specified name.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.#ctor">
            <summary>
            Initializes an empty <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> with same data as the current object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.CopyTo(Syncfusion.WinRT.Styles.StyleInfoStore)">
            <summary>
            Copies all properties to another <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            </summary>
            <param name="target">The target to copy all properties to.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ResetChangedBits">
            <summary>
            Resets all "Changed" bits that mark certain properties as modified.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.Clear">
            <summary>
            Clears out all properties for this <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.HasValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.IsValueModified(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been modified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.SetValueModified(Syncfusion.WinRT.Styles.StyleInfoProperty,System.Boolean)">
            <summary>
            Marks a specific property as modified or unmodified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ResetValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Marks a specific property as uninitialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.GetValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.GetShortValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Queries the <see cref="T:System.Int16"/> value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.SetValue(Syncfusion.WinRT.Styles.StyleInfoProperty,System.Object)">
            <summary>
            Overloaded. Initializes the value for a specific property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.SetValue(Syncfusion.WinRT.Styles.StyleInfoProperty,System.Int16)">
            <summary>
            Initializes the <see cref="T:System.Int16"/> value for a specific property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore._EqualsProperty(Syncfusion.WinRT.Styles.StyleInfoProperty,Syncfusion.WinRT.Styles.StyleInfoStore)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore._ModifyProperty(Syncfusion.WinRT.Styles.StyleInfoProperty,Syncfusion.WinRT.Styles.StyleInfoStore,Syncfusion.WinRT.Styles.StyleModifyType)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <param name="mt"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.IsSubset(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and determines
            if the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="istyle">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ModifyStyle(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.WinRT.Styles.StyleModifyType"/>.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ModifyStyleKeepChanges(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.WinRT.Styles.StyleModifyType"/>. If a property is modified
            its Changed flag is set so that the parent style object can identify modified properties in a subsequent Changed notification.
            It is called from CopyFrom and keeping changed bits is needed to properly raise
            StyleChanged notifications.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.MergeStyle(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style objects
            and keeps only those properties that are equal.
            </summary>
            <param name="istyle">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ProcessWriteXml(System.Xml.XmlWriter,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Allows customization of serializing the StyleInfoProperty. Returns True if you override
            this method and do not want default serialization behavior for this property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ProcessReadXml(System.Xml.XmlReader,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Allows customization of serializing the StyleInfoProperty. Returns True if you override
            this method and do not want default serialization behavior for this property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes all properties of this object to XML.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.RegisterXmlSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Registers the XmlSerializer for a specific type. This XmlSerializer will
            be used when a object of the specified type is read back in from an xml stream. 
            You can for example register an "ImageHolder" serializer for a custom ImageHolder type
            and have that serializer be used when GridStyleInfo.CellValue contains an ImageHolder object.
            </summary>
            <param name="type"></param>
            <param name="xmlSerializer"></param>
            <example>
            <code>
            XmlSerializer imageHolderSerializer = new XmlSerializer(typeof(object), new Type[] { typeof(ImageHolder) });
            GridStyleInfoStore.RegisterXmlSerializer(typeof(ImageHolder), imageHolderSerializer);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.ReadXml(System.Xml.XmlReader)">
            <summary>
            Serializes all properties of this object from XML.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoStore.GetSchema">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoStore.StyleInfoProperties">
            <summary>
            Returns a collection with <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> objects.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoStore.PropertyGridSortOrder">
            <summary>
            The <see cref="!:StyleInfoBaseConverter"/> class checks this property
            to find out about the sort order of the properties in this <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoStore.IsEmpty">
            <summary>
            Indicates whether this is an empty object and no properties have been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoStore.IsChanged">
            <summary>
            Indicates whether any properties have been changed.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore.TopProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Top"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore.LeftProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Left"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore.BottomProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Bottom"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore.RightProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Right"/> property. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore.#ctor">
            <overload>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore"/>
            </overload>
            <summary>
            Initializes an empty <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore"/>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore.Clone">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore.StaticDataStore">
            <override/>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo">
            <summary>
            Provides a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> object for borders in a cell. Each border side of
            the cell can be configured individually with a <see cref="T:Syncfusion.WinRT.Controls.Pen"/> value. Border sides that
            have not been initialized will inherit default values from a base style.
            </summary>
            <example>
            The following code changes border information for cells:
            <code lang="C#">
            
                        Pen border = new Pen(GridBorderStyle.Solid, Color.FromArgb(57, 73, 122));
                        model[rowIndex, colIndex].Borders.Bottom = border;
                        model[rowIndex, colIndex].Borders.Right = border;
            </code>
            The following code hides grid lines for specific cells:
            <code lang="C#">
                        Pen border = new Pen(GridBorderStyle.None);
                        model[rowIndex, colIndex].Borders.Bottom = border;
                        model[rowIndex, colIndex].Borders.Right = border;
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase">
            <summary>
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> is an abstract base class for classes
            to be used as subobjects in a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> is derived from <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>
            and thus provides the same easy way to provide properties that can inherit values
            from base styles at run-time.<para/>
            The difference is that <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> supports this inheritance
            mechanism as a subobject from a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>. A subobject needs to
            have knowledge about its parent object and be able to walk the base styles from the
            parent object.<para/>
            Examples for implementation of <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> are the font and border
            classes in Essential Grid.<para/>
            Programmers can derive their own style classes from <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> 
            and add type-safe (and Intelli-sense) 
            supported custom properties to the style class. If you write your own 
            SpinButton class that needs individual properties, simply add a "CellSpinButtonInfo" 
            class as subobject. If you derive CellSpinButtonInfo from StyleInfoSubObjectBase, 
            your new object will support property inheritance from base styles.
            <para/>
            See the overview for <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> for further discussion about style objects.
            </remarks>
            <example>The following example shows how you can use the GridFontInfo class in Essential Grid:
            <code lang="C#">
                    standard.Font.Facename = "Helvetica";
                    model[1, 3].Font.Bold = true;
                    string faceName = model[1, 3].Font.Facename; // any cell inherits standard style
                    Console.WriteLIne(faceName); // will output "Helvetica"
                    Console.WriteLIne(model[1, 3].Font.Bold); // will output "true"
                    Console.WriteLIne(model[1, 3].Font.HasFaceName); // will output "False"
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoBase">
            <summary>
            Provides a wrapper object for the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object with type
            safe access to all properties stored in the style object.
            <para/>
            Style objects provide a very user friendly way to modify data. It is very much like in Excel VBA.
            For example, to change the bold setting for a cell, you simply call grid[5,2].Font.Bold = True.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> is a wrapper around the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            It provides type safe accessor properties to modify data of the underlying
            data store and can hold temporary information about the style object that
            does not need to be persisted.
            <para/>
            In Essential Grid for the example, the GridStyleInfo class holds extensive identity
            information about a style object such as cached base styles, row and column index,
            a reference to the grid model, and more. This is all the information that can be discarded
            when the style is no longer used (because maybe the cell is not visible anymore). Only
            the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> part needs to be kept alive.
            <para/>
            Style objects only exist temporarily and will be created as a weak reference in a
            volatile data store. Once Garbage Collection kicks in smart style objects that are not
            referenced any more will be garbage collected. The volatile data cache can also be
            cleared manually.
            <para/>
            Because Style objects know their identity they can notify their owner of changes or
            load base style information when the user interacts with the style object. This allows
            you to make changes to a style object directly, such as Cell.Font.Bold = True;
            <para/>
            Style objects support property inheritance from parent styles, e.g. in a grid a cell
            can inherit properties from a parent row, column, table or a collection of names styles
            in a base styles map.
            <para/>
            Style objects support subobjects. Subobjects can support inheritance (e.g. a Font.Bold
            can be inherited). Immutable subobjects like BrushInfo don't support inheritance of
            individual properties.
            <para/>
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> allows you to register any number of properties but keeps the data
            very memory efficient. Only properties that are actually used for a style
            object will be allocated for an object. The StyleObjectStore handles the storage of the object.
            For short integers, enums and Boolean values, the data will be stored in a BitVector32
            structure to save even more memory.
            <para/>
            Programmers can derive their own style classes from <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/>
            and add type-safe (and intellisense)
            supported custom properties to the style class. If you write, for example, your own
            SpinButton class that needs individual properties, simply add a “CellSpinButtonInfo”
            class as subobject. If you derive CellSpinButtonInfo from StyleInfoSubObjectBase,
            your new object will support property inheritance from base styles.
            <para/>
            Style objects can be written into a string (see <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/>) and later be recreated
            using the <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/> method. When writing the string you have the option to show
            default values (use the “d” format). Subobjects will be identified with a dot
            ‘.’, e.g. “Font.Bold”
            <para/>
            Style object support several operations how to combine information from two styles. Style operations
            include: apply changes, apply initialized properties, override initialized properties, exclude properties.
            See the <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ModifyStyle(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)"/> method.
            <para/>
            Style objects support BeginUpdate, EndUpdate mechanism. This allows users to batch several operations
            on a style object into one transaction.
            <para/>
            </remarks>
            <example>The following example shows how you can use the GridFontInfo class in Essential Grid:
            <code lang="C#">
                    standard.Font.Facename = "Helvetica";
                    model[1, 3].Font.Bold = true;
                    string faceName = model[1, 3].Font.Facename; // any cell inherits standard style
                    Console.WriteLIne(faceName); // will output "Helvetica"
                    Console.WriteLIne(model[1, 3].Font.Bold); // will output "true"
                    Console.WriteLIne(model[1, 3].Font.HasFaceName); // will output "False"
            </code>
            </example>
            <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoIdentityBase"/>
            <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoBase.identity">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoBase._store">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoBase.expandableObjects">
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.SetStore(Syncfusion.WinRT.Styles.StyleInfoStore)">
            <summary>
            Sets the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.#ctor">
            <summary>
            Overloaded. Initializes a new style object with no identity and data initialized.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.#ctor(Syncfusion.WinRT.Styles.StyleInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.#ctor(Syncfusion.WinRT.Styles.StyleInfoIdentityBase,Syncfusion.WinRT.Styles.StyleInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> and <see cref="T:Syncfusion.WinRT.Styles.StyleInfoIdentityBase"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoIdentityBase"/> that holds the identity for this <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.#ctor(Syncfusion.WinRT.Styles.StyleInfoIdentityBase,Syncfusion.WinRT.Styles.StyleInfoStore,System.Boolean)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> and <see cref="T:Syncfusion.WinRT.Styles.StyleInfoIdentityBase"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoIdentityBase"/> that holds the identity for this <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object.</param>
            <param name="cacheValues">if set to <c>true</c> the style the resulting value of a property when inherited from a basestyle
            so that the property does not have to be evaluated multiple times when called repeatedly.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.Equals(System.Object)">
            <summary>
            Indicates whether two style objects are equal. Identity is left out with this comparison,
            only the data (<see cref="P:Syncfusion.WinRT.Styles.StyleInfoBase.Store"/>) are compared.
            </summary>
            <param name="obj">The other style object to compare the current object with.</param>
            <returns>True if both objects have equal data; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.EqualsObject(System.Object,System.Object)">
            <summary>
            Compares two objects for equality. Works also with NULL references.
            </summary>
            <param name="obj1">The first object to compare.</param>
            <param name="obj2">The second object to compare.</param>
            <returns>True if both objects are equal.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.GetHashCode">
            <summary>
            Returns a hash code which is based on values inside the <see cref="P:Syncfusion.WinRT.Styles.StyleInfoBase.Store"/>.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ToString">
            <summary>
            Overloaded. Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/>.
            </summary>
            <returns>A string with formatted style information.</returns>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string, you have the option to show default values 
            (use the “d” format). <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ToString(System.String)">
            <summary>
            Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/>. You can specify
            "d" as format if you want to write out default values inherited from a base style.
            </summary>
            <param name="format">Use "d" if default values should be included; "G" and NULL are default.</param>
            <returns>A string with formatted style information.</returns>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string you have the option to show default values 
            (use the "d" format) or not. <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/>. You can specify
            "d" as format if you want to write out default values inherited from a base style.
            </summary>
            <param name="format">Use "d" if default values should be included; "G" and NULL are default.</param>
            <returns>A string with formatted style information.</returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> to be used
            for the <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> operation. Can be NULL.</param>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string you have the option to show default values 
            (use the "d" format) or not. <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)">
            <summary>
            Parses a given string and applies it's results to affected properties in this style object.
            </summary>
            <param name="s">The string to be parsed.</param>
            <remarks>
            <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/> consumes strings previously generated with
            a <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> method call.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.BeginInit">
            <summary>
            Suspends raising <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed"/> events until <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.EndInit"/> is called 
            and will not change the <see cref="P:Syncfusion.WinRT.Styles.StyleInfoBase.IsChanged"/> state of this object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.EndInit">
            <summary>
            Resumes raising <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed"/> events and resets the <see cref="P:Syncfusion.WinRT.Styles.StyleInfoBase.IsChanged"/> state of this object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.BeginUpdate">
            <summary>
            Suspends raising <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed"/> events until <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.EndUpdate"/> is called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.EndUpdate">
            <summary>
            Suspends raising <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed"/> events and if changes were
            made before the <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.EndUpdate"/> call, it will raise a changed
            notification immediately.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.GetDefaultStyle">
            <summary>
            Override this method to return a default style object for your derived class.
            </summary>
            <returns>A default style object.</returns>
            <remarks>
            You should cache the default style object in a static field.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.CreateSubObjectIdentity(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Override this method to create a product-specific identity object for a sub object.
            </summary>
            <returns>An identity object for a subobject of this style.</returns>
            <example>
            The following code is an example how Essential Grid creates GridStyleInfoSubObjectIdentity:
            <code lange="C#">
            public override StyleInfoSubObjectIdentity CreateSubObjectIdentity(StyleInfoProperty sip)
            {
            	return new GridStyleInfoSubObjectIdentity(this, sip);
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.GetDefaultStyleInfoStore(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Locates the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> in the list of base styles that 
            provides a specific property.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style store object that has the specified property.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.IntGetDefaultStyleInfo(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Locates the base style that has the specified property and returns its instance.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style object that has the specified property.</returns>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoBase.inStyleChanged">
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Notifies the associated identity object that a specific property
            was changed and raises a <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed"/> event.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.OnStyleChanging(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Notifies the associated identity object that a specific property
            will be changed and raises a <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changing"/> event.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.IsSubset(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and indicates
            whether the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="istyle">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.CopyFrom(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Copies properties from another style object. This method raises Changing and Changed 
            notifications if the other object differs. (ModifyStyle does not raise these events).
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ModifyStyle(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.WinRT.Styles.StyleModifyType"/>.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.MergeStyle(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style objects
            and keeps only those properties that are equal.
            </summary>
            <param name="istyle">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.HasValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether the specified property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.IsValueModified(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether the specified property has been modified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ResetValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Marks the specified property as uninitialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.NotifySubObjectChanged(Syncfusion.WinRT.Styles.IStyleInfoSubObject)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.GetValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for the specified property that has been initialized for the current object
            or locates it in a base style.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.GetDefaultValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Gets the default value from a base style.
            </summary>
            <param name="sip">The sip.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.GetShortValue(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Queries the <see cref="T:System.Int16"/> value for the specified property that has been initialized for the current object
            or locates it in a base style.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.SetValue(Syncfusion.WinRT.Styles.StyleInfoProperty,System.Object)">
            <summary>
            Overloaded. Initializes the value for the specified property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.SetValue(Syncfusion.WinRT.Styles.StyleInfoProperty,System.Int16)">
            <summary>
            Initializes the <see cref="T:System.Int16"/> value for the specified property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the contents of this object into an XML stream.
            </summary>
            <param name="writer">Represents the XML stream.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Not implemented and returns NULL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the contents of this object from an XML stream.
            </summary>
            <param name="reader">Represents the XML stream.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.Identity">
            <summary>
            Gets / sets the identity information for the current <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.Store">
            <summary>
            The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.ExpandableObjects">
            <exclude/>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.CacheValues">
            <summary>
            Gets or sets a value indicating whether this instance should cache values for resolved base style properties.
            </summary>
            <value><c>true</c> if instance should cache values; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed">
            <summary>
            Occurs when a property in the style object or in a sub object is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.WeakReferenceChangedListeners">
            <summary>
            A list of listeners that will be referenced using a WeakReference. The
            listeners must implement the <see cref="T:Syncfusion.WinRT.Styles.IStyleChanged"/> interface. When
            this style object <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoProperty)"/> method is called it
            will then loop through all objects in this list and call each objects
            <see cref="M:Syncfusion.WinRT.Styles.IStyleChanged.StyleChanged(Syncfusion.WinRT.Styles.StyleChangedEventArgs)"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changing">
            <summary>
            Occurs before a property in the style object or in a sub object is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.Updating">
            <summary>
            Indicates whether <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.BeginUpdate"/> was called for this object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.IsEmpty">
            <summary>
            Indicates whether the style is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoBase.IsChanged">
            <summary>
            Indicates whether any properties for this object have changed since it was applied last time.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.IStyleInfoSubObject">
            <summary>
            <see cref="T:Syncfusion.WinRT.Styles.IStyleInfoSubObject"/> defines an interface for classes
            used as sub-objects in a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> implements this interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleInfoSubObject.MakeCopy(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object and registered with the new owner style object.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.IStyleInfoSubObject.Sip">
            <summary>
            Returns a unique identifier for this sub object in the owner style object. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.IStyleInfoSubObject.Owner">
            <summary>
            Returns a reference to the owner style object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.IStyleInfoSubObject.Data">
            <summary>
            Returns the data for this object. This is the StyleInfoStore from the constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.#ctor(Syncfusion.WinRT.Styles.StyleInfoStore)">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinRT.Styles.StyleInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>.
            <param name="store">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> that holds data for this object.</param>
            All changes in this style object will be saved in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.IntGetDefaultStyleInfo(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Locates the base style that has the specified property and returns its instance.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style object that has the specified property.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.MakeCopy(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object registered with the new owner style object.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.SubObjectIdentity">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity"/> with identity information about this object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.Sip">
            <summary>
            Returns a unique identifier for this subobject in the owner style object. 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.Data">
            <summary>
            Returns the data for this object. This is the StyleInfoStore from the constructor.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase.Owner">
            <summary>
            Returns a reference to the owner style object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.CreateObject(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,System.Object)">
            <summary>
            Creates the CellBordersInfo object.
            </summary>
            <param name="identity">The identity.</param>
            <param name="store">The store.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.#ctor">
            <overload>
            Initializes a new empty <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/> object.
            </overload>
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/>  object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/>  object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore"/> that holds data for this <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/>.
            All changes in this style object will saved in the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfoStore"/> object.</param>
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.MakeCopy(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.GetDefaultStyle">
            <summary>
            Returns <see cref="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Default"/>
            </summary>
            <returns>A <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/> object with default values.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.ResetAll">
            <summary>
            Resets all four border sides with one command.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.ResetTop">
            <summary>
            Resets the top border
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.ResetLeft">
            <summary>
            Resets the left border
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.ResetBottom">
            <summary>
            Resets the bottom border
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.ResetRight">
            <summary>
            Resets the right border
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Default">
            <summary>
            Returns a default <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBordersInfo"/> to be used with a default style.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.All">
            <summary>
            Allows you to set all four border sides with one command.
            </summary>
            <example>
            <code lang="C#">
            model[2, 2].Borders.All = new Pen(GridBorderStyle.Solid, Color.FromArgb(100, 238, 122, 3));
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Item(Syncfusion.WinRT.Controls.Cells.CellBorderSide)">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Controls.Pen"/> for the specified <see cref="T:Syncfusion.WinRT.Controls.Cells.CellBorderSide"/>
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Top">
            <summary>
            The top border
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.HasTop">
            <summary>
            Determines if the top border has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Left">
            <summary>
            The left border
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.HasLeft">
            <summary>
            Determines if the left border has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Bottom">
            <summary>
            The bottom border
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.HasBottom">
            <summary>
            Determines if the bottom border has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.Right">
            <summary>
            The right border
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellBordersInfo.HasRight">
            <summary>
            Determines if the right border has been initialized.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore">
            <summary>
            Implements the data store for the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/> object.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore.LeftProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Left"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore.TopProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Top"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore.RightProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Right"/> property. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore.BottomProperty">
            <summary>
            Provides information about the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Bottom"/> property. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore.#ctor">
            <overload>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore"/>
            </overload>
            <summary>
            Initializes an empty <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore.Clone">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore.StaticDataStore">
            <override/>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo">
            <summary>
            Provides a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/> object for margins in a cell. Each margin side of
            the cell can be configured individually with a <see cref="T:Windows.UI.Xaml.Thickness"/> value. Margin sides that
            have not been initialized will inherit default values from a base style.
            </summary>
            <example>
            The following code changes margin information for cells:
            <code lang="C#">
            
                        Thickness margins = new Thickness(1, 1, 2, 2);
                        model[rowIndex, colIndex].Margins = new CellMarginsInfo(margins);
                        model[rowIndex, colIndex+1].Margins.Right = 2;
                        model[rowIndex, colIndex+1].Margins.Left = 2;
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.CreateObject(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,System.Object)">
            <summary>
            Creates the CellMarginsInfo object.
            </summary>
            <param name="identity">The identity.</param>
            <param name="store">The store.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overload>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/>
            </overload>
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/> and saves left, top, right and bottom margins.
            </summary>
            <param name="left">Left margin.</param>
            <param name="top">The top margin.</param>
            <param name="right">The right margin.</param>
            <param name="bottom">The bottom margin.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/> class.
            </summary>
            <param name="thickness">The thickness.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.#ctor(Windows.UI.Xaml.Thickness)">
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/> and copies settings from a <see cref="T:Windows.UI.Xaml.Thickness"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/>  object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/>.
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.#ctor(Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity,Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/>  object and associates it with an existing <see cref="T:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity"/> that holds the indentity for this <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/>.
            <param name="store">A <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore"/> that holds data for this <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/>.
            All changes in this style object will saved in the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfoStore"/> object.</param>
            </param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.ToThickness">
            <summary>
            Converts this object to a <see cref="T:Windows.UI.Xaml.Thickness"/> object.
            </summary>
            <returns>A <see cref="T:Windows.UI.Xaml.Thickness"/> object filled with the current objects settings.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.ToThickness(Syncfusion.WinRT.Controls.Cells.CellMarginsInfo)">
            <summary>
            Creates a <see cref="T:Windows.UI.Xaml.Thickness"/> object comibing margins.
            </summary>
            <returns>A <see cref="T:Windows.UI.Xaml.Thickness"/> object filled with the current objects settings.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.MakeCopy(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.GetDefaultStyle">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.ResetTop">
            <summary>
            Resets the top margin
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.ResetLeft">
            <summary>
            Resets the left margin
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.ResetBottom">
            <summary>
            Resets the bottom margin
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.ResetRight">
            <summary>
            Resets the right margin
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Default">
            <summary>
            Returns a default <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/> to be used with a default style.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Empty">
            <summary>
            Returns a empty <see cref="T:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Top">
            <summary>
            The top margin
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.HasTop">
            <summary>
            Determines if the top margin has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Left">
            <summary>
            The left margin
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.HasLeft">
            <summary>
            Determines if the left margin has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Bottom">
            <summary>
            The bottom margin
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.HasBottom">
            <summary>
            Determines if the bottom margin has been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.Right">
            <summary>
            The right margin
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellMarginsInfo.HasRight">
            <summary>
            Determines if the right margin has been initialized.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellUIElementsDictionary">
            <summary>
            A strong typed dictionary that maps RowColumnIndex to CellUIElements.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1">
            <summary>
            A generic class that emulates a subset of a Dictionary{T}.
            Internally rows are held in a dictionary and each row has a dictionary of cells.
            The class also provides support for adding, removing and moving rows and 
            columns.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.#ctor(Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/> class.
            </summary>
            <param name="callback">The callback for moved and removed cell notifications.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Clear">
            <summary>
            Clears out the dictionary. There are no "OnRemoveCell" notfications triggered.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.RemoveAll">
            <summary>
            Removes all entries from the dictionary and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            callback for each deleted cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.ContainsKey(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determines whether a cell exists.
            </summary>
            <param name="cell">The cell.</param>
            <returns>
            	<c>true</c> if the cell exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.TryGetValue(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0@)">
            <summary>
            Tries to get the value if the cell exists.
            </summary>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <returns>true if cell exits; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Add(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)">
            <summary>
            Adds the cell and its value the dictionary. There is no "OnMoveCell" callback triggered.
            </summary>
            <param name="cell"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Clear(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Removes the cell from the dictionary. There is no "OnRemoveCell" callback triggered.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Remove(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Removes the cell from the dictionary and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            callback for the deleted cell.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Remove(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Removes the specified cell span and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            callback for each deleted cell.
            </summary>
            <param name="cellSpan">The cell span.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Iterate(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase,Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary{`0}.RowColumnIndexValueDelegate)">
            <summary>
            Iterates through the specified cell span and calls the specified method
            for each existing cell in the range.
            </summary>
            <param name="cellSpan">The cell span.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.InsertRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary{`0})">
            <summary>
            Inserts the rows and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnMovedCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            callback for each moved cell. When you specify moveCells then these cells
            will be added beginning at the first insert row.
            </summary>
            <param name="insertAtRowIndex">Index of the insert at row.</param>
            <param name="count">The count.</param>
            <param name="moveCells">The move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.RemoveRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary{`0})">
            <summary>
            Removes the rows and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            callback for each removed cell. When you specify moveCells the callback will not be called,
            instead the cells will be added to the moveCells dictionary. A subsequent
            InsertRows call can then insert the rows at a different location.
            </summary>
            <param name="removeAtRowIndex">Index of the remove at row.</param>
            <param name="count">The count.</param>
            <param name="moveCells">The move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.InsertColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary{`0})">
            <summary>
            Inserts the columns and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnMovedCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            callback for each moved cell. When you specify moveCells then these cells
            will be added beginning at the first insert column.
            </summary>
            <param name="insertAtColumnIndex">Index of the insert at column.</param>
            <param name="count">The count.</param>
            <param name="moveCells">The move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.RemoveColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary{`0})">
            <summary>
            Removes the columns and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            callback for each removed cell. When you specify moveCells the callback will not be called,
            instead the cells will be added to the moveCells dictionary. A subsequent
            InsertColumns call can then insert the columns at a different location.
            </summary>
            <param name="removeAtColumnIndex">Index of the remove at column.</param>
            <param name="count">The count.</param>
            <param name="moveCells">The move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.SetCallback(Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks{`0})">
            <summary>
            Sets the callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.OnMovedRow(System.Collections.Generic.KeyValuePair{System.Int32,Syncfusion.WinRT.Controls.Cells.IntegerValueCellsDictionary{`0}},System.Int32)">
            <summary>
            Called when a row was moved. The default implementation of this method
            loops through all cells in the row and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnMovedCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            for each cell.
            </summary>
            <param name="rowEntry">The row entry.</param>
            <param name="rowIndex">Index of the row.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.OnRemovedRow(System.Collections.Generic.KeyValuePair{System.Int32,Syncfusion.WinRT.Controls.Cells.IntegerValueCellsDictionary{`0}})">
            <summary>
            Called when row was removed. The default implementation of this method
            loops through all cells in the row and calls <see cref="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)"/> 
            for each cell.
            </summary>
            <param name="rowEntry">The row entry.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Item(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Gets or sets the value for the specified cell.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.RowColumnIndexValueDelegate">
            <summary>
            A delegate with a method to be called back while iterating through a
            range of cells with the <see cref="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.Iterate(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase,Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary{`0}.RowColumnIndexValueDelegate)"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1">
            <summary>
            An interface for callback functions of a <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/>.
            You should call <see cref="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1.SetCallback(Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks{`0})"/> to register
            your object that implements this interface with the collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnMovedCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)">
            <summary>
            Called from <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/> when a cell
            is moved after a InsertRows, RemoveRows, InsertColumns or RemoveColumns
            method call.
            </summary>
            <param name="cellRowColumnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRowColumnIndexValueDictionaryCallbacks`1.OnRemoveCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)">
            <summary>
            Called when from <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/> when a cell
            is removed either by a RemoveRows, RemoveColumns, Remove or RemoveAll call.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellUIElementsDictionary.#ctor(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellUIElementsDictionary"/> class.
            </summary>
            <param name="cellsControl">The cells control.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellUIElements">
            <summary>
            Holds the list of UIElement child elements for a cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellUIElements.Unload(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl)">
            <summary>
            Unloads the cells from the host.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellUIElements.AllowUnloadVisuals">
            <summary>
            Gets a value indicating whether the visuals of the cell can be unloaded.
            </summary>
            <value><c>true</c> if visuals of the cell can be unloaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellUIElements.Renderer">
            <summary>
            Gets the renderer.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellUIElements.UIElements">
            <summary>
            Gets the UI elements.
            </summary>
            <value>The UI elements.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellUIElements.IsDirty">
            <summary>
            When set to true the UIElement will be reinitialized next time
            OnRender is called.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellBorderSide">
            <summary>
            Defines the border side.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBorderSide.Top">
            <summary>
            At top
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBorderSide.Left">
            <summary>
            At left side
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBorderSide.Bottom">
            <summary>
            At bottom
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.CellBorderSide.Right">
            <summary>
            At right side
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo">
            <summary>
            Defines cell render style information.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo.GetCellBackground">
            <summary>
            Gets the cell background.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo.CanCombineCellBackground(Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Determines whether this cell can combine the cell background with the specified other cell.
            </summary>
            <param name="other">The other cell.</param>
            <returns>
            	<c>true</c> if this cell can combine the cell background with the specified other cell; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo.GetCellBorder(Syncfusion.WinRT.Controls.Cells.CellBorderSide)">
            <summary>
            Gets the cell border.
            </summary>
            <param name="side">The side.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo.CanCombineCellBorder(Syncfusion.WinRT.Controls.Cells.CellBorderSide,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Determines whether this cell can combine the cells border with the the specified other cell.
            </summary>
            <param name="side">The side.</param>
            <param name="other">The other cell.</param>
            <returns>
            	<c>true</c> if this cell can combine the cells border with the the specified other cell; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo.GetBorderMargins">
            <summary>
            Gets the border margins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo.GetPadding">
            <summary>
            Gets the padding.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.IntegerValueCellsDictionary`1">
            <summary>
            An object with a Cells dictionary. This class is used by
            <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueDictionary`1"/> for rows
            inside that dictionary where each row has cells.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.IntegerValueCellsDictionary`1.Cells">
            <summary>
            Gets or sets the dictionary of cells.
            </summary>
            <value>The cells.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueArray`1">
            <summary>
            A generic class that emulates a subset of a Dictionary{T}.
            Internally rows are hold in a dictionary and each row has a dictionary of cells.
            The class also provides support for adding, removing and moving rows and 
            columns.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueArray`1.Clear">
            <summary>
            Clears out the dictionary. There are no "OnMoved" callback triggered.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueArray`1.RemoveAll">
            <summary>
            Removes all entries from the dictionary and calls "OnRemoveCell" callback for each deleted cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueArray`1.Add(Syncfusion.WinRT.Controls.Cells.SerializableKeyValuePair{Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0})">
            <summary>
            Adds the cell and its value the dictionary.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueArray`1.Add(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,`0)">
            <summary>
            Adds the cell and its value the dictionary. There is no "OnMoved" callback triggered.
            </summary>
            <param name="cell"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueArray`1.Clear(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Removes the cell from the dictionary. There is no "OnRemoved" callback triggered.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndexValueArray`1.Remove(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Removes the cell from the dictionary. There is no "OnRemoved" callback triggered.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl">
            <summary>
            VirtualizingCellsControl is an abstract base class which can be used as a
            base class for any control with the purpose of displaying cells in scrollable
            rows and columns with built-in virtualization of visual elements inside the cells.
            <para/>
            VirtualizingCellsControl queries cell contents with the <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetRenderCellInfo(Windows.UI.Xaml.DependencyObject)"/>
            method which returns a <see cref="T:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo"/> object. Each cell is associated
            with a <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/> object which provides methods for measuring,
            arranging and drawing contents of a cell. The VirtualizingCellsControl implements
            the <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeContent(Windows.Foundation.Size)"/> and <see cref="!:OnRender"/> methods. Within implementation
            of the OnArrangeContent method each cells UIElement children are placed on the controls area.
            A cell renderer can also be without any UIElement children and instead draw all its contents
            directly to the DrawingContext of the VirtualizingCellsControl when the <see cref="!:OnRender"/>
            method is executed. For a cell renderer it is also possible to do both: Arrange UIElements
            on the controls area and draw additional contents in its render area. There are also
            various optimization techniques that can be implemented with the renderer and are discussed
            in the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/> overview.
            <para/>
            VirtualizingCellsControl provides a few standard features that can be utilized
            by derived grid or tree controls such as the "Covered Cell" feature (see
            <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CoveredCellsProvider"/>), the "SpanBackground" (
            <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellSpanBackgroundsProvider"/>)
            feature, support for MouseControllers (<see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher"/>), create an
            UIElement on demand when hovering mouse over cell, cell borders and methods that 
            convert from display coordinates to cell coordinates and vice versa.
            <para/>
            The virtualization of UIElement children of cell renderers is implemented in 
            the arrange cells code. At the time a cell is placed the cell renderer is 
            called to create and intialize the UIElement children. When a cell is scrolled
            out of view the cell renderer is called to unload the UIElement children. A cell
            renderer can decide whether to unload a UIElement, keep it alive or move
            it to a recycle bin and reuse it later. The main logic of this code is implemented
            by the <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1"/> class which contains more detailed
            discussion about this feature.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl">
            <summary>
            ScrollAxisControl provides support for scrolling through rows and columns. The
            logic to map from row or column index to scroll position and back is implemented
            in the <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase"/> which is accessed through the <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/>
            and <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollColumns"/> property.
            <para/>
            You can assign a collection that implements <see cref="T:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost"/> and manages row heights
            or column widths to the <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.RowHeightsProvider"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ColumnWidthsProvider"/>.
            <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase"/> will use information from these objects to map from row or 
            column index to scroll position and back map from row or column index to scroll position and back.
            <para/>
            Rows and Columns can have varying size and they can be hidden. They can be frozen at the 
            top, bottom, left and right side. Both pixel scrolling and non-pixel scrolling is supported.
            <para/>
            ScrollBar logic and child frame logic is implemented in the base <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollControl"/>
            class.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ScrollControl">
            <summary>
            ScrollControl maintains a collection of child frames at the top, bottom, left and right of the control 
            so that they do not scroll similiar to Internet Explorer frames concept. It maintains clipping for 
            child elements inside these frames. The height and width of the frames is specified through the 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.TopLeftFrameExtent"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.BottomRightFrameExtent"/> methods. The inner frame 
            is scrollable both horizontally and vertically.
            <para/>
            ScrollControl implements IScrollInfo and provides <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.VScrollBar"/> and 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.HScrollBar"/> properties to simplify management of scrollbars. 
            <para/>
            Adding and removing Visual elements from the <see cref="!:VisualContainer.Children"/> collection does not trigger
            calls to InvalidateMeasure. This allows adding and removing elements
            on the fly. A derived control is responsible to call Measure and Arrange
            on child elements since this base class will not do this by itsself.
            <para/>
            ScrollControl also has support for automatic scrolling of content when the user drags the pressed
            mouse to an edge of the control. 
            <para/>
            ScrollControl is best embedded inside a ScrollViewer container, but can also be placed standalone on a form.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider">
            <summary>
            An object that provides <see cref="P:Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider.HScrollBar"/>, <see cref="P:Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider.VScrollBar"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider.Element"/> properties.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider.HScrollBar">
            <summary>
            Gets the state describing for the horizontal scroll bar.
            </summary>
            <value>The horizontal scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider.VScrollBar">
            <summary>
            Gets the state describing for the vertical scroll bar.
            </summary>
            <value>The vertical scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider.Element">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
            <value>The element.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnSizeChanged(Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
            This virtual method is called from the <see cref="E:Windows.UI.Xaml.FrameworkElement.SizeChanged"/> event handler.<para/>
            Disable the render optimization when the size changed
            </summary>
            <param name="e">SizeChangedEventArgs</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnLoaded(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            This virtual method is called from the <see cref="E:Windows.UI.Xaml.FrameworkElement.Loaded"/> event handler.<para/>
            Do not override this method to wire events since a control can be unloaded and loaded 
            multiple times during its lifetime.
            </summary>
            <param name="e">The <see cref="!:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnUnloaded(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            This virtual method is called from the <see cref="E:Windows.UI.Xaml.FrameworkElement.Unloaded"/> event handler.<para/>
            Override this method to clear cached settings (e.g. rendered styles, visibility of rows) when the 
            control was unloaded. Do not unwire events here since a control can be unloaded and loaded 
            multiple times during its lifetime.
            </summary>
            <param name="e">The <see cref="!:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Arranges all child frames. Each frames <see cref="P:Windows.UI.Xaml.Controls.Canvas.LeftProperty"/>, <see cref="P:Windows.UI.Xaml.Controls.Canvas.TopProperty"/>, <see cref="!:Canvas.RightProperty"/> and <see cref="!:Canvas.BottomProperty"/> properties are initialized. <see cref="M:Windows.UI.Xaml.UIElement.Arrange(Windows.Foundation.Rect)"/> is called and a the <see cref="P:Windows.UI.Xaml.UIElement.Clip"/> property is set. After all child frames were arranged the virtual <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/> method is called.
            </summary>
            <param name="arrangeSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>Same size as given in arrangeSize.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeOverride(Windows.Foundation.Size,System.Boolean@)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ArrangeOverride(Windows.Foundation.Size)"/> first before any other code
            is executed in the method. You can change/set the isArrangeDirty flag
            to force <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/> to be called. By default
            content is only rearranged when this was previously indicated to the
            control with a <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual(System.Boolean)"/> call or when the
            
            </summary>
            <param name="arrangeSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <param name="isArrangeDirty">You can change/set the isArrangeDirty flag
            to force <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/> to be called.</param>
            <returns>Same size as given in arrangeSize.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual">
            <summary>
            Invalidates the rendering of the element, and forces a complete new layout pass. <see cref="!:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)"/> is called after the layout cycle is completed.
            The method is overloaded in <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollControl"/> to redirect its call to 
            <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual(System.Boolean)"/> with setArrangeDirty being true. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual(System.Boolean)">
            <summary>
            Invalidates the rendering of the element, and forces a complete new layout pass when 
            setArrangeDirty is true. <see cref="!:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)"/> is called after the layout cycle is completed.
            </summary>
            <param name="setArrangeDirty">if set to <c>true</c> indicates that <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/>
            will be called when layout cycle occurs. Otherwise the OnArrangeContent will be skipped
            and only OnRender will be called.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnInvalidated(System.Boolean)">
            <summary>
            Called when the <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual(System.Boolean)"/> method was called.
            </summary>
            <param name="isArrangeDirty">if set to <c>true</c> indicates that <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/>
            will be called when control gets updated. Otherwise the OnArrangeContent will be skipped
            and only OnRender will be called.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)">
            <summary>
            Called after <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ArrangeOverride(Windows.Foundation.Size)"/> arranged all child frames.
            </summary>
            <param name="arrangeSize">The final area within the parent that this element should use to arrange itself and its children.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnTopLeftFrameExtentChanged">
            <summary>
            Called when <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.TopLeftFrameExtent"/> was changed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnBottomRightFrameExtentChanged">
            <summary>
            Called when <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.BottomRightFrameExtent"/> was changed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.GetChildFrame(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Windows.UI.Xaml.Controls.Panel)">
            <summary>
            Gets the specific child frame that matches the given parameters.
            </summary>
            <param name="isAtTop">if set to <c>true</c> frame is at top.</param>
            <param name="isAtLeftSide">if set to <c>true</c> frame is at left side.</param>
            <param name="isAtBottom">if set to <c>true</c> frame is at bottom.</param>
            <param name="isAtRightSide">if set to <c>true</c> is at right side.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.CreateScrollControlChildFrame">
            <summary>
            Creates the scroll control child frame object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ArrangeFrame(Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame,Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Arranges the frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="arrangeRect">The arrange rect.</param>
            <param name="r">The r.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnVScrollBarValueChanging(System.Object,Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs)">
            <summary>
            Called before Value property in Vertical scrollbar is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnVScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Value property in Vertical scrollbar has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnHScrollBarValueChanging(System.Object,Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs)">
            <summary>
            Called before Value property in horizontal scrollbar is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnHScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Value property in Horizontal scrollbar has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.LineUp">
            <summary>
            Scrolls up within content by one logical unit.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.LineDown">
            <summary>
            Scrolls down within content by one logical unit.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.LineLeft">
            <summary>
            Scrolls left within content by one logical unit.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.LineRight">
            <summary>
            Scrolls right within content by one logical unit.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.MouseWheelUp">
            <summary>
            Scrolls up within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.MouseWheelDown">
            <summary>
            Scrolls down within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.MouseWheelLeft">
            <summary>
            Scrolls left within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.MouseWheelRight">
            <summary>
            Scrolls right within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.PageUp">
            <summary>
            Scrolls up within content by one page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.PageDown">
            <summary>
            Scrolls down within content by one page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.PageLeft">
            <summary>
            Scrolls left within content by one page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.PageRight">
            <summary>
            Scrolls right within content by one page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.SetVerticalOffset(System.Double)">
            <summary>
            Sets the amount of vertical offset.
            </summary>
            <param name="offset">The degree to which content is vertically offset from the containing viewport.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.AutoScroller">
            <summary>
            Gets the auto scroller which provides automatic scrolling of content when the user drags the pressed
            mouse to an edge of the control.
            </summary>
            <value>The auto scroller.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.IsInArrangeOverride">
            <summary>
            Gets a value indicating whether this instance is currently handling <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ArrangeOverride(Windows.Foundation.Size)"/>.
            </summary>
            <value>
            	<c>true</c> if this instance is in arrange override; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.IsInArrangeContent">
            <summary>
            Gets a value indicating whether this instance is currently processing <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/> method.
            </summary>
            <value>
            	<c>true</c> if this instance is processing <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.TopLeftFrameExtent">
            <summary>
            Gets or sets the top and left frame extent specifiying the height of the
            top frame and the width of the left frame.
            </summary>
            <value>The top and left frame extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.BottomRightFrameExtent">
            <summary>
            Gets or sets the bottom and right frame extent specifiying the height of the
            bottom frame and the width of the right frame.
            </summary>
            <value>The bottom and right frame extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.BackgroundFrame">
            <summary>
            Gets the background frame which is placed behind the inner frame. Use this frame
            to draw behind the default content. <see cref="!:Syncfusion.Windows.Controls.Cells.VirtualizingCellsControl"/> uses it to draw
            the background of cells in this frame. The frame spans the whole visible area
            of the control.
            </summary>
            <value>The background frame.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ForegroundFrame">
            <summary>
            Gets the foreground frame which is placed in front of the inner frame. Use this frame
            to draw objects in front of the default content. The GridControl uses it to draw
            cell selection and current cell border in front of cells using a semi-transparent
            color.
            </summary>
            <value>The background frame.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InnerFrame">
            <summary>
            Gets the inner frame. The children of the innerframe are the
            child frames (<see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame"/>) at the top, bottom, left and right of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.VScroll">
            <summary>
            Lets you force showing the scrollbar. Will throw exception if not yet hooked up with ScrollOwner. Therefore don't use it in 
            derived ctor and instead only use it after instance was fully constructed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.HScroll">
            <summary>
            Lets you force showing the scrollbar. Will throw exception if not yet hooked up with ScrollOwner. Therefore don't use in 
            derived ctor and instead only use it after instance was fully constructed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.HScrollBar">
            <summary>
            Gets the state describing for the horizontal scroll bar.
            </summary>
            <value>The horizontal scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.VScrollBar">
            <summary>
            Gets the state describing for the vertical scroll bar.
            </summary>
            <value>The vertical scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ScrollOwner">
            <summary>
            Gets or sets a <see cref="!:System.Windows.Controls.ScrollViewer"/> element that controls scrolling behavior.
            </summary>
            <value></value>
            <returns>A <see cref="!:System.Windows.Controls.ScrollViewer"/> element that controls scrolling behavior. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
            <value></value>
            <returns>true if scrolling is possible; otherwise, false. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
            </summary>
            <value></value>
            <returns>true if scrolling is possible; otherwise, false. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Double"/> that represents, in device independent pixels, the horizontal offset. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.VerticalOffset">
            <summary>
            Gets the vertical offset of the scrolled content.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Double"/> that represents, in device independent pixels, the vertical offset of the scrolled content. Valid values are between zero and the <see cref="!:System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight"/> minus the <see cref="!:System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight"/>. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ExtentWidth">
            <summary>
            Gets the horizontal size of the extent.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Double"/> that represents, in device independent pixels, the horizontal size of the extent. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ExtentHeight">
            <summary>
            Gets the vertical size of the extent.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Double"/> that represents, in device independent pixels, the vertical size of the extent.This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Double"/> that represents, in device independent pixels, the vertical size of the viewport for this content. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.ViewportHeight">
            <summary>
            Gets the vertical size of the viewport for this content.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Double"/> that represents, in device independent pixels, the vertical size of the viewport for this content. This property has no default value.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.HScrollBarShadow">
            <summary>
            Gets a shadowed copy of the <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.HScrollBar"/> property. The object is created first thing
            in the ArrangeOverride method.
            </summary>
            <value>The H scroll bar shadow.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.VScrollBarShadow">
            <summary>
            Gets a shadowed copy of the <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollControl.VScrollBar"/> property. The object is created first thing
            in the ArrangeOverride method.
            </summary>
            <value>The H scroll bar shadow.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.OnScrollLayoutChanged">
            <summary>
            Called when settings of <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> or 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollColumns"/> were changed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.CreateScrollAxis(Windows.UI.Xaml.Controls.Orientation,System.Boolean,Syncfusion.WinRT.Controls.Scroll.IScrollBar,Syncfusion.WinRT.Controls.Scroll.ILineSizeHost)">
            <summary>
            Creates the row or column scroll axis. The default implementation of this method creates either a
            <see cref="T:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis"/> or <see cref="T:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis"/> object. You can override this method
            if you want to add support for another custom tailored scroll axis object.
            </summary>
            <param name="orientation">The orientation (Vertical for row scrolling, Horizontal for column scrolling)</param>
            <param name="pixelScroll">if set to <c>true</c> pixel scroll; otherwise line scrolling.</param>
            <param name="scrollBar">The state of the scroll bar.</param>
            <param name="lineSizes">An object that provides row or column sizes.</param>
            <returns>The scroll axis object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.LineDown">
            <summary>
            Scrolls down one row.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.LineUp">
            <summary>
            Scrolls up one row.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.PageDown">
            <summary>
            Scrolls down one page of rows.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.PageUp">
            <summary>
            Scrolls up one page of rows.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.LineRight">
            <summary>
            Scrolls right one column.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.LineLeft">
            <summary>
            Scrolls left one left column.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.PageLeft">
            <summary>
            Scrolls left one page of columns.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.PageRight">
            <summary>
            Scrolls right one page of columns.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollToTop">
            <summary>
            Scrolls to top.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollToLeftEnd">
            <summary>
            Scrolls to left end.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollToBottom">
            <summary>
            Scrolls to bottom.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollToRightEnd">
            <summary>
            Scrolls to right end.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.OnArrangeOverride(Windows.Foundation.Size,System.Boolean@)">
            <summary>
            Arranges all child frames. Each frames <see cref="P:Windows.UI.Xaml.Controls.Canvas.LeftProperty"/>, <see cref="P:Windows.UI.Xaml.Controls.Canvas.TopProperty"/>, <see cref="!:Canvas.RightProperty"/> and <see cref="!:Canvas.BottomProperty"/> properties are initialized. <see cref="M:Windows.UI.Xaml.UIElement.Arrange(Windows.Foundation.Rect)"/> is called and a the <see cref="P:Windows.UI.Xaml.UIElement.Clip"/> property is set. After all child frames were arranged the virtual <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/> method is called.
            <para/>
            	<see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl"/> overrides this method to update the scroll axis with controls dimensions given by arrangeSize parameter.
            </summary>
            <param name="arrangeSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <param name="isArrangeDirty">if set to <c>true</c> the control will call OnArrangeContent in the next arrange layout pass (i.e. when ArrangeOverride is called).</param>
            <returns>Same size as given in arrangeSize.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.UpdateAxis(Windows.Foundation.Size)">
            <summary>
            Updates the row and column axis with this control size and initializes Clip position.
            </summary>
            <param name="arrangeSize">Size of the arrange.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.PointToCellRowColumnIndexOutsideCells(Windows.Foundation.Point,System.Boolean)">
            <summary>
            Determines the cell under a given point.
            </summary>
            <param name="p">The point in client coordinates.</param>
            <param name="allowOutsideLines">Set this true if point can be below corner of last line.</param>
            <returns>The cells row and column index under the point.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.PointToCellRowColumnIndex(Windows.Foundation.Point)">
            <summary>
            Determines the cell under a given point.
            </summary>
            <param name="p">The point in client coordinates.</param>
            <returns>The cells row and column index under the point.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.GetClipRect(Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion,Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion)">
            <summary>
            Gets the clipping bounds for the specified row and column region.
            </summary>
            <param name="rowRegion">The row region.</param>
            <param name="columnRegion">The column region.</param>
            <returns>A <see cref="T:Windows.Foundation.Rect"/> with clipping bounds.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.IsRowVisible(System.Int32)">
            <summary>
            Determines whether the row with the specified row index is visible.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <returns>
            	<c>true</c> if row is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.IsColumnVisible(System.Int32)">
            <summary>
            Determines whether the column with the specified column index is visible.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <returns>
            	<c>true</c> if column is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.IsCellVisible(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determines whether the specified cell is visible.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <returns>
            	<c>true</c> if the specified cell is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.OnInvalidated(System.Boolean)">
            <summary>
            Called when the <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual(System.Boolean)"/> method was called.
            </summary>
            <param name="isArrangeDirty">if set to <c>true</c> indicates that <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/>
            will be called when control gets updated. Otherwise the OnArrangeContent will be skipped
            and only OnRender will be called.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows">
            <summary>
            Gets the scroll axis with logic to map from row index to scroll position and back.
            </summary>
            <value>The scroll axis for rows.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollColumns">
            <summary>
            Gets the scroll axis with logic to map from column index to scroll position and back.
            </summary>
            <value>The scroll axis for columns.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.HorizontalPixelScroll">
            <summary>
            Gets or sets a value indicating whether horizontal pixel scroll is enabled.
            </summary>
            <value>
            	<c>true</c> if horizontal pixel scrolling is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.VerticalPixelScroll">
            <summary>
            Gets or sets a value indicating whether vertical pixel scroll is enabled.
            </summary>
            <value>
            	<c>true</c> if vertical pixel scrolling is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.AllowPixelScrollPadding">
            <summary>
            Gets or sets a value indicating whether [allow pixel scroll padding]. Set this to false if you don't want the pixel scroll to take a padding value of 1.
            </summary>
            <value>
            	<c>true</c> if [allow pixel scroll padding]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.TopRowIndex">
            <summary>
            Gets or sets the index of the top row.
            </summary>
            <value>The index of the top row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.LeftColumnIndex">
            <summary>
            Gets or sets the index of the left column.
            </summary>
            <value>The index of the left column.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.RowHeightsProvider">
            <summary>
            Gets or sets the row heights provider.
            </summary>
            <value>The row heights provider.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ColumnWidthsProvider">
            <summary>
            Gets or sets the column widths provider.
            </summary>
            <value>The column widths provider.</value>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellsControlProperty">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/> of an UIElement inside a cell. When the editor
            inside a cell has children and you query this for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellsControl(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellsControlProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.SetCellsControl(Windows.UI.Xaml.DependencyObject,Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl)">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellsControlProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellUIElementProperty">
            <summary>
            Returns the top-most parent element of the cell renderer When the editor
            inside a cell has children and you query this attached property for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellUIElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellUIElementProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.SetCellUIElement(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.UIElement)">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellUIElementProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellRowColumnIndexProperty">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/> of an UIElement inside a cell. When the editor
            inside a cell has children and you query this attached property for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellRowColumnIndex(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellRowColumnIndexProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.SetCellRowColumnIndex(Windows.UI.Xaml.DependencyObject,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellRowColumnIndexProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RenderCellInfoProperty">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo"/> of an UIElement inside a cell. When the editor
            inside a cell has children and you query this attached property for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetRenderCellInfo(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RenderCellInfoProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.SetRenderCellInfo(Windows.UI.Xaml.DependencyObject,Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RenderCellInfoProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellRendererProperty">
            <summary>
            Returns the cell renderer of an UIElement inside a cell. When the editor
            inside a cell has children and you query this attached property for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellRenderer(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellRendererProperty"/> dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.SetCellRenderer(Windows.UI.Xaml.DependencyObject,Syncfusion.WinRT.Controls.Cells.ICellRenderer)">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellRendererProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.HasFocusWithinProperty">
            <summary>
            The value of this property represents the distance between the left side of an element 
            and the left side of its parent Canvas. When the editor
            inside a cell has children and you query this attached property for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetHasFocusWithin(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.HasFocusWithinProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.SetHasFocusWithin(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.HasFocusWithinProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CreateScrollControlChildFrame">
            <summary>
            Creates the scroll control child frame object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Returns the maximum height and width of the cells control. If pixel scrolling
            is enabled for a axis the method queries the <see cref="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.TotalExtent"/>
            value of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis"/>.
            </summary>
            <param name="constraint">The maximum size limit for the control.</param>
            <returns>The maximum size of the control.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnScrollLayoutChanged">
            <summary>
            Called when settings of <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> or 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollColumns"/> were changed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnInvalidated(System.Boolean)">
            <summary>
            Called when the <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual(System.Boolean)"/> method was called.
            </summary>
            <param name="isArrangeDirty">if set to <c>true</c> indicates that <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.OnArrangeContent(Windows.Foundation.Size)"/>
            will be called when control gets updated. Otherwise the OnArrangeContent will be skipped
            and only OnRender will be called.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeContent(Windows.Foundation.Size)">
            <summary>
            Arranges the cells row by row with the <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCellUIElements(Windows.Foundation.Size)"/> method. For each cell
            the virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> method is called. OnArrangeCell gets
            the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/> for a cell and calls its <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/>
            method.<para/>
            ArrangeCellUIElements creates new UIElements for cells scrolled into view or unload UIElements for 
            cells scrolled out of view. <para/>
            OnArrangeContent also arranges covered cells, spanned backgrounds, 
            cell borders and combines cells with same cell background 
            (<see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCombinedCellBackgrounds(Windows.Foundation.Size)"/>) to reduce number 
            of drawing operations.
            </summary>
            <param name="arrangeSize"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.PrepareCombinedCellBackgroundIdsTable">
            <summary>
            Allocates an grid of integer values and ensures enough entries
            are there for each visible row and column.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCombinedCellBackgrounds(Windows.Foundation.Size)">
            <summary>
            Combines cells with same cell backround to reduce number 
            of drawing operations. The cell background will later be rendered
            when <see cref="!:OnRender"/> is called.
            </summary>
            <param name="arrangeSize">Size of the arrange.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellBackground(Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Gets the cell background for a cell from the <see cref="T:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo"/> cell style.
            </summary>
            <param name="ci">The cell style.</param>
            <param name="combineBackgrounds">if set to <c>true</c> indicates that the method was
            called during OnArrangeContent when control is combining background of neighbouring cells
            to be drawn in single batches.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCoveredCell(System.Int32,System.Int32)">
            <summary>
            Gets a covered cell from the <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CoveredCellsProvider"/> that includes
            the specified cells row and column index.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCoveredCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Gets a covered cell from the <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CoveredCellsProvider"/> that includes
            the specified cells row and column index.
            </summary>
            <param name="cellRowColumnIndex">The cells row and column index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ReArrangeCoveredCells(Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl)">
            <summary>
            Force and Rearrange the CoveredCells in the View
            </summary>
            <remarks>
            While adding coveredcells in QueryCellInfo , need to call this method to refesh the Covered Cells Layout
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCoveredCells(Windows.Foundation.Size)">
            <summary>
            Arranges the covered cells.
            </summary>
            <param name="arrangeSize">Size of the arrange.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellSpanBackgrounds(System.Int32,System.Int32)">
            <summary>
            Gets the cell span backgrounds from the <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellSpanBackgroundsProvider"/> that include
            the specified cells row and column index.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellSpanBackgrounds(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Gets the cell span backgrounds from the <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellSpanBackgroundsProvider"/> that includes
            the specified cells row and column index.
            </summary>
            <param name="cellRowColumnIndex">The pos.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCellSpanBackgrounds(Windows.Foundation.Size)">
            <summary>
            Arranges the cell span backgrounds.
            </summary>
            <param name="arrangeSize">Size of the arrange.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellSpanToRect(Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion,Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion,Syncfusion.WinRT.Controls.Cells.CellSpanInfo)">
            <summary>
            Returns the rectangle for a cell span background clipped by the boundaries of the given
            row and column region.
            </summary>
            <param name="rowRegion">The row region.</param>
            <param name="columnRegion">The column region.</param>
            <param name="range">The cell span background range.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.UnloadArrangedCells">
            <summary>
            Clears the visuals for all cells and unloads or recycles the UIElement onjects. 
            Override this method to clear out additional cached information for the cells such
            as render style information. If UIElements belong to a virtualizing cell renderer 
            with AllowRecycle option enabled they will be moved to recycling bin. Otherwise
            they will be unloaded.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.InvalidateCells">
            <summary>
            Calls <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.UnloadArrangedCells"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.InvalidateCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Marks the visuals for a single cell to be reinitialized with 
            a call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RefreshCellUIElementsContent(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)"/> next time
            OnRender is called. Override this
            method to clear out additional cached information for the cell such
            as render style information.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.InvalidateCell(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Marks the visuals for a range of cells to be reinitialized with
            a call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RefreshCellUIElementsContent(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)"/> next time
            OnRender is called. Override this
            method to clear out additional cached information for the cell such
            as render style information.
            </summary>
            <param name="span">The range of cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.InvalidateCellBackground(System.Int32,System.Int32)">
            <summary>
            Invalidates the cell background. The cells control combines the background
            of neighbouring cells in the <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeContent(Windows.Foundation.Size)"/> method and reuses 
            this information whenever the cells control is control is rendered without 
            rearranging contents (when you specify false as paramater to the 
            <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControl.InvalidateVisual(System.Boolean)"/>
            method). Call this method to ensure that background for this individual cell
            is requeried next time the cells control is rendered.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellUIElements(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Gets the cell visuals for a cell.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellUIElements(System.Int32,System.Int32)">
            <summary>
            Gets the cell visuals for a cell.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCellUIElements(Windows.Foundation.Size)">
            <summary>
            Arranges the cells row by row. For each cell
            the virtual <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> method is called. OnArrangeCell gets
            the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/> for a cell and calls its <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/>
            method.<para/>
            The method also implements the virtualization of UIElement children of cell renderers.
            It create new UIElement objects for cells scrolled into view or unload UIElements for 
            cells scrolled out of view. If a UIElement has focus whenscrolled out of view it will 
            be kept alive and not unloaded.
            </summary>
            <param name="arrangeSize"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)">
            <summary>
            OnArrangeCell gets
            the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/> for a cell and calls its <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/>
            method. The method
            also adjust the <see cref="P:Syncfusion.WinRT.Controls.Cells.CellArgs.CellRect"/> and subtracts the border margins
            from the rectangle.
            </summary>
            <param name="aca">The cell layout information.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.PrepareCellUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame)">
            <summary>
            Prepares the cells UIElement children. The method gets the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/>
            for a cell and calls its <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.PrepareUIElements(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs,System.Collections.Generic.List{Windows.UI.Xaml.UIElement},Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame)"/> method.
            </summary>
            <param name="aca">The cell layout information.</param>
            <param name="uiElements">The UI elements.</param>
            <param name="canvas">The child frame in the scroll control.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangeCellBorders(Windows.Foundation.Size)">
            <summary>
            Calculates Cell Borders combining borders of neighbouring cells
            with same value - they will be rendered later in OnRender.
            </summary>
            <param name="arrangeSize"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellBorder(Syncfusion.WinRT.Controls.Cells.IRenderCellInfo,Syncfusion.WinRT.Controls.Cells.CellBorderSide)">
            <summary>
            Gets the cell border from the given cell style.
            </summary>
            <param name="ci">The cell style.</param>
            <param name="borderSide">The border side.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetVisibleRowAndColumn(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo@,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo@)">
            <summary>
            Gets the visible row and visible column for a given cell which can also be a covered cell.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <param name="visibleRow">The visible row.</param>
            <param name="visibleColumn">The visible column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.DelayedCreateCellUIElements(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determine if cell at given cells row and column index is associated with UIElement. If not,
            check if UIElement can be created.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.RefreshCellUIElementsContent(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determine if cell at given cells row and column index is associated with UIElement. If yes,
            reintialize the cells UIElement with a call to <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/>. OnArrangeCell gets
            the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICellRenderer"/> for a cell and calls its <see cref="M:Syncfusion.WinRT.Controls.Cells.ICellRenderer.Arrange(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/>
            method. This usually is called as a response to an earlier <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.InvalidateCell(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)"/>
            call.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.PointToCellRowColumnIndex(Windows.Foundation.Point,System.Boolean)">
            <summary>
            Determines the cell under the mouse location.
            </summary>
            <param name="p">The point in client coordinates.</param>
            <param name="adjustForCoveredCells">if set to <c>true</c> adjust cell index if inside a covered cells to return the top and left index of the covered cell.</param>
            <returns>
            The cells row and column index under the mouse location.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.AdjustCoveredCellRowColumnIndex(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Adjusts the index of the cell index if inside a covered cell
            to return the top and left index of the covered cell. If not
            inside a covered cell returns the original cell index.
            </summary>
            <param name="cellRowColumnIndex">Index of the cell row column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetRenderCellInfo(System.Int32,System.Int32)">
            <summary>
            Gets the render cell style for a cell. VirtualizingCellsControl solely relies
            on the <see cref="T:Syncfusion.WinRT.Controls.Cells.IRenderCellInfo"/> for drawing and renderer information
            of a cell. Concrete implementations of this interface such as GridRenderStyleInfo
            or TreeRenderStyleInfo can add support for additional domain specific
            properties.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.GetCellRenderer(Syncfusion.WinRT.Controls.Cells.IRenderCellInfo)">
            <summary>
            Gets the cell renderer from a render cell style.
            </summary>
            <param name="cellInfo">The render cell style.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ShowGridLines">
            <summary>
            Gets or sets a value indicating whether [show grid lines].
            </summary>
            <value><c>true</c> if [show grid lines]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CoveredCellsProvider">
            <summary>
            Gets or sets the covered cells provider. A covered cell is a cell
            that spans multiple neighbouring cells.
            </summary>
            <value>The covered cells provider.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellSpanBackgroundsProvider">
            <summary>
            Gets or sets the cell span backgrounds provider. A spanned background
            allows one cell to draw its background across multiple neighbouring
            cells. The neighbouring cells are still individual cells with their
            own editor but all share the cell backgound. You can example attach
            a image to one cell and draw it across multiple cells.
            </summary>
            <value>The cell span backgrounds provider.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.ArrangedCellUIElements">
            <summary>
            Provides routines for managing cells visuals (aka UIElement children)
            of rendered cells that have been associated with one or more UIElement
            visuals.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.IsInArrageCell">
            <summary>
            Gets a value indicating whether <see cref="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.OnArrangeCell(Syncfusion.WinRT.Controls.Cells.ArrangeCellArgs)"/> is called.
            </summary>
            <value>
            	<c>true</c> if this instance is in arrage cell; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo">
            <summary>
            This class maintains the state of visible cell span and lets you
            also access the underlying <see cref="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.CellSpan"/> for which this
            visible cell span was created. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo"/> class.
            </summary>
            <param name="top">The top visible row index.</param>
            <param name="left">The left visible column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.#ctor(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellSpanInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo"/> class.
            </summary>
            <param name="top">The top visible row index.</param>
            <param name="left">The left visible column index.</param>
            <param name="cellSpan">The cell span.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.CellSpan">
            <summary>
            Gets the underling cell span.
            </summary>
            <value>The cell span.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.Top">
            <summary>
            Gets the visible top row index.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.Left">
            <summary>
            Gets the visible left column index.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.Bottom">
            <summary>
            Gets the visible bottom row index.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.Right">
            <summary>
            Gets the visible right column index.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.ExactBounds">
            <summary>
            Gets the exact bounds.
            </summary>
            <value>The exact bounds.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanInfo.ClippedBounds">
            <summary>
            Gets the clipped bounds.
            </summary>
            <value>The clipped bounds.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.VisibleCellSpanLayout`1.PrepareVisibleCellSpansTable">
            <summary>
            Allocates a grid of integer values and ensures enough entries
            are there for each visible row and column.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellUIElementBin`1">
            <summary>
            This class implements a cache of UIElement of the given type parameter T. It is used
            by the <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellRendererBase`1"/> renderer to recycle UIElement 
            elements for cells that were scrolled out of view and delay unloading of UIElements.
            This reduces the number of times the UIElement needs to be created or unloaded and
            instead only the contents of the UIElement will be reinitialized with cell contents. <para/>
            A queue is maintained for each child frame in a <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollControl"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellUIElementBin`1.Dequeue(Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame)">
            <summary>
            Dequeues an UIElement from the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellUIElementBin`1.Enqueue(`0)">
            <summary>
            Enqueues the specified UI element.
            </summary>
            <param name="uiElement">The UI element.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VirtualizingCellUIElementBin`1.Unload">
            <summary>
            Unloads all UIElement elements maintained by this cache.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellUIElementBin`1.Item(Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Queue`1"/> for the specified canvas.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo">
            <summary>
            This class maintains the state of visible cell span background and lets you
            also access the underlying <see cref="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo.CellSpanBackground"/> for which this
            visible cell span background was created and the row and column section
            this span belongs to.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo.#ctor(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo"/> class.
            </summary>
            <param name="top">The visible top row index.</param>
            <param name="left">The visible left column index.</param>
            <param name="cellSpanBackground">The cell span background.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo.CellSpanBackground">
            <summary>
            Gets the cell span background.
            </summary>
            <value>The cell span background.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo.RowSection">
            <summary>
            Gets or sets the row section.
            </summary>
            <value>The row section.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCellSpanBackgroundInfo.ColumnSection">
            <summary>
            Gets or sets the column section.
            </summary>
            <value>The column section.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo">
            <summary>
            This class maintains the state of a visible covered cell and lets you
            also access the underlying <see cref="P:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo.CoveredCell"/> for which this
            visible covered cell was created.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo.#ctor(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CoveredCellInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo"/> class.
            </summary>
            <param name="top">The visible top row index.</param>
            <param name="left">The visible left column index.</param>
            <param name="coveredCell">The covered cell.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.VisibleCoveredCellInfo.CoveredCell">
            <summary>
            Gets the covered cell.
            </summary>
            <value>The covered cell.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1">
            <summary>
            A collection with elements derived from type <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase"/>. Internally
            this collection maintains both a List of CellSpanInfoBase and a so called pool. The
            pool allows immediate lookup of cell spans given a cells row and column index. The
            list allows looping through cell spans in the order they were added. <para/>
            CellOverlappSpanInfoCollection is similar to <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1"/> but
            with the difference that it allows overlaps between cell spans. If a cell has
            an overlap and <see cref="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.GetCellSpans(System.Int32,System.Int32)"/> is called for this cell all cell spans
            will be returned in a list that contain the specified cell.
            <para/>
            CellSpanInfoCollection is a base class for the
            grids GridCellSpanBackgroundInfoCollection.
            </summary>
            <typeparam name="T">The element type of this collection.</typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.GetCellSpans(System.Int32,System.Int32)">
            <summary>
            Gets the list of cell spans that include
            the specified cells row and column index.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.OnGetCellSpans(System.Int32,System.Int32,System.Collections.Generic.List{`0}@)">
            <summary>
            This virtual method is called form <see cref="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.GetCellSpans(System.Int32,System.Int32)"/>.
            Override this method to return a custom list of cell spans that include
            the specified cells row and column index. In such case you should also return true.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="result">The result list of cell spans.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.ResetCellSpans(System.Int32,System.Int32)">
            <summary>
            Resets the cell spans that include this cell and removes it from the collection.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.ResetCellSpan(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Resets the cell span and removes it from the collection.
            </summary>
            <param name="cci">The cci.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.SearchCellSpans(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Searches the cell span.
            </summary>
            <param name="span">The cell span.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.CheckExistCellSpan(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Checks if the cell span exists.
            </summary>
            <param name="span">The cell span.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.InsertRows(System.Int32,System.Int32)">
            <summary>
            Updates internal stored cell spans when rows were inserted.
            </summary>
            <param name="insertAtRowIndex">The row index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.InsertRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection{`0})">
            <summary>
            Updates internal stored cell spans when rows were inserted.
            </summary>
            <param name="insertAtRowIndex">The row index.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">Temporary state when moving rows.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.RemoveRows(System.Int32,System.Int32)">
            <summary>
            Updates internal stored cell spans when rows were removed.
            </summary>
            <param name="removeAtRowIndex">The row index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.RemoveRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection{`0})">
            <summary>
            Updates internal stored cell spans when rows were removed.
            </summary>
            <param name="removeAtRowIndex">The row index.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">Temporary state when moving rows.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.InsertColumns(System.Int32,System.Int32)">
            <summary>
            Updates internal stored cell spans when columns were inserted.
            </summary>
            <param name="insertAtColumnIndex">The column index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.InsertColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection{`0})">
            <summary>
            Updates internal stored cell spans when columns were inserted.
            </summary>
            <param name="insertAtColumnIndex">The column index.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">Temporary state when moving rows.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.RemoveColumns(System.Int32,System.Int32)">
            <summary>
            Updates internal stored cell spans when columns were removed.
            </summary>
            <param name="removeAtColumnIndex">The column index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.RemoveColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection{`0})">
            <summary>
            Updates internal stored cell spans when columns were removed.
            </summary>
            <param name="removeAtColumnIndex">The column index.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">Temporary state when moving rows.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The item is null.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the collection item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection. 
            </summary>
            <param name="item">The object to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">The item is null.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
            true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from collection. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original collection.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.IsEmpty">
            <summary>
            Gets a value indicating whether this collection is empty.
            </summary>
            <value><c>true</c> if this collection is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the cell span at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value></value>
            <returns>The number of elements contained in the collection.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellOverlappSpanInfoCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>this collection is never read-only.</returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo">
            <summary>
            Holds the range and options for a cell span background. A cell span background
            tells the cells control to draw the background of one cell across multiple
            neighbouring cells. For example you can have a picture as background and
            this picture will 
            be drawn across the neighbouring cells. These cells are still independent
            single cells, they only share the background.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfo">
            <summary>
            This a base class for spanned ranges such as covered cells and
            cell spanned backgrounds. It contains Top, Left, Bottom and
            Right row and column index for the spanned range.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase">
            <summary>
            This a base class for spanned ranges such as covered cells and
            cell spanned backgrounds. It contains Top, Left, Bottom and
            Right row and column index for the spanned range.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase"/> class.
            </summary>
            <param name="top">The top row index.</param>
            <param name="left">The left column index.</param>
            <param name="bottom">The bottom row index.</param>
            <param name="right">The right column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Contains(Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Determines whether the specified cell is inside the span.
            </summary>
            <param name="cellRowColumnIndex">The cell</param>
            <returns>
            true if cell is inside the span; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.ContainsRow(System.Int32)">
            <summary>
            Determines whether the specified row is inside the span.
            </summary>
            <param name="rowIndex">The row index</param>
            <returns>
            true if row is inside the span; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.ContainsColumn(System.Int32)">
            <summary>
            Determines whether the specified column is inside the span.
            </summary>
            <param name="columnIndex">The column index</param>
            <returns>
            true if column is inside the span; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified cell is inside the span.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns>
            true if cell is inside the span; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.CompareTo(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the span with the specified row and column count.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Top">
            <summary>
            Gets the top row index.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Left">
            <summary>
            Gets the left column index.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Bottom">
            <summary>
            Gets the bottom row index.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Right">
            <summary>
            Gets the right column index.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Width">
            <summary>
            Gets the number of columns.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase.Height">
            <summary>
            Gets the number of rows.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfo"/> class.
            </summary>
            <param name="top">The top row index.</param>
            <param name="left">The left column index.</param>
            <param name="bottom">The bottom row index.</param>
            <param name="right">The right column index.</param>
            <param name="clipRows">if set to <c>true</c> allow estimates for out of view rows.</param>
            <param name="clipColumns">if set to <c>true</c> allow estimates for out of view columns.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfo"/> class.
            </summary>
            <param name="top">The top row index.</param>
            <param name="left">The left column index.</param>
            <param name="bottom">The bottom row index.</param>
            <param name="right">The right column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.ClipRows">
            <summary>
            Gets or sets a value indicating whether to allow estimates for out of view rows when calculating
            the height in points for the spanned range.
            </summary>
            <value><c>true</c> if estimates are allowed for out of view rows; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfo.ClipColumns">
            <summary>
            Gets or sets a value indicating whether to allow estimates for out of view columns when calculating
            the height in points for the spanned range.
            </summary>
            <value><c>true</c> if estimates are allowed for out of view columns; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,Windows.UI.Xaml.Media.Brush,Syncfusion.WinRT.Controls.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo"/> class.
            </summary>
            <param name="top">The top row index.</param>
            <param name="left">The left column index.</param>
            <param name="bottom">The bottom row index.</param>
            <param name="right">The right column index.</param>
            <param name="clipRows">if set to <c>true</c> allow estimates for out of view rows.</param>
            <param name="clipColumns">if set to <c>true</c> allow estimates for out of view columns.</param>
            <param name="background">The background.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo"/> class.
            </summary>
            <param name="top">The top row index.</param>
            <param name="left">The left column index.</param>
            <param name="bottom">The bottom row index.</param>
            <param name="right">The right column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.Border">
            <summary>
            Gets or sets the border.
            </summary>
            <value>The border.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanBackgroundInfo.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>The background.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1">
            <summary>
            A collection with elements derived from type <see cref="T:Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase"/>. Internally
            this collection maintains both a List of CellSpanInfoBase and a so called pool. The
            pool allows immediate lookup of cell spans given a cells row and column index. The
            list allows looping through cell spans in the order they were added. CellSpanInfoCollection
            assumes that there is no overlap between cell spans. For any given cell there only 
            at most one cell span must exist. CellSpanInfoCollection is a base class for the
            grids GridCoveredCellInfoCollection.
            </summary>
            <typeparam name="T">The element type of this collection.</typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.GetCellSpan(System.Int32,System.Int32)">
            <summary>
            Gets the cell span.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns>The cell span if found; othwerwise null if there is no cell span for the specified row and column.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.OnGetCellSpan(System.Int32,System.Int32,`0@)">
            <summary>
            This virtual method is called form <see cref="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.GetCellSpan(System.Int32,System.Int32)"/>.
            Override this method to return a custom cell span that include
            the specified cells row and column index. In such case you should also return true.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="result">The result cell span.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.ResetCache">
            <summary>
            Resets the cached information for last found cell span.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.ResetCellSpan(System.Int32,System.Int32)">
            <summary>
            Resets the cell span and removes it from the collection.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.ResetCellSpan(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Resets the cell span and removes it from the collection.
            </summary>
            <param name="cci">The cci.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.SearchCellSpan(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Searches the cell span.
            </summary>
            <param name="span">The cell span.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.CheckExistCellSpan(Syncfusion.WinRT.Controls.Cells.CellSpanInfoBase)">
            <summary>
            Checks if the cell span exists.
            </summary>
            <param name="span">The cell span.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.InsertRows(System.Int32,System.Int32)">
            <summary>
            Inserts the rows.
            </summary>
            <param name="insertAtRowIndex">Index of the insert at row.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.InsertRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection{`0})">
            <summary>
            Inserts the rows.
            </summary>
            <param name="insertAtRowIndex">Index of the insert at row.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">State of the move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.RemoveRows(System.Int32,System.Int32)">
            <summary>
            Removes the rows.
            </summary>
            <param name="removeAtRowIndex">Index of the remove at row.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.RemoveRows(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection{`0})">
            <summary>
            Removes the rows.
            </summary>
            <param name="removeAtRowIndex">Index of the remove at row.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">State of the move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.InsertColumns(System.Int32,System.Int32)">
            <summary>
            Inserts the columns.
            </summary>
            <param name="insertAtColumnIndex">Index of the insert at column.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.InsertColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection{`0})">
            <summary>
            Inserts the columns.
            </summary>
            <param name="insertAtColumnIndex">Index of the insert at column.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">State of the move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.RemoveColumns(System.Int32,System.Int32)">
            <summary>
            Removes the columns.
            </summary>
            <param name="removeAtColumnIndex">Index of the remove at column.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.RemoveColumns(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection{`0})">
            <summary>
            Removes the columns.
            </summary>
            <param name="removeAtColumnIndex">Index of the remove at column.</param>
            <param name="count">The count.</param>
            <param name="moveCellsState">State of the move cells.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the collection at the specified index. An exception is thrown if
            the cell range overlaps with another cell span in the collection.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The item is null.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the collection item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the collection.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection. An exception is thrown if
            the cell range overlaps with another cell span in the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">The item is null.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
            true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from collection. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original collection.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.IsEmpty">
            <summary>
            Gets a value indicating whether this collection is empty.
            </summary>
            <value><c>true</c> if this collection is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the cell span at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value></value>
            <returns>The number of elements contained in the collection.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CellSpanInfoCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>this collection is never read-only.</returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo">
            <summary>
            Holds the range and options for a covered cell. A covered cell is a cell that
            spans over neighbouring cells. All cells in this range are treated as one single cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo"/> class.
            </summary>
            <param name="top">The top row index.</param>
            <param name="left">The left column index.</param>
            <param name="bottom">The bottom row index.</param>
            <param name="right">The right column index.</param>
            <param name="clipRows">if set to <c>true</c> allow estimates for out of view rows.</param>
            <param name="clipColumns">if set to <c>true</c> allow estimates for out of view columns.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo"/> class.
            </summary>
            <param name="top">The top row index.</param>
            <param name="left">The left column index.</param>
            <param name="bottom">The bottom row index.</param>
            <param name="right">The right column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.SpanWholeRow">
            <summary>
            Gets or sets a value indicating whether the covered cell spans the whole row.
            </summary>
            <value><c>true</c> if the covered cell spans the whole row; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.CoveredCellInfo.SpanWholeColumn">
            <summary>
            Gets or sets a value indicating whether the covered cell spans the whole column.
            </summary>
            <value><c>true</c> if the covered cell spans the whole column; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.ICellSpanBackgroundsProvider">
            <summary>
            A provider for cell span backgrounds. GridCellSpanBackgroundInfoCollection
            is a default implementation of this interface. The <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/>
            retrieves cell span backgrounds through this interface from it <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CellSpanBackgroundsProvider"/>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICellSpanBackgroundsProvider.GetCellSpanBackgrounds(System.Int32,System.Int32)">
            <summary>
            Gets the cell span backgrounds that include
            the specified cells row and column index.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ICellSpanBackgroundsProvider.IsEmpty">
            <summary>
            Gets a value indicating if the collection is empty.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.ICoveredCellsProvider">
            <summary>
            A provider for covered cells. GridCoveredCellInfoCollection
            is a default implementation of this interface. The <see cref="T:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl"/>
            retrieves covered cells through this interface from it <see cref="P:Syncfusion.WinRT.Controls.Cells.VirtualizingCellsControl.CoveredCellsProvider"/>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.ICoveredCellsProvider.GetCoveredCell(System.Int32,System.Int32)">
            <summary>
            Gets a covered cell from the <see cref="T:Syncfusion.WinRT.Controls.Cells.ICoveredCellsProvider"/> that includes
            the specified cells row and column index.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.ICoveredCellsProvider.IsEmpty">
            <summary>
            Gets a value indicating if the collection is empty.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1">
            <summary>
            A leaf in the tree with value and optional sort key.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableNode">
            <summary>
            A branch or leaf in the tree.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableNode">
            <summary>
            A branch or leaf in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.GetPosition">
            <summary>
            returns the position in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.IsEmpty">
            <summary>
            Indicates whether leaf is empty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.GetLevel">
            <summary>
            Returns the tree level of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.GetMinimum">
            <summary>
            Returns the minimum value (of the leftmost leaf) of the branch in a sorted tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Walk up parent branches and reset counters.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableNode.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walk up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableNode.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.GetPosition">
            <summary>
            Returns the position in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.GetMinimum">
            <summary>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.IsEmpty">
            <summary>
            Indicates whether leaf is empty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.GetLevel">
            <summary>
            Returns the tree level of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.GetNodeInfo">
            <summary>
            Returns the Debug / text information about the node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.ToString">
            <summary>
            Returns the Debug / text information about the node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset counters.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableNode.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableNode.Tree">
            <summary>
            Gets / sets the tree this node belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableNode.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableEntry">
            <summary>
            A leaf with value and optional sort key.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableEntry.GetSortKey">
            <summary>
            Returns the sort key of this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableEntry.CreateBranch(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableEntry.Value">
            <summary>
            Gets / sets the value attached to this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="!:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.GetSortKey">
            <summary>
            Returns the sort key of this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.GetMinimum">
            <summary>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.CreateBranch(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.GetNodeInfo">
            <summary>
            Returns the Debug / text information about the node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry`1.Value">
            <summary>
            Gets or sets the value attached to this leaf.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1">
            <summary>
            A tree table.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTable">
            <summary>
            Tree table interface definition.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTable.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTable.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTable.GetNextEntry(Syncfusion.WinRT.Collections.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTable.GetPreviousEntry(Syncfusion.WinRT.Collections.ITreeTableEntry)">
            <summary>
            Optimized access to a previous entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTable.Sorted">
            <summary>
            Indicates whether this is a sorted tree.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTable.Comparer">
            <summary>
            A comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTable.Root">
            <summary>
            Returns the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTable.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1"/>.
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.BeginInit">
            <summary>
            Optimizes insertion of many items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.EndInit">
            <summary>
            Ends optimization of insertion of items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.GetNextEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.GetPreviousEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Insert(System.Int32,Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Remove(Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.IndexOf(Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="value">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Add(Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The item to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Contains(Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0})">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.CopyTo(Syncfusion.WinRT.Collections.Generic.GenericTreeTableEntry{`0}[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.InternalTree">
            <summary>
            The non-generic tree table with actual implementation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Sorted">
            <summary>
            Indicates whether thisTree is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Comparer">
            <summary>
            Gets or sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value></value>
            <returns>true if the collection has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTable`1.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableEnumerator">
            <summary>
            Strongly typed enumerator for <see cref="T:Syncfusion.WinRT.Collections.TreeTable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEnumerator.#ctor(Syncfusion.WinRT.Collections.ITreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableEnumerator"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEnumerator.MoveNext">
            <summary>
            Indicates whether to move to the next node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEnumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollection`1.GetNext(`0)">
            <summary>
            Returns the next item in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollection`1.GetPrevious(`0)">
            <summary>
            Returns the previous item in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollection`1.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollectionEnumerator`1">
            <summary>
            Enumerator class for items of a <see cref="T:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollection`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollectionEnumerator`1.#ctor(Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollection{`0})">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollectionEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first item in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollectionEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next item of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next item; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeCollectionEnumerator`1.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry`2">
            <summary>
            A tree leaf with value and summary information.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry">
            <summary>
            A tree leaf with value, sort key and counter information.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry">
            <summary>
            A tree leaf with value and summary information.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableEntry">
            <summary>
            A leaf in the tree with value and optional sort key.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntry.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="!:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntry.GetSortKey">
            <summary>
            Returns the sort key of this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntry.GetMinimum">
            <summary>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntry.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntry.CreateBranch(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntry.GetNodeInfo">
            <summary>
            Returns the Debug / text information about the node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntry.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntry.Value">
            <summary>
            Gets / sets the value attached to this leaf.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableSummaryNode">
            <summary>
            Interface definition for a node that has one or more summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSummaryNode.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSummaryNode.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyEntrySummary">if set to <c>true</c> notify entry summary.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableSummaryNode.HasSummaries">
            <summary>
            Indicates whether node has summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.CreateBranch(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.OnGetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)"/> when called the first time after summaries were invalidated.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.GetSummaryArraySource">
            <summary>
            Returns the value as <see cref="T:Syncfusion.WinRT.Collections.ITreeTableSummaryArraySource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifySummaryArraySource">if set to <c>true</c> notify summary array source.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.TreeTableWithSummary">
            <summary>
            Returns the tree this leaf belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry.HasSummaries">
            <summary>
            Indicates whether the node has summaries.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableCounterNode">
            <summary>
            Interface definition for a node that has counters and summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounterNode.GetCounterTotal">
            <summary>
            The total of this node's counter and child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounterNode.GetCounterPosition">
            <summary>
            The cumulative position of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounterNode.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.CreateBranch(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.GetCounterPosition">
            <summary>
            Returns the cumulative position of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.GetCounterSource">
            <summary>
            Returns the value as <see cref="T:Syncfusion.WinRT.Collections.ITreeTableCounterSource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.IsCounterDirty">
            <summary>
            Indicates whether the counter was set dirty.
            </summary>
            <returns>True if dirty; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.GetCounterTotal">
            <summary>
            Returns the total of this node's counter and child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.InvalidateCounter">
            <summary>
            Reset cached counter.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Invalidates the counter bottom up.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.TreeTableWithCounter">
            <summary>
            Returns the tree this leaf belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry`2.GetCounterPosition">
            <summary>
            Returns the cumulative position of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry`2.GetCounterTotal">
            <summary>
            Returns the total of this node's counter and child nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry`2.Value">
            <summary>
            Gets or sets the value attached to this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.#ctor(`1,System.Boolean)">
            <summary>
            Initializes a new <see cref="!:GenericTreeTableWithCounter&lt;V&gt;"/>.
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.BeginInit">
            <summary>
            Optimizes insertion of many items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.EndInit">
            <summary>
            Ends optimization of insertion of items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetNextEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetPreviousEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Insert(System.Int32,Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Remove(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.IndexOf(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="value">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Add(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The item to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Contains(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.CopyTo(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <c>true</c> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetCounterTotal">
            <summary>
            Returns the total of all counters in this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetStartCounterPosition">
            <summary>
            Returns the starting counter for this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetEntryAtCounterPosition(`1,System.Int32)">
            <summary>
            Overloaded. Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetEntryAtCounterPosition(`1,System.Int32,System.Boolean)">
            <summary>
            Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same searchPosition.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetNextNotEmptyCounterEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1},System.Int32)">
            <summary>
            Returns the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetPreviousNotEmptyCounterEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1},System.Int32)">
            <summary>
            Returns the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetNextVisibleEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Returns the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.GetPreviousVisibleEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounterEntry{`0,`1})">
            <summary>
            Returns the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.InternalTree">
            <summary>
            The internal thisTree table.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Sorted">
            <summary>
            Indicates whether thisTree is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Comparer">
            <summary>
            Gets or sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value></value>
            <returns>true if the collection has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithCounter`2.HasSummaries">
            <summary>
            Indicates whether the tree has summaries.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2">
            <summary>
            A collection of items maintained in a binary tree
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetNext(`0)">
            <summary>
            Returns the next item in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetPrevious(`0)">
            <summary>
            Returns the previous item in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <c>true</c> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetCounterTotal">
            <summary>
            Returns the total of all counters in this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetStartCounterPosition">
            <summary>
            Returns the starting counter for this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetItemAtCounterPosition(`1,System.Int32)">
            <summary>
            Overloaded. Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetItemAtCounterPosition(`1,System.Int32,System.Boolean)">
            <summary>
            Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same searchPosition.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetNextNotEmptyCounterItem(`0,System.Int32)">
            <summary>
            Returns the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetPreviousNotEmptyCounterItem(`0,System.Int32)">
            <summary>
            Returns the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetNextVisibleItem(`0)">
            <summary>
            Returns the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.GetPreviousVisibleItem(`0)">
            <summary>
            Returns the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection`2.HasSummaries">
            <summary>
            Indicates whether the tree has summaries.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2">
            <summary>
            Enumerator class for items of a <see cref="!:GenericBinaryTreeWithCounterCollection&lt;V&gt;"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.#ctor(Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollection{`0,`1})">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first item in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.MoveNext">
            <summary>
            Advances the enumerator to the next item of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next item; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithCounterCollectionEnumerator`2.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry`1">
            <summary>
            A tree leaf with value and summary information.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry`1.Value">
            <summary>
            Gets or sets the value attached to this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1"/>.
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.BeginInit">
            <summary>
            Optimizes insertion of many items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.EndInit">
            <summary>
            Ends optimization of insertion of items when thisTree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.GetNextEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.GetPreviousEntry(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Insert(System.Int32,Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The item to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Remove(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove from the collection. If the value is NULL or the item is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.IndexOf(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Returns the zero-based index of the occurrence of the item in the collection.
            </summary>
            <param name="value">The item to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the occurrence of the item within the entire collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Add(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="value">The item to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Contains(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0})">
            <summary>
            Determines if the item belongs to this collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can be a NULL reference (Nothing in Visual Basic).</param>
            <returns>True if item is found in the collection; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.CopyTo(Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummaryEntry{`0}[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the items copied from the  ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <c>true</c> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.InternalTree">
            <summary>
            The internal thisTree table.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Sorted">
            <summary>
            Indicates whether thisTree is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Comparer">
            <summary>
            Gets or sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the zero-based index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value></value>
            <returns>true if the collection has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.IsSynchronized">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericTreeTableWithSummary`1.HasSummaries">
            <summary>
            Indicates whether the tree has summaries.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1">
            <summary>
            A collection of items maintained in a binary tree
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.Dispose">
            <summary>
            Disposes of the object and releases internal objects.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.GetNext(`0)">
            <summary>
            Returns the next item in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.GetPrevious(`0)">
            <summary>
            Returns the previous item in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for the entire collection.
            </summary>
            <returns>An Enumerator for the entire collection.</returns>
            <remarks>Enumerators only allow reading the data in the collection. 
            Enumerators cannot be used to modify the underlying collection.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <c>true</c> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1.HasSummaries">
            <summary>
            Indicates whether the tree has summaries.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1">
            <summary>
            Enumerator class for items of a <see cref="T:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.#ctor(Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollection{`0})">
            <summary>
            Initalizes the enumerator and attaches it to the collection.
            </summary>
            <param name="collection">The parent collection to enumerate.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first item in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next item of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next item; False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.Generic.GenericBinaryTreeWithSummaryCollectionEnumerator`1.Current">
            <summary>
            Gets the current item in the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableNodeColor">
            <summary>
            Used by TreeTable to balance the tree with algorithm based on Red-Black tree.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Collections.TreeTableNodeColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Collections.TreeTableNodeColor.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableBranch">
            <summary>
            A branch with left and right leaves or branches.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.SetLeft(Syncfusion.WinRT.Collections.ITreeTableNode,System.Boolean,System.Boolean)">
            <summary>
            Sets the left node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <param name="isSortedTree">Indicates whether tree-table is sorted.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.WinRT.Collections.ITreeTableBranch.Left"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.SetRight(Syncfusion.WinRT.Collections.ITreeTableNode,System.Boolean)">
            <summary>
            Sets the right node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Specifies if tree-table is in add-mode.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.WinRT.Collections.ITreeTableBranch.Right"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.GetLeftB">
            <summary>
            Returns the left branch cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.GetRightB">
            <summary>
            Returns the right branch cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.GetEntryPositionOfChild(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Returns the position in the tree table of the specified child node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.InvalidateCountBottomUp">
            <summary>
            Sets this object's child node Count dirty and
            marks parent nodes' child node Count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.InvalidateCountTopDown">
            <summary>
            Sets this object's child node Count dirty and steps
            through all child branches and marks their child node Count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.InvalidateMinimumBottomUp">
            <summary>
            Sets this object's child node Minimum dirty and
            marks parent nodes' child node Minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableBranch.InvalidateMinimumTopDown">
            <summary>
            Sets this object's child node Minimum dirty and steps
            through all child branches and marks their child node Minimum dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableBranch.Left">
            <summary>
            Gets / sets the left node.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableBranch.Right">
            <summary>
            Gets / sets the right node.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableBranch.Color">
            <summary>
            Gets / sets the Red-Black tree color.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableBranch">
            <summary>
            A branch in a tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.#ctor(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Initializes a new branch.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.GetMinimum">
            <summary>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.GetLeftB">
            <summary>
            Returns the left node cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.GetRightB">
            <summary>
            Returns the right node cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.SetLeft(Syncfusion.WinRT.Collections.ITreeTableNode,System.Boolean,System.Boolean)">
            <summary>
            Sets the left node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <param name="isSorted">Indicates whether tree-table is sorted.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.WinRT.Collections.TreeTableBranch.Left"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.SetRight(Syncfusion.WinRT.Collections.ITreeTableNode,System.Boolean)">
            <summary>
            Sets the right node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.WinRT.Collections.TreeTableBranch.Right"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.GetEntryPositionOfChild(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Returns the position in the tree table of the specific child node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.InvalidateCountBottomUp">
            <summary>
            Sets this object's child node count dirty and
            walks up parent nodes and marks their child node count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.InvalidateCountTopDown">
            <summary>
            Sets this object's child node count dirty and steps
            through all child branches and marks their child node count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.InvalidateMinimumBottomUp">
            <summary>
            Sets this object's child node minimum dirty and
            marks parent nodes' child node minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableBranch.InvalidateMinimumTopDown">
            <summary>
            Sets this object's child node minimum dirty and steps
            through all child branches and marks their child node minimum dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableBranch.Color">
            <summary>
            Gets / sets Red-Black tree algorithm helper.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableBranch.Left">
            <summary>
            Gets / sets the left leaf or branch.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableBranch.Right">
            <summary>
            Gets / sets the right tree or branch.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableEmpty">
            <summary>
            An empty node.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableSource">
            <summary>
            This object owns a <see cref="T:Syncfusion.WinRT.Collections.ITreeTable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSource.GetTreeTable">
            <summary>
            Returns a reference to an inner tree table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTable">
            <summary>
            A tree table.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="!:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTable"/>.
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.SetNodeAt(System.Int32,Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Sets the node at the specified index.
            </summary>
            <param name="index">Index value where the node is to be inserted.</param>
            <param name="value">Value of the node that is to be inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.GetPreviousEntry(Syncfusion.WinRT.Collections.ITreeTableEntry)">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.GetNextEntry(Syncfusion.WinRT.Collections.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.Insert(System.Int32,Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">Index value where the node is to be inserted.</param>
            <param name="value">Value of the node to insert.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.Remove(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="value">Node value to look for and remove.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.ResetCache">
            <summary>
            Resets the cache.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.Contains(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">Node value to search for.</param>
            <returns>True if node belongs to this tree; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.IndexOf(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Returns the position of a node.
            </summary>
            <param name="value">Node value to look for.</param>
            <returns>Index of the node if found.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.Add(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Appends a node.
            </summary>
            <param name="value">Node value to append.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.AddSorted(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Adds a node into a sorted tree.
            </summary>
            <param name="value">Node value to add.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.AddIfNotExists(System.Object,Syncfusion.WinRT.Collections.ITreeTableEntry)">
            <summary>
            Adds a node in a sorted tree only if no node with the same value has not been added yet.
            </summary>
            <param name="key"></param>
            <param name="value">Node value to add.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.IndexOfKey(System.Object)">
            <summary>
            Finds a node in a sorted tree.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.FindKey(System.Object)">
            <summary>
            Finds a node in a sorted tree that matches the specified key.
            </summary>
            <param name="key">The key to search.</param>
            <returns>The node; NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Finds the node in a sorted tree is just one entry ahead of the
            node with the specified key. It searches for the largest possible
            key that is smaller than the specified key.
            </summary>
            <param name="key">The key to search.</param>
            <returns>The node; NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.RemoveAt(System.Int32)">
            <summary>
            Removes a node at the specified position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the node with the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.Clear">
            <summary>
            Clears all nodes in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified node.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified node to the tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.GetCount">
            <summary>
            Returns the number of leaves.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in thedestination array.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.CopyTo(Syncfusion.WinRT.Collections.ITreeTableNode[],System.Int32)">
            <summary>
            Copies the elements from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTable.GetEnumerator">
            <summary>
            Returns a <see cref="T:Syncfusion.WinRT.Collections.TreeTableEnumerator"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.Comparer">
            <summary>
            Gets / sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.Tag">
            <summary>
            Gets / sets the tag that can be associated with this object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.Sorted">
            <summary>
            Indicates whether tree is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.Root">
            <summary>
            Gets / sets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.Item(System.Int32)">
            <summary>
            Gets / sets an item at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.IsReadOnly">
            <summary>
            Indicates whether the tree is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets / sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.IsFixedSize">
            <summary>
            Indicates whether the nodes can be added or removed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.IsSynchronized">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.System#Collections#ICollection#Count">
            <summary>
            Returns the number of leaves.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTable.SyncRoot">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableEntrySource">
            <summary>
            An object that holds an <see cref="T:Syncfusion.WinRT.Collections.ITreeTableEntry"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableEntrySource.Entry">
            <summary>
            Gets a reference to the <see cref="T:Syncfusion.WinRT.Collections.ITreeTableEntry"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.WinRT.Collections.ITreeTableEntrySource"/> objects
            that are internally using a <see cref="T:Syncfusion.WinRT.Collections.ITreeTable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.#ctor">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.#ctor(Syncfusion.WinRT.Collections.ITreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.Contains(Syncfusion.WinRT.Collections.ITreeTableEntrySource)">
            <summary>
            Indicates whether object belongs to this collection.
            </summary>
            <param name="value">The value of the object.</param>
            <returns>True if object belongs to the collection; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.IndexOf(Syncfusion.WinRT.Collections.ITreeTableEntrySource)">
            <summary>
            Returns the position of a object in the collection.
            </summary>
            <param name="value">The value of the object.</param>
            <returns>The position of the object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.CopyTo(Syncfusion.WinRT.Collections.ITreeTableEntrySource[],System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">Starting index of the destination array.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.GetEnumerator">
            <summary>
            Returns a strongly typed enumerator.
            </summary>
            <returns>A strongly types enumerator.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.Insert(System.Int32,Syncfusion.WinRT.Collections.ITreeTableEntrySource)">
            <summary>
            Inserts an object at the specified index.
            </summary>
            <param name="index">Index value where the object is to be inserted.</param>
            <param name="value">Value of the object to insert.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.Add(Syncfusion.WinRT.Collections.ITreeTableEntrySource)">
            <summary>
            Appends an object.
            </summary>
            <param name="value">The value of the object to append.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.Remove(Syncfusion.WinRT.Collections.ITreeTableEntrySource)">
            <summary>
            Removes the object.
            </summary>
            <param name="value">The value of the object to remove.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a node at the specified index.
            </summary>
            <param name="index">Index value of the node to remove.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts the object at the specified index.
            </summary>
            <param name="index">Index value of the object to insert.</param>
            <param name="value">Value of the object to insert.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="value">Value of the object to remove.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicate whether the specified object belongs to this collection.
            </summary>
            <param name="value">Object value to look for.</param>
            <returns>True if object belongs to the collection; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.Clear">
            <summary>
            Clears all nodes in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies elements to destination array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">Starting index of the destination array.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.Item(System.Int32)">
            <summary>
            Gets / sets an <see cref="T:Syncfusion.WinRT.Collections.ITreeTableEntrySource"/> at a specific position.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.IsReadOnly">
            <summary>
            Indicates whether tree is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets / sets the item at the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.IsFixedSize">
            <summary>
            Indicates whether the nodes can be added or removed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.IsSynchronized">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection.Count">
            <summary>
            Returns the number of objects in this collection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollectionEnumerator">
            <summary>
            A strongly typed enumerator for the <see cref="T:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollectionEnumerator.#ctor(Syncfusion.WinRT.Collections.TreeTableEntrySourceCollection)">
            <summary>
            Initializes the <see cref="T:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollectionEnumerator"/>.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollectionEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollectionEnumerator.MoveNext">
            <summary>
            Indicates whether to move to the next object in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableEntrySourceCollectionEnumerator.Current">
            <summary>
            Returns the current <see cref="T:Syncfusion.WinRT.Collections.ITreeTableEntrySource"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableCounterSource">
            <summary>
            Interface definition for an object that has counters.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounterSource.GetCounter">
            <summary>
            Returns the counter object with counters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounterSource.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this object and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableCounter">
            <summary>
            Interface definition for a counter object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounter.Combine(Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32)">
            <summary>
            Combines this counter object with another counter and returns a new object. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounter.Compare(Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            	<c>true</c> if the specified cookie is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableCounter.GetValue(System.Int32)">
            <summary>
            Returns the integer value of the counter. A cookie specifies
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.ITreeTableCounter.Kind">
            <summary>
            Gets the Counter Kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableCounterCookies">
            <summary>
            Default counter cookies for identifying counter types.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Collections.TreeTableCounterCookies.CountAll">
            <summary>
            All counters.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Collections.TreeTableCounterCookies.CountVisible">
            <summary>
            Visible Counter.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableVisibleCounter">
            <summary>
            A counter that counts objects that are marked "Visible".
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.Empty">
            <summary>
            Returns an empty TreeTableVisibleCounter that represents zero visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.#ctor(System.Double)">
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Collections.TreeTableVisibleCounter"/> with a specified number of visible elements.
            </summary>
            <param name="visibleCount">The visible count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.GetVisibleCount">
            <summary>
            Returns the visible count.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.GetValue(System.Int32)">
            <summary>
            Returns the integer value of the counter. A cookie specifies
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.Syncfusion#WinRT#Collections#ITreeTableCounter#Combine(Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32)">
            <summary>
            Combines one tree object with another and returns the new object.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.CreateCounter">
            <summary>
            Factory method creates a new counter object of the same type as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.OnCombineCounters(Syncfusion.WinRT.Collections.ITreeTableCounter,Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32)">
            <summary>
            Called to combine the values of two counter objects. Results are saved back into this counter object.
            A cookie can filter the operation to a limited set of counter types.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.Combine(Syncfusion.WinRT.Collections.TreeTableVisibleCounter,System.Int32)">
            <summary>
            Combines the counter values of this counter object with the values of another counter object
            and returns a new counter object.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.Compare(Syncfusion.WinRT.Collections.TreeTableVisibleCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            	<c>true</c> if the specified cookie is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableVisibleCounter.Kind">
            <summary>
            The Counter Kind.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch">
            <summary>
            A tree table branch with a counter.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch">
            <summary>
            A tree table branch with a counter.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.#ctor(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.GetLeftC">
            <summary>
            Returns the left branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.GetRightC">
            <summary>
            Returns the right branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.TreeTableWithSummary">
            <summary>
            Returns the tree this branch belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummaryBranch.HasSummaries">
            <summary>
            Indicates whether this node has summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.#ctor(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.GetCounterPositionOfChild(Syncfusion.WinRT.Collections.ITreeTableNode)">
            <summary>
            Returns the cumulative counter position object of a child node with all counter values.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.GetLeftC">
            <summary>
            Returns the left branch node cast to ITreeTableCounterNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.GetRightC">
            <summary>
            Returns the right branch node cast to ITreeTableCounterNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.GetCounterTotal">
            <summary>
            Returns the total of this node's counter and child nodes (cached).
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.GetCounterPosition">
            <summary>
            Returns the cumulative position of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Invalidates the counter bottom up.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.TreeTableWithCounter">
            <summary>
            Returns the tree this branch belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithCounterBranch.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithCounter">
            <summary>
            A balanced tree with <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry"/> entries.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithSummary">
            <summary>
            A balanced tree with <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry"/> entries.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithSummary"/>.
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <c>true</c> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.Insert(System.Int32,Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry)">
            <summary>
            Inserts a <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry"/> object at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.Remove(Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry)">
            <summary>
            Removes an object from the tree.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.Contains(Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry)">
            <summary>
            Indicates whether an object belongs to the tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.IndexOf(Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry)">
            <summary>
            Returns the index of an object in the tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.Add(Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry)">
            <summary>
            Appends an object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.CopyTo(Syncfusion.WinRT.Collections.TreeTableWithSummaryEntry[],System.Int32)">
            <summary>
            Copies the elements of this tree to an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummary.GetEnumerator">
            <summary>
            Returns a strongly typed enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummary.HasSummaries">
            <summary>
            Indicates whether the tree has summaries.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummary.Item(System.Int32)">
            <summary>
            Gets / sets a TreeTableWithSummaryEntry.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.#ctor(Syncfusion.WinRT.Collections.ITreeTableCounter,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithCounter"/>.
            </summary>
            <param name="startPos"></param>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetCounterTotal">
            <summary>
            Returns the total of all counters in this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetStartCounterPosition">
            <summary>
            Returns the starting counter for this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32)">
            <summary>
            Overloaded. Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32,System.Boolean)">
            <summary>
            Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same searchPosition.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.WinRT.Collections.ITreeTableCounter,Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32)">
            <summary>
            Gets the entry at counter position.
            </summary>
            <param name="start">The start.</param>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.WinRT.Collections.ITreeTableCounter,Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32,System.Boolean)">
            <summary>
            Gets the entry at counter position.
            </summary>
            <param name="start">The start.</param>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">if set to <c>true</c> prefer left most.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetNextNotEmptyCounterEntry(Syncfusion.WinRT.Collections.ITreeTableEntry,System.Int32)">
            <summary>
            Returns the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetPreviousNotEmptyCounterEntry(Syncfusion.WinRT.Collections.ITreeTableEntry,System.Int32)">
            <summary>
            Returns the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetNextVisibleEntry(Syncfusion.WinRT.Collections.TreeTableWithCounterEntry)">
            <summary>
            Returns the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetPreviousVisibleEntry(Syncfusion.WinRT.Collections.TreeTableWithCounterEntry)">
            <summary>
            Returns the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.Insert(System.Int32,Syncfusion.WinRT.Collections.TreeTableWithCounterEntry)">
            <summary>
            Inserts a <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithCounterEntry"/> object at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.Remove(Syncfusion.WinRT.Collections.TreeTableWithCounterEntry)">
            <summary>
            Removes an object from the tree.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.Contains(Syncfusion.WinRT.Collections.TreeTableWithCounterEntry)">
            <summary>
            Indicates whether an entry belongs to the tree.
            </summary>
            <param name="value">The entry.</param>
            <returns>
            	<c>true</c> if tree contains the specified entry; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.IndexOf(Syncfusion.WinRT.Collections.TreeTableWithCounterEntry)">
            <summary>
            Returns the position of an object in the tree.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.Add(Syncfusion.WinRT.Collections.TreeTableWithCounterEntry)">
            <summary>
            Appends an object.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.CopyTo(Syncfusion.WinRT.Collections.TreeTableWithCounterEntry[],System.Int32)">
            <summary>
            Copies the elements of this tree to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounter.GetEnumerator">
            <summary>
            Returns a strongly typed enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithCounter.Item(System.Int32)">
            <summary>
            Gets / sets a TreeTableWithCounterEntry.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithCounterEnumerator">
            <summary>
            A strongly typed enumerator for the <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithCounter"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithCounterEnumerator.#ctor(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithCounterEnumerator"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithCounterEnumerator.Current">
            <summary>
            Returns the current <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithCounter"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableVisibleCounterSource">
            <summary>
            An object that counts objects that are marked "Visible". It implements
            the ITreeTableCounterSource interface and creates a <see cref="T:Syncfusion.WinRT.Collections.TreeTableVisibleCounter"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounterSource.#ctor(System.Double)">
            <summary>
            Initializes the object with visible count.
            </summary>
            <param name="visibleCount">The visible count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounterSource.GetCounter">
            <summary>
            Returns the counter object with counters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableVisibleCounterSource.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this object and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableSummary">
            <summary>
            Interface definition for a summary object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSummary.Combine(Syncfusion.WinRT.Collections.ITreeTableSummary)">
            <summary>
            Combines this summary information with another object's summary and returns a new object.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource">
            <summary>
            Provides a <see cref="M:Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource.GetEmptySummaries"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource.GetEmptySummaries">
            <summary>
            Gets an array of summary objects.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.ITreeTableSummaryArraySource">
            <summary>
            Interface definition for an object that has summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSummaryArraySource.GetSummaries(Syncfusion.WinRT.Collections.ITreeTableEmptySummaryArraySource,System.Boolean@)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">An array of empty summary objects.</param>
            <param name="changed">Returns True if summaries were recalculated; False if already cached.</param>
            <returns>An array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSummaryArraySource.InvalidateSummariesTopDown">
            <summary>
            Marks all summaries dirty in this object and child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSummaryArraySource.InvalidateSummariesBottomUp">
            <summary>
            Marks all summaries dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.ITreeTableSummaryArraySource.InvalidateSummary">
            <summary>
            Marks all summaries dirty in this object only.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.TreeTableWithSummaryEnumerator">
            <summary>
            A strongly typed enumerator for the <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithSummary"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.TreeTableWithSummaryEnumerator.#ctor(Syncfusion.WinRT.Collections.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithSummaryEnumerator"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.TreeTableWithSummaryEnumerator.Current">
            <summary>
            Returns the current <see cref="T:Syncfusion.WinRT.Collections.TreeTableWithSummary"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.SyncfusionCommand">
            <summary>
            An abstract class that encapsulates a command to be executed at a later point in time.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.SyncfusionCommand.Execute">
            <summary>
            Execute the command this object represents.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.SyncfusionCommand.Description">
            <summary>
            Get a description for the command.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.DisposableWithEvent">
            <summary>
            This class provides a base class that implements the IDisposable interface
            as suggested in the .NET documentation using the Disposable pattern. After the
            object was disposed a <see cref="E:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.Disposed"/> event is raised.
            </summary>
            <remarks>If you derive from this class, you only need to override the protected
            Dispose method and check the disposing parameter.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.Dispose">
            <overload>
            Releases all resources used by the Component.
            </overload>
            <summary>
            Releases all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="!:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.Disposed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.IsDisposed">
            <summary>
            Allows to detect if object is disposed or not. True indicates object is disposed,
            otherwise indicates object is still alive and ready for use.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.IsDisposing">
            <summary>
            Returns True if object is executing the <see cref="M:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.Dispose"/> method call.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.ComponentModel.DisposableWithEvent.Disposed">
            <summary>
            Occurs after the object was disposed.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.IDisposedEvent">
            <summary>
            An interface for the <see cref="E:Syncfusion.WinRT.ComponentModel.IDisposedEvent.Disposed"/> event.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.ComponentModel.IDisposedEvent.Disposed">
            <summary>
            Occurs when Dispose was called.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.NullableHelper">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.NullableHelper.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.NullableHelper.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.NullableHelper.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.NullableHelper.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.NullableHelper.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.NullableHelper.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.OperationMilestone">
            <summary>
            Indicates the current state of the operation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.ComponentModel.OperationMilestone.Start">
            <summary>
            The operation is starting.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.ComponentModel.OperationMilestone.Progress">
            <summary>
            The operation is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.ComponentModel.OperationMilestone.Finished">
            <summary>
            The operation is finished.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener">
            <summary>
            This class listens to a list of <see cref="T:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider"/> and fires a <see cref="E:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.Progress"/> event
            if the operation takes longer than a specified <see cref="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.Delay"/>.
            </summary>
            <remarks>
            Derive from this class if you want to add support for displaying status messages in your
            status bar.
            <note type="note"><see cref="T:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener"/> operates on the same thread
            where the long operation takes place. See the <see cref="!:Syncfusion.Windows.Forms.DelayedStatusDialog"/> class how to
            give feedback about the operation on a different thread and allow the user to cancel the
            operation by pressing the Cancel button in a dialog.</note>
            </remarks>
            <seealso cref="!:Syncfusion.Windows.Forms.DelayedStatusDialog"/> <seealso cref="!:Syncfusion.Windows.Forms.DelayedWaitCursor"/>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.AddProvider(Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Adds an <see cref="T:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider"/> that this object will listen to and
            provide user feedback for.
            </summary>
            <param name="provider">An object that implements the <see cref="T:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider"/> interface.</param>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.RemoveProvider(Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Removes an <see cref="T:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider"/> from the list of feedback providers.
            </summary>
            <param name="provider">An object that implements the <see cref="T:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider"/> interface.</param>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.OnProgress(Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.Progress"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.Progress">
            <summary>
            Occurs to indicate the progress of an ongoing operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackListener.Delay">
            <summary>
            Gets / sets the delay in milliseconds before Progress events about an operation should be raised.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs">
            <summary>
            Holds status information about an ongoing operation.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.#ctor(Syncfusion.WinRT.ComponentModel.OperationMilestone,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes the event args.
            </summary>
            <param name="milestone">The current status of the operation.</param>
            <param name="name">The name of the operation.</param>
            <param name="description">A textual description for the operation.</param>
            <param name="percent">The percentage of work the operation completed so far or -1 if the operation
            is not able to calculate a meaningful percentage value.</param>
            <param name="ticks"> The number of milliseconds that passed since the operation started.</param>
            <param name="allowCancel">Indicates whether the operation can be canceled by the user.</param>
            <param name="allowRollback">Indicates whether changes made by the operation can be rolled back if the
            operation is canceled by the user.</param>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.Percent">
            <summary>
            Returns the percentage of work the operation completed so far; -1 if the operation
            is not able to calculate a meaningful percentage value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.Name">
            <summary>
            Returns the name of the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.Description">
            <summary>
            Returns the textual description for the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.AllowCancel">
            <summary>
            Indicates whether the operation can be canceled by the user.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.AllowRollback">
            <summary>
            Indicates whether changes made by the operation can be rolled back if the
            operation is canceled by the user.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.Rollback">
            <summary>
            Indicates whether the operation should roll back.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.Milestone">
            <summary>
            Returns the current status of the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs.Ticks">
            <summary>
            Returns the number of milliseconds that passed since the operation started.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.OperationFeedbackEventHandler">
            <summary>
            Represents the method that will handle the OperationFeedbackEvent event of certain classes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An OperationFeedbackEventArgs object that
            contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider">
            <summary>
            The class that implements the component where operations are operated on should
            implement this interface.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider.RaiseOperationFeedbackEvent(Syncfusion.WinRT.ComponentModel.OperationFeedbackEventArgs)">
            <summary>
            Raises an RaiseOperationFeedbackEvent.
            </summary>
            <param name="e">An OperationFeedbackEventArgs object that
            contains the event data.</param>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider.FeedbackStack">
            <summary>
            Returns the stack for nested operations.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider.OperationFeedback">
            <summary>
            Occurs to indicate the progress of an ongoing operation.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.OperationFeedback">
             <summary>
             Use this class when you want to provide feedback during time-consuming operations or
             if you want the user to be able to abort an operation.
             </summary>
             <remarks>
             You need to implement IOperationFeedbackProvider in your class.
             <code>
             // interface IOperationFeedbackProvider
             public event OperationFeedbackEventHandler OperationFeedback;
             Stack feedbackStack = new Stack();
             void IOperationFeedbackProvider.RaiseOperationFeedbackEvent(OperationFeedbackEventArgs e)
             {
                 if (OperationFeedback != null)
                         OperationFeedback(this, e);
             }
             Stack IOperationFeedbackProvider.FeedbackStack
             {
                 get { return feedbackStack; }
             }
             </code>
            
             When you implement an operation that you want to be cancellable or where
             you want to show feedback (e.g. display percentage in status bar) you
             do this by creating an OperationFeedback object inside a using statement.<para/>
            
             Example:
             <code>
             using (OperationFeedback op = new OperationFeedback(this))
             {
                 op.Name = "Cell";
                 op.Description = "Command Description";
                 op.AllowCancel = true;
                 op.AllowNestedProgress = true;
                 op.AllowNestedFeedback = false;
                 while (n++ != 100)
                 {
                     if (op.ShouldCancel())
                         return;
            
                     op.PercentComplete = n;
                 }
             }
                 </code>
                 It is also supported in nest operations in case your method calls other
                 routines that also use OperationFeedback. AllowNestedProgress will disable
                 OperationFeedback and OperationProgress / ShouldCancel in nested routines.
                 AllowNestedFeedback will simply prohibit changing the description. But
                 the object will still fire OperationProgress events.<para/>
            
                 A sample for a consumer is the DelayedWaitCursor class. You can assign a DelayedWaitCursor
                 to a grid table. The DelayedWaitCursor object will listen to OperationFeedback events and
                 automatically change the cursor to a wait cursor if operations take more time.
                 </remarks>
            
             <seealso cref="!:Syncfusion.Windows.Forms.DelayedWaitCursor"/>
             <seealso cref="!:Syncfusion.Windows.Forms.DelayedStatusDialog"/>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedback.#ctor(Syncfusion.WinRT.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Initializes a new OperationFeedback object and pushes the object
            onto the providers feedback stack.
            </summary>
            <param name="feedback">Component that implements IOperationFeedbackProvider.</param>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedback.System#IDisposable#Dispose">
            <summary>
            Closes the current operation. Removes the object from FeedbackStack.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedback.Start">
            <summary>
            Call this method to signal the start of the operation. If you do not explicitly
            call this routine, it will be called automatically the first time Progress or ShouldCancel
            is called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedback.Close">
            <summary>
            Call this method to signal the end of the operation. If you do not explicitly
            call this routine it will be called automatically when you are using the "using"
            statement in C# and / or when Dispose is called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.OperationFeedback.Progress">
            <summary>
            Call this method inside a loop from your method that implements the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.SeriesCount">
            <summary>
            Gets / sets the number of series if you have a series of nested operations.
            </summary>
            <remarks>
            If you know the number of operations in advance, you should specify this value.
            This allows OperationFeedback to adjust the percentage display to reflect the percentage
            in the overall operation. If you have two operations, the first operation will show percentage
            from 0 to 50 and the second from 51 to 100. In the original program code for these operations, you
            can keep your original calculations (setting percentage from 0 to 100).
            OperationFeedback simply divides the percentage by SeriesCount when it fires the Progress event.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.IsNested">
            <summary>
            Indicate whether this operation is nested inside another operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.AllowNestedProgress">
            <summary>
            Indicates whether nested operations are enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.ShouldCallProgress">
            <summary>
            Indicates whether calls to Progress or ShouldCancel have any effect.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.ShouldShowFeedback">
            <summary>
            Indicates whether the percent complete and description should be shown or discarded
            for this operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.AllowNestedFeedback">
            <summary>
            Indicates whether percentage display and description for nested operations are enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.ShouldCancel">
            <summary>
            Indicates whether the user wants to abort the operation. ShouldCancel will call
            Progress.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.AllowCancel">
            <summary>
            Indicates whether cancelling the current operation is enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.AllowRollback">
            <summary>
            Indicates whether rolling back (undoing) the current operation is enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.Rollback">
            <summary>
            Indicates whether the canceled operation should be rolled back.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.RollbackConfirmed">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.Name">
            <summary>
            Gets / sets the short name of the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.Ticks">
            <summary>
            Returns the number of ticks elapsed since the operation was started.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.Description">
            <summary>
            Gets / sets the description of the operation. Use localized string (SR.GetString("...")) if necessary.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.PercentComplete">
            <summary>
            Gets / sets the progress in percentage for the current operation.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.OperationFeedback.Counter">
            <summary>
            Returns the number of counts of calls to Progress.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.SyncfusionRoutedEventArgs">
            <summary>
            This is a base class for events of the Syncfusion libraries. It supports writing
            properties in its ToString() method. 
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.SyncfusionEventArgs">
            <summary>
            This is a base class for events of the Syncfusion libraries. It supports writing
            properties in its ToString() method. 
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.SyncfusionCancelEventArgs">
            <summary>
            Provides data for a cancellable event. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.SyncfusionCancelEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionCancelEventArgs class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.SyncfusionCancelEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionCancelEventArgs class with the Cancel property set to the given value.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs">
            <summary>
            Provides data for a event that can be handled by a subscriber and overrides the event's default behavior.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionHandledEventArgs class with the Handled property set to False.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionHandledEventArgs class with the Handled property set to the given value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled">
            <summary>
            Indicates whether the event has been handled and no further processing of the event should happen.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.GridCommon.ExceptionCatchedEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched"/> event.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs.ex">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs.#ctor(System.Exception)">
            <summary>
            Constructs a <see cref="T:Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs"/> object.
            </summary>
            <param name="ex">The exception that was cached.</param>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs.Exception">
            <summary>
            Returns the exception that was cached.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.GridCommon.ExceptionManager">
            <summary>
            Provides a global hook for exceptions that have been cached inside the framework and gives you
            the option to provide specialized handling of the exception. You can also temporarily suspend and resume
            caching exceptions.
            </summary>
            <remarks>
            The Syncfusion framework notifies <see cref="T:Syncfusion.WinRT.GridCommon.ExceptionManager"/> about exceptions that
            are cached by calling <see cref="M:Syncfusion.WinRT.GridCommon.ExceptionManager.RaiseExceptionCatched(System.Object,System.Exception)"/> or <see cref="T:Syncfusion.WinRT.GridCommon.ExceptionManager"/>.<para/>
            The <see cref="M:Syncfusion.WinRT.GridCommon.ExceptionManager.RaiseExceptionCatched(System.Object,System.Exception)"/> method will raise the <see cref="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched"/>
            event. By handling the <see cref="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched"/> event, your code can analyze the exception that was cached
            and optionally let it bubble up by rethrowing the exception.<para/>
            Your code can also temporarily suspend and resume caching exceptions. This is useful if you want to provide your
            own exception handling. Just call <see cref="M:Syncfusion.WinRT.GridCommon.ExceptionManager.SuspendCatchExceptions"/> to disable handling exceptions and <see cref="M:Syncfusion.WinRT.GridCommon.ExceptionManager.ResumeCatchExceptions"/>
            to resume caching exceptions.<para/>
            You also have the options to disable caching exceptions altogether by setting <see cref="P:Syncfusion.WinRT.GridCommon.ExceptionManager.PassThroughExceptions"/> to True.<para/>
            Note: All static settings for this class are thread local.
            </remarks>
            <example><code lang="C#">
            // The following example demonstrates temporarily suspending exception caching when calling a base class version
            // of a method.
                    protected override void OnMouseDown(MouseEventArgs e)
                        {
                        ExceptionManager.SuspendCatchExceptions();
                        try
                        {
                            base.OnMouseDown(e);
                            ExceptionManager.ResumeCatchExceptions();
                        }
                        catch (Exception ex)
                        {
                            ExceptionManager.ResumeCatchExceptions();
                                // Notify exception manager about the catched exception and
                                // give it a chance to optionally rethrow the exception if necessary
                                // (e.g. if this OnMouseDown was called from another class that
                                // wants to provide its own exception handling).
                            if (!ExceptionManager.RaiseExceptionCatched(this, ex))
            					throw ex;
                            // handle exception here
                            MessageBox.Show(ex.ToString());
                        }
                    }
            </code></example>
            <example><code lang="C#">
            // This code sample shows how exceptions are handled within the framework:
                            try
                            {
                                CurrentCell.Refresh();
                            }
                            catch (Exception ex)
                            {
                                TraceUtil.TraceExceptionCatched(ex);
                                if (!ExceptionManager.RaiseExceptionCatched(this, ex))
            						throw ex;
                            }
            </code></example>
        </member>
        <member name="F:Syncfusion.WinRT.GridCommon.ExceptionManager.passThroughExceptions">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.WinRT.GridCommon.ExceptionManager.suspendCatchExceptions">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.WinRT.GridCommon.ExceptionManager.onExceptionCatchedKey">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.ExceptionManager.SuspendCatchExceptions">
            <summary>
            Temporariliy suspends caching exceptions. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.ExceptionManager.ResumeCatchExceptions">
            <summary>
            Temporariliy resumes caching exceptions. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.ExceptionManager.ShouldCatchExceptions">
            <summary>
            Indicates whether exceptions should be cached or if they should bubble up. <see cref="M:Syncfusion.WinRT.GridCommon.ExceptionManager.RaiseExceptionCatched(System.Object,Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs)"/>
            calls this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.ExceptionManager.RaiseExceptionCatched(System.Object,Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs)">
            <overload>
            Raises the <see cref="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched"/> event.
            </overload>
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched"/> event. If caching exceptions has been disabled
            by a <see cref="M:Syncfusion.WinRT.GridCommon.ExceptionManager.SuspendCatchExceptions"/> call or if <see cref="P:Syncfusion.WinRT.GridCommon.ExceptionManager.PassThroughExceptions"/> has been set to True,
            the exception is rethrown.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.WinRT.GridCommon.ExceptionCatchedEventArgs"/> that contains the event data.</param>
            <returns></returns>
            <param name="sender"/>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.ExceptionManager.RaiseExceptionCatched(System.Object,System.Exception)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched"/> event. If caching exceptions has been disabled
            by a <see cref="M:Syncfusion.WinRT.GridCommon.ExceptionManager.SuspendCatchExceptions"/> call or if <see cref="P:Syncfusion.WinRT.GridCommon.ExceptionManager.PassThroughExceptions"/> has been set to True,
            the exception is rethrown.
            </summary>
            <param name="ex">A <see cref="T:System.Exception"/> that was cached.</param>
            <returns></returns>
            <param name="sender"/>
        </member>
        <member name="E:Syncfusion.WinRT.GridCommon.ExceptionManager.ExceptionCatched">
            <summary>
            Occurs when an exception was cached within the framework and <see cref="T:Syncfusion.WinRT.GridCommon.ExceptionManager"/> was notified.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.ExceptionManager.PassThroughExceptions">
            <summary>
            Lets you disable caching exceptions altogether by setting <see cref="P:Syncfusion.WinRT.GridCommon.ExceptionManager.PassThroughExceptions"/> to True.<para/></summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ICaptureContext">
            <summary>
            This interface is used by <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher"/>
            to support interaction with UIElements that grab mouse capture.
            When a mouse was pressed and a control grabs the mouse capture the
            MouseControllerDispatcher creates a capture context to allow
            the mouse to interact with the UIElement while inside the context
            but also to switch back to another context when the user
            drags the mouse out of the UIElement. 
            <para/> 
            An example scenerio is
            selection of cells inside a grid. While inside a textbox you can
            select text but when dragging the mouse outside the grid switches
            to selecting cells. When dragging the mouse back inside the textbox,
            the textbox gets the mouse capture again and you switch back
            to selecting text inside the cell.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ICaptureContext.PointInContext(Windows.Foundation.Point)">
            <summary>
            Determines if the points belongs to the same element that this context was crreated for.
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ICaptureContext.RecaptureMouse">
            <summary>
            Recaptures the mouse if the capture was taken away earlier because the user
            moved the mouse away from the UIElement and now has moved the mouse back into
            the UIElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ICaptureContext.CancelMouseCapture">
            <summary>
            Cancel the mouse capture. 
            </summary>
            <returns>true if capture can be cancelled; false if context should not be changed.</returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.IHitTestSelectCells">
            <summary>
            This interface can optionially be implemented by a cell renderer.
            When the user presses or release the mouse button <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher"/> checks whether the mouse was pressed
            directly over a renderer (in such case MouseControllerEventArgs.DirectlyOverRenderer should have been set). If the interface is implemented
            the MouseDown and MouseUp methods are called. 
            <para/>
            The grids cell renderers
            implement this interface to move the current cell to the cell
            when the mouse is clicked inside the cells live UIElement visual.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IHitTestSelectCells.MouseDown(Windows.UI.Xaml.FrameworkElement,Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs)">
            <summary>
            MouseDown is called when MouseControllerDispatcher.HitTest did not
            return a controller to be set as ActiveController and the mouse
            was pressed over a UIElement inside a cell which hosts this
            renderer.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mouseControllerEventArgs">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.IMouseController">
            <summary>
            IMouseController defines the interface for mouse controllers to be used with MouseControllerDispatcher.
            </summary>
            <remarks>
            Any mouse controller needs to implement the IMouseController interface.<para/>
            In its implementation of MouseController.HitTest, the mouse controller should determine whether your
            controller wants to handle the mouse events based current context.<para/>
            See MouseControllerDispatcher for further discussion.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.MouseHover(Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs)">
            <summary>
            MouseHover is called when this controller signaled in HitTest that it wants to handle mouse events. MouseHover
            is called after MouseHoverEnter.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.MouseHoverLeave(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            MouseHoverLeave is called when hovering ends either because user dragged mouse out of the hit-test area or
            when context changes (e.g. user pressed the mouse button).
            </summary>
            <param name="e">The <see cref="!:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.MouseDown(Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs)">
            <summary>
            MouseDown is called when this controller signaled in HitTest that it wants to handle mouse events and the
            user pressed the mouse button.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> instance containing the event data.</param>
            <remarks>
            MouseDown is called and this controller will become the active controller and receive all subsequent mouse messages
            until the mouse button is released or the mouse operation is cancelled.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.MouseMove(Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs)">
            <summary>
            MouseMove is called for the active controller after a MouseDown message when the user moves the mouse pointer.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.MouseUp(Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs)">
            <summary>
            MouseUp is called for the active controller after a MouseDown message when the user releases the mouse button.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.CancelMode">
            <summary>
            CancelMode is called for the active controller after a MouseDown message when the mouse operation is cancelled.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.RestoreMode">
            <summary>
            RestoreMode is called when a controller should be reactivated. Prevoius state can be restored if it was backed up earlier when CancelMode was called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IMouseController.HitTest(Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs,Syncfusion.WinRT.Controls.Scroll.IMouseController)">
            <summary>
            HitTest is called to determine whether your controller wants to handle the mouse events based current context.
            </summary>
            <param name="mouseEventArgs">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> instance containing the event data.</param>
            <param name="controller">The controller.</param>
            <returns>A value not equal to 0 indicates that the controller wants to handle the mouse input; otherwise if equal to 0 the controller is not handling it.</returns>
            <remarks>
            The current winner of the vote is specified through the controller parameter. Your implementation of HitTest
            can decide if it wants to override the existing vote or leave it.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IMouseController.Name">
            <summary>
            Returns the name of this mouse controller.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IMouseController.SupportsCancelMouseCapture">
            <summary>
            Gets a value indicating whether this controller supports the cancel mouse capture feature and the context of the mouse operation can be changed
            while the user drags the pressed mouse.
            </summary>
            <value>
            	<c>true</c> if supports the cancel mouse capture feature; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IMouseController.SupportsMouseTracking">
            <summary>
            Gets a value indicating whether the controller supports the mouse
            tracking feature which allows MouseControllerDispatcher to emulate 
            a pressed mouse operation similar
            to the way a combobox selects the item in a dropped list box while
            hovering the mouse over the dropped listbox and simulating
            a MouseUp when the user presses the mouse.
            </summary>
            <value>
            	<c>true</c> if the controller supports mouse tracking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher">
            <summary>
            MouseControllerDispatcher has no dependency on ScrollControl. You can use it with any
            FrameworkElement-derived class. You only need to forward mouse events to methods from
            IMouseEventsTarget interface or add MouseControllerDispatcher to MouseEventTargetCollection.
            <para/>
            VirtualizingCellsControl uses a derived CellMouseControllerDispatcher class which adds
            support for changing context of a mouse operation when pressing mouse inside a textbox
            or other UIElement and then switching to a cell selection mode when moving mouse outside textbox.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.#ctor(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Initializes a new MouseControllerDispatcher object and associates it with the parent control.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.Dispose(System.Boolean)">
            <summary>
            Resets the dispatcher and calls Dispose for any registered mouse controller and unregisters all mouse controllers.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.Add(Syncfusion.WinRT.Controls.Scroll.IMouseController)">
            <summary>
            Registers a mouse controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.Remove(Syncfusion.WinRT.Controls.Scroll.IMouseController)">
            <summary>
            Removes a mouse controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.Contains(Syncfusion.WinRT.Controls.Scroll.IMouseController)">
            <summary>
            Indicates whether a mouse controller has previously been registered.
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.Find(System.String)">
            <summary>
            Searchs a mouse controller by comparing with the name returned from IMouseController.Name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.OnActiveControllerChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.ActiveControllerChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.SetMouseHoverController(Syncfusion.WinRT.Controls.Scroll.IMouseController,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Sets the controller that will receive mouse hovering messages. If the controller is changed,
            MouseHoverLeave and MouseHoverEnter calls are made.
            </summary>
            <param name="value"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.HitTest(Windows.Foundation.Point)">
            <overload>
            HitTest loops through all controllers and calls HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </overload>
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="point">The point in client coordinates to be hit tested.</param>
            <returns>The result identifying the hit-test context.</returns>
            <remarks>
            The current result of the vote gets passed to the next mouse controller. If a controller wants
            to handle mouse events, it can decide based on the existing vote if it has higher priority for it
            to handle mouse messages than the existing vote.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.HitTest(Windows.Foundation.Point,Syncfusion.WinRT.Controls.Scroll.IMouseController@)">
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="point">The point in client coordinates to be hit tested.</param>
            <param name="mouseButton">The mouse button that is pressed.</param>
            <param name="controller">A placeholder where a reference to the winning <see cref="T:Syncfusion.WinRT.Controls.Scroll.IMouseController"/>
            is returned.</param>
            <returns>The result identifying the hit-test context.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.HitTest(Windows.Foundation.Point,System.Int32,Syncfusion.WinRT.Controls.Scroll.IMouseController@)">
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="point">The point in client coordinates to be hit tested.</param>
            <param name="mouseButton">The mouse button that is pressed.</param>
            <param name="clicks">1 for single-click; 2 for double click.</param>
            <param name="controller">A placeholder where a reference to the winning <see cref="T:Syncfusion.WinRT.Controls.Scroll.IMouseController"/>
            is returned.</param>
            <returns>The result identifying the hit-test context.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.HitTest(Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs,Syncfusion.WinRT.Controls.Scroll.IMouseController@)">
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="mouseEventArgs">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> instance containing the event data.</param>
            <param name="controller">The controller.</param>
            <returns>The result identifying the hit-test context.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.QueryWantsMouseInput">
            <summary>
            Queries the WantsMouseInputProperty attached property of the element the mouse is directly over.
            </summary>
            <param name="mouseDevice">The mouse device.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.ResetTrackMouse">
            <summary>
            Resets support for mouse tracking.
            </summary>
            <remarks>Call this method after a user interaction that should switch the control back into
            normal mouse behavior. For example, when the control gets the focus or when the user clicks a scrollbar.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.OnTrackMouseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.TrackMouseChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.StartTrackMouse">
            <summary>
            Call this from controllers MouseUp method when you want to enable mouse tracking
            when user release mouse button (e.g. let user click on a line and then resize the
            line without mouse being pressed down).
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.SetHost(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the host.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.OnMouseEnter(Windows.Devices.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="!:System.Windows.Input.Mouse.MouseEnterEvent"/> attached event is raised on the host element.
            </summary>
            <param name="e">The <see cref="!:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.OnMouseLeave(Windows.Devices.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="!:System.Windows.Input.Mouse.MouseLeaveEvent"/> attached event is raised on the host element.
            </summary>
            <param name="e">The <see cref="!:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.SuspendMouse">
            <summary>
            Suspends handling mouse events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.ResumeMouse">
            <summary>
            Resumes handline mouse events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.CancelMode">
            <summary>
            Cancel any mouse processing.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.CreateSuspendState">
            <summary>
            Creates the suspend state when <see cref="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.CancelMode"/> was called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.RestoreMode">
            <summary>
            Restores the previously saved mode from suspend state created with <see cref="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.CreateSuspendState"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.CreateCaptureInfo(Windows.Foundation.Point)">
            <summary>
            Creates the capture info when the mouse is pressed
            inside a child UIElement.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.ActiveControllerChanged">
            <summary>
            Indicates that the active controller has changed.
            </summary>
            <remarks>
            Active controller is the controller that is receiving MouseDown, MouseMove and MouseUp messages when the user
            has pressed a mouse button.</remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.TrackMouseChanged">
            <summary>
            Indicates that the value of the TrackMouse property has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.Owner">
            <summary>
            Returns a reference to the associated control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.ActiveController">
            <summary>
            Returns a reference to the active mouse controller that is receiving MouseDown, MouseMove and MouseUp messages when the user
            has pressed a mouse button.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.MouseHoverController">
            <summary>
            Returns the controller that currently receives mouse hovering messages.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.LastHitTestCode">
            <summary>
            Returns the last HitTest value returned that was non-zero. Check this property
            if you need to make decision on your mouse controller's HitTest.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.TrackMouse">
            <summary>
            Enables support for mouse tracking.
            </summary>
            <remarks>
            Specify the bounds where the mouse tracking should start. As soon as the user moves the mouse
            over the specified region, MouseControllerDispatcher will simulate a mouse down event. When the user presses
            any mouse button MouseControllerDispatcher will simulate a mouse up and resets the mouse tracking mode. After
            the inital click on a mouse button, mouse processing will work as usual.<par/>
            <note type="note">Mouse tracking lets you easily simulate the behavior of windows combo boxes.</note>
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.InMouseDown">
            <summary>
            Gets a value indicating whether instance is in MouseDown.
            </summary>
            <value><c>true</c> if in MouseDown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.InMouseUp">
            <summary>
            Gets a value indicating whether instance is in MouseUp.
            </summary>
            <value><c>true</c> if in MouseUp; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.InMouseMove">
            <summary>
            Gets a value indicating whether instance is in MouseMove.
            </summary>
            <value><c>true</c> if in MouseMove; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.InCancelMode">
            <summary>
            Gets a value indicating whether instance is in CancelMode.
            </summary>
            <value><c>true</c> if in CancelMode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.IgnoreMouse">
            <summary>
            Gets a value indicating whether mouse events should be ignored.
            </summary>
            <value><c>true</c> if mouse events should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.IsMouseTracking">
            <summary>
            Gets a value indicating whether the mouse tracking feature is enabled.
            </summary>
            <value>
            	<c>true</c> if mouse tracking feature is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.MouseDownLocation">
            <summary>
            Gets the mouse down location.
            </summary>
            <value>The mouse down location.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.MouseDownTick">
            <summary>
            Gets the mouse down tick (Environment.TickCount at mouse down).
            </summary>
            <value>The mouse down tick.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.IsMouseCapturedByChildElement">
            <summary>
            Gets a value indicating whether this instance is mouse captured by child element.
            </summary>
            <value>
            	<c>true</c> if this instance is mouse captured by child element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.IsMouseHovering">
            <summary>
            Gets a value indicating whether this instance is mouse hovering.
            </summary>
            <value>
            	<c>true</c> if this instance is mouse hovering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.IsCaptureCanceled">
            <summary>
            Gets a value indicating whether this instance is mouse captured by child element.
            </summary>
            <value>
            	<c>true</c> if this instance is mouse captured by child element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.CancelCaptureInfo">
            <summary>
            Gets the cancel capture info.
            </summary>
            <value>The cancel capture info.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.SuspendState">
            <summary>
            The SupspendState of the MouseControllerDispatcher object when
            <see cref="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.CancelMode"/> was called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.SuspendState.#ctor(Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.SuspendState"/> class.
            </summary>
            <param name="mc">The MouseControllerDispatcher.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher.SuspendState.Restore">
            <summary>
            Restores the state for the MouseControllerDispatcher.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs">
            <summary>
            Provides event data for mouse events dispatched from the <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher"/> 
            to <see cref="T:Syncfusion.WinRT.Controls.Scroll.IMouseController"/> controllers.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.#ctor(Windows.UI.Xaml.Input.PointerRoutedEventArgs,System.Int32,Windows.Foundation.Point,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs"/> class.
            </summary>
            <param name="sourceEventArgs">The <see cref="!:System.Windows.Input.MouseEventArgs"/> instance containing the underlying mouse event data.</param>
            <param name="isPreviewEvent">if set to <c>true</c> this is a preview event.</param>
            <param name="button">The button.</param>
            <param name="clicks">The clicks.</param>
            <param name="location">The mouse location.</param>
            <param name="delta">The mouse-wheel delta.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.IsPressed">
            <summary>
            Gets the pressed state of the mouse button
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.SourceEventArgs">
            <summary>
            Gets the <see cref="!:System.Windows.Input.MouseEventArgs"/> instance containing the underlying mouse event data.
            </summary>
            <value>The source event args.</value>
            
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.CancelCaptureInfo">
            <summary>
            Gets the cancel capture context.
            </summary>
            <value>The cancel capture context.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.IsMouseOverChildElement">
            <summary>
            Gets a value indicating whether the is mouse over child UIElement.
            </summary>
            <value>
            	<c>true</c> if this instance is mouse over a child element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.IsTracking">
            <summary>
            Gets a value indicating whether the mouse tracking feature is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is tracking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this event is handled.
            </summary>
            <value><c>true</c> if event is handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.ClickCount">
            <summary>
            Gets the click count (1 - single click, 2 - double click)
            </summary>
            <value>The click count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.Delta">
            <summary>
            Gets the mouse wheel delta.
            </summary>
            <value>The delta.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventArgs.Location">
            <summary>
            Gets or sets the mouse location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerEventHandler">
            <summary>
            Represents the method that will handle <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher"/> related events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.ScrollableContentViewer.SetCanContentScroll(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary> 
            Helper for setting CanContentScroll property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.ScrollableContentViewer.GetCanContentScroll(Windows.UI.Xaml.DependencyObject)">
            <summary> 
            Helper for reading CanContentScroll property.
            </summary> 
        </member>
        <member name="P:Syncfusion.WinRT.Controls.ScrollableContentViewer.CanContentScroll">
            <summary>
            This property indicates whether the Content should handle scrolling if it can.
            A true value indicates Content should be allowed to scroll if it supports IScrollInfo. 
            A false value will always use the default physically scrolling handler.
            </summary> 
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection">
            <summary>
            A collection of entities for which distances need to be counted. The
            collection provides methods for mapping from a distance position to
            an entity and vice versa.<para/>
            For example, in a scrollable grid control you have rows with different heights. 
            Use this collection to determine the total height for all rows in the grid,
            quickly detemine the row index for a given point and also quickly determine
            the point at which a row is displayed. This also allows a mapping between the 
            scrollbars value and the rows or columns associated with that value.
            </summary>
            <remarks>
            DistanceCounterCollection uses a high-water mark technique for allocating
            objects up to the modified entry with the highest index. When you modify 
            the size of an entry the collection ensures that that objects are allocated 
            for all entries up to the given index. Entries that are after the modified 
            entry are assumed to have the DefaultSize and will not be allocated. 
            <para/>
            The best-case scenario is when all lines have the same DefaultSize. In such
            case the internal collection remains completely empty and will not cause 
            any overhead. This makes DistanceCounterCollection also an attractive solution
            for the scenario where all entries have the same size (e.g. a databound grid
            where all rows have same height).
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection">
            <summary>
            A collection of entities for which distances need to counted. The
            collection provides methods for mapping from a distance position to
            an entity and vice versa.<para/>
            For example, in a scrollable grid control you have rows with different heights. 
            Use this collection to determine the total height for all rows in the grid,
            quickly detemine the row index for a given point and also quickly determine
            the point at which a row is displayed. This also allows a mapping between the 
            scrollbars value and the rows or columns associated with that value.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or colums)
            </summary>
            <param name="from">The index for the first entity&gt;</param>
            <param name="to">The raw index for the last entity</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance
            for all entries in the specified range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.GetNextVisibleIndex(System.Int32)">
            <summary>
            Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Skip previous entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which
            the cumulated count of previous distances is greater or equal
            the specified cumulatedDistance. (e.g. return row index for
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The entity index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the
            entity at the specifiec index. (e.g. return pixel position
            for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>The cumulated count of previous distances for the
            entity at the specifiec index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.SetNestedDistances(System.Int32,Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold
            a mested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested collection or null.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point. 
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceeding a given point. If the point
            is in between entities the starting point of the matching entity
            is returned.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.ConnectWithParent(Syncfusion.WinRT.Collections.ITreeTableCounterSource)">
            <summary>
            Connects a nested distance collection with a parent.
            </summary>
            <param name="treeTableCounterSource">The nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Insert entities in the collection.
            </summary>
            <param name="insertAt">Insert position.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes enities from the collection.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.Count">
            <summary>
            The raw number of entities (lines, rows or columns).
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.DefaultDistance">
            <summary>
            The default distance (row height or column width) an entity spans 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.TotalDistance">
            <summary>
            The total distance all entities span (e.g. total height of all rows in grid)
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity.
            </summary>
            <param name="index">The index for the entity</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.#ctor">
            <summary>
            Constructs the class and initializes the internal tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or colums)
            </summary>
            <param name="from">The index for the first entity&gt;</param>
            <param name="to">The raw index for the last entity</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.SetNestedDistances(System.Int32,Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold
            a mested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested collection or null.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point. 
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceeding a given point. If the point
            is in between entities the starting point of the matching entity
            is returned.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.ConnectWithParent(Syncfusion.WinRT.Collections.ITreeTableCounterSource)">
            <summary>
            Connects a nested distance collection with a parent.
            </summary>
            <param name="nestedTreeTableVisibleCounterSource">The nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance
            for all entries in the specified range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.GetNextVisibleIndex(System.Int32)">
            <summary>
            Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Skip previous entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which
            the cumulated count of previous distances is greater or equal
            the specified cumulatedDistance. (e.g. return row index for
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The entity index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the
            entity at the specifiec index. (e.g. return pixel position
            for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>The cumulated count of previous distances for the
            entity at the specifiec index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Insert entities in the collection.
            </summary>
            <param name="insertAt">Insert position.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes enities from the collection.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.Count">
            <summary>
            The raw number of entities (lines, rows or columns).
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.DefaultDistance">
            <summary>
            The default distance (row height or column width) an entity spans 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.TotalDistance">
            <summary>
            The total distance all entities span (e.g. total height of all rows in grid)
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity.
            </summary>
            <param name="index">The index for the entity</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource">
            <summary>
            An object that maintains a collection of nested distances and wires
            it to a parent distance collection. The object is used by the 
            DistanceCounterCollection.SetNestedDistances method to associated
            the nested distances with an index in the parent collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.#ctor(Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection,Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource"/> class.
            </summary>
            <param name="parentDistances">The parent distances.</param>
            <param name="nestedDistances">The nested distances.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.GetCounter">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Collections.TreeTableVisibleCounter"/> object with counters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.Entry">
            <summary>
            Gets or sets the counter entry.
            </summary>
            <value>The entry.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.ParentDistances">
            <summary>
            Gets the parent distances.
            </summary>
            <value>The parent distances.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterCollection.NestedTreeTableVisibleCounterSource.NestedDistances">
            <summary>
            Gets the nested distances.
            </summary>
            <value>The nested distances.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset">
            <summary>
            A collection of entities that is shared with a parent collection for which distances
            need to counted. The collection only is a subset for a specific range in
            the parent distance collection.
            <para/>
            When you change the size of an element in this collection the change will
            also be reflected in the parent collection and vice versa.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.IDistancesHost">
            <summary>
            An object that implements the <see cref="P:Syncfusion.WinRT.Controls.Scroll.IDistancesHost.Distances"/> property.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IDistancesHost.Distances">
            <summary>
            Gets or sets the distances.
            </summary>
            <value>The distances.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.#ctor(Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset"/> class.
            </summary>
            <param name="trackedParentCollection">The parent collection for which a subset is "tracked".</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.Clear">
            <summary>
            Restores the distances in the parent collection for this subset to their default distance.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or colums)
            </summary>
            <param name="from">The index for the first entity&gt;</param>
            <param name="to">The raw index for the last entity</param>
            <param name="distance"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance
            for all entries in the specified range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.GetNextVisibleIndex(System.Int32)">
            <summary>
            Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Skip previous entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which
            the cumulated count of previous distances is greater or equal
            the specified cumulatedDistance. (e.g. return row index for
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The entity index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the
            entity at the specifiec index. (e.g. return pixel position
            for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>
            The cumulated count of previous distances for the
            entity at the specifiec index.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.SetNestedDistances(System.Int32,Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold
            a mested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested collection or null.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceeding a given point. If the point
            is in between entities the starting point of the matching entity
            is returned.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.Syncfusion#WinRT#Controls#Scroll#IDistanceCounterCollection#ConnectWithParent(Syncfusion.WinRT.Collections.ITreeTableCounterSource)">
            <summary>
            This method is not supported for DistanceCounterSubset.
            </summary>
            <param name="treeTableCounterSource">The nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.Insert(System.Int32,System.Int32)">
            <summary>
            Insert entities in the collection.
            </summary>
            <param name="insertAt">Insert position.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.Remove(System.Int32,System.Int32)">
            <summary>
            Removes enities from the collection.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.Start">
            <summary>
            Gets or sets the starting index of this collection in the parent collection.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.End">
            <summary>
            Gets or sets the ending index of this collection in the parent collection.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.Count">
            <summary>
            The raw number of entities (lines, rows or columns).
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.DefaultDistance">
            <summary>
            The default distance (row height or column width) an entity spans
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.TotalDistance">
            <summary>
            The total distance all entities span (e.g. total height of all rows in grid)
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceCounterSubset.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection">
            <summary>
            A collection of entities for which distances need to be counted. The
            collection provides methods for mapping from a distance position to
            an entity and vice versa.<para/>
            For example, in a scrollable grid control you have rows with different heights. 
            Use this collection to determine the total height for all rows in the grid,
            quickly detemine the row index for a given point and also quickly determine
            the point at which a row is displayed. This also allows a mapping between the 
            scrollbars value and the rows or columns associated with that value.
            </summary>
            <remarks>
            DistanceCounterCollection internally uses ranges for allocating
            objects up to the modified entry with the highest index. When you modify 
            the size of an entry the collection ensures that that objects are allocated 
            for all entries up to the given index. Entries that are after the modified 
            entry are assumed to have the DefaultSize and will not be allocated. 
            <para/>
            Ranges will only be allocated for those lines that have different sizes.
            If you do for example only change the size of line 100 to be 10 then the collection
            will internally create two ranges: Range 1 from 0-99 with DefaultSize and
            Range 2 from 100-100 with size 10. This approach makes this collection
            work very efficient with grid scenarios where often many rows have
            the same height.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.Empty">
            <summary>
            Returns an empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.#ctor(System.Double)">
            <summary>
            Constructs the class and initializes the internal tree.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.SetNestedDistances(System.Int32,Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection)">
            <summary>
            Assigns a collection with nested entities to an item.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedCollection">The nested collection.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.GetNestedDistances(System.Int32)">
            <summary>
            Gets the nested entities at a given index. If the index does not hold
            a mested distances collection the method returns null.
            </summary>
            <param name="index">The index.</param>
            <returns>The nested collection or null.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.GetNextScrollValue(System.Double)">
            <summary>
            Gets the distance position of the next entity after a given point. 
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.GetPreviousScrollValue(System.Double)">
            <summary>
            Gets the distance position of the entity preceeding a given point. If the point
            is in between entities the starting point of the matching entity
            is returned.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance position.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.GetAlignedScrollValue(System.Double)">
            <summary>
            Gets the aligned scroll value which is the starting point of the entity
            found at the given distance position.
            </summary>
            <param name="point">The point.</param>
            <returns>The starting point of the entity.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.ConnectWithParent(Syncfusion.WinRT.Collections.ITreeTableCounterSource)">
            <summary>
            Connects a nested distance collection with a parent.
            </summary>
            <param name="treeTableCounterSource">The nested tree table visible counter source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.GetNextVisibleIndex(System.Int32)">
            <summary>
            Skip subsequent entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.GetPreviousVisibleIndex(System.Int32)">
            <summary>
            Skip previous entities for which the distance is 0.0 and return the next entity.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.IndexOfCumulatedDistance(System.Double)">
            <summary>
            Gets the index of an entity in this collection for which
            the cumulated count of previous distances is greater or equal
            the specified cumulatedDistance. (e.g. return row index for
            pixel position).
            </summary>
            <param name="cumulatedDistance">The cumulated count of previous distances.</param>
            <returns>The entity index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.GetCumulatedDistanceAt(System.Int32)">
            <summary>
            Gets the cumulated count of previous distances for the
            entity at the specifiec index. (e.g. return pixel position
            for a row index).
            </summary>
            <param name="index">The entity index.</param>
            <returns>The cumulated count of previous distances for the
            entity at the specifiec index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Hides a specified range of entities (lines, rows or colums)
            </summary>
            <param name="from">The index for the first entity&gt;</param>
            <param name="to">The raw index for the last entity</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.ResetRange(System.Int32,System.Int32)">
            <summary>
            Resets the range by restoring the default distance
            for all entries in the specified range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Insert entities in the collection.
            </summary>
            <param name="insertAt">Insert position.</param>
            <param name="count">The number of entities to be inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.Insert(System.Int32,System.Int32,System.Double)">
            <summary>
            Insert entities in the collection.
            </summary>
            <param name="insertAt">Insert position.</param>
            <param name="count">The number of entities to be inserted.</param>
            <param name="distance">The distance to be set.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes enities from the collection.
            </summary>
            <param name="removeAt">Index of the first entity to be removed.</param>
            <param name="count">The number of entities to be removed.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.Count">
            <summary>
            The raw number of entities (lines, rows or columns).
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.DefaultDistance">
            <summary>
            The default distance (row height or column width) an entity spans 
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.TotalDistance">
            <summary>
            The total distance all entities span (e.g. total height of all rows in grid)
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the distance for an entity.
            </summary>
            <param name="index">The index for the entity</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource">
            <summary>
            An object that maintains a collection of nested distances and wires
            it to a parent distance collection. The object is used by the 
            DistanceCounterCollection.SetNestedDistances method to associated
            the nested distances with an index in the parent collection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterSource">
            <summary>
            An object that counts objects that are marked "Visible". It implements
            the ITreeTableCounterSource interface and creates a <see cref="T:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterSource.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes the object with visible count.
            </summary>
            <param name="visibleCount">The visible count.</param>
            <param name="lineCount">The line count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterSource.ToString">
            <summary>
            Returns a string describing the state of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterSource.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterSource.SingleLineDistance">
            <summary>
            Gets or sets the distance of a single line.
            </summary>
            <value>The single line distance.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.#ctor(Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection,Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection,Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource"/> class.
            </summary>
            <param name="parentDistances">The parent distances.</param>
            <param name="nestedDistances">The nested distances.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.GetCounter">
            <summary>
            Returns the <see cref="T:Syncfusion.WinRT.Collections.TreeTableVisibleCounter"/> object with counters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.Entry">
            <summary>
            Gets or sets the counter entry.
            </summary>
            <value>The entry.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.ParentDistances">
            <summary>
            Gets the parent distances.
            </summary>
            <value>The parent distances.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceRangeCounterCollection.NestedDistanceCounterCollectionSource.NestedDistances">
            <summary>
            Gets the nested distances.
            </summary>
            <value>The nested distances.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterKind">
            <summary>
            A collection of integers used to specify various counter kinds.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterKind.CountAll">
            <summary>
            All counters.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterKind.Distance">
            <summary>
            Visible Counter.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterKind.Lines">
            <summary>
            Line Counter.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter">
            <summary>
            A counter that counts objects that are marked "Visible".
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.Empty">
            <summary>
            Returns an empty DistanceLineCounter that represents zero visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a <see cref="T:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter"/> with a pecified number of visible elements.
            </summary>
            <param name="distance">The visible count.</param>
            <param name="lineCount">The line count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.GetValue(System.Int32)">
            <summary>
            Returns the integer value of the counter. A cookie specifies
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.Syncfusion#WinRT#Collections#ITreeTableCounter#Combine(Syncfusion.WinRT.Collections.ITreeTableCounter,System.Int32)">
            <summary>
            Combines one tree obkect with another and returns the new object.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.Combine(Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter,System.Int32)">
            <summary>
            Combines the counter values of this counter object with the values of another counter object
            and returns a new counter object.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.Compare(Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            	<c>true</c> if the specified cookie is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.LineCount">
            <summary>
            Gets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.Distance">
            <summary>
            Gets the distance.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounter.Kind">
            <summary>
            The Counter Kind.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.DistanceLineCounterTree">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost">
            <summary>
            A collection that manages lines with varying height and hidden state. 
            It has properties for header and footer lines, total line count, default
            size of a line and also lets you add nested collections. Methods
            are provided for changing the values and getting the total extent.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost">
            <summary>
            A collection that manages lines with varying height and hidden state. 
            It has properties for header and footer lines, total line count, default
            size of a line and also lets you add nested collections.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.GetDefaultLineSize">
            <summary>
            Returns the default line size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.GetLineCount">
            <summary>
            Returns the line count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.GetSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size.
            </summary>
            <param name="index">The index.</param>
            <param name="repeatValueCount">The number of subsequent values with same size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.GetHeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.GetFooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.GetHidden(System.Int32,System.Int32@)">
            <summary>
            Gets the hidden state for a line.
            </summary>
            <param name="index">The index.</param>
            <param name="repeatValueCount">The number of subsequent lines with same state.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.InitializeScrollAxis(Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase)">
            <summary>
            Initializes the scroll axis.
            </summary>
            <param name="scrollAxis">The scroll axis.</param>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.LineSizeChanged">
            <summary>
            Occurs when a lines size was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.LineHiddenChanged">
            <summary>
            Occurs when a lines hidden state changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.DefaultLineSizeChanged">
            <summary>
            Occurs when the default line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.LineCountChanged">
            <summary>
            Occurs when the line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.HeaderLineCountChanged">
            <summary>
            Occurs when the header line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.FooterLineCountChanged">
            <summary>
            Occurs when the footer line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.LinesInserted">
            <summary>
            Occurs when lines were inserted.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost.LinesRemoved">
            <summary>
            Occurs when lines were removed.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.GetNestedLines(System.Int32)">
            <summary>
            Gets the nested lines.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.SetNestedLines(System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)">
            <summary>
            Sets the nested lines.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedLines">The nested lines.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.InsertLines(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)">
            <summary>
            Insert a number of lines.
            </summary>
            <param name="insertAtLine">The index of the first line to insert.</param>
            <param name="count">The count.</param>
            <param name="moveLines">A container with saved state from a preceeding <see cref="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.RemoveLines(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)"/> call when lines should be moved. When it is null empty lines with default size are inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.RemoveLines(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)">
            <summary>
            Removes a number of lines.
            </summary>
            <param name="removeAtLine">The index of the first line to be removed.</param>
            <param name="count">The count.</param>
            <param name="moveLines">A container to save state for a subsequent <see cref="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.InsertLines(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)"/> call when lines should be moved.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.CreateMoveLines">
            <summary>
            Creates the object which holds temporary state when moving lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.SetHidden(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state for a range of lines.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="hide">if set to <c>true</c> hide the lines.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the line size for a range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.TotalExtent">
            <summary>
            Gets the total extent which is the total of all line sizes. Note: This propert only 
            works if the DistanceCollection has been setup for pixel scrolling; otherwise it returns
            double.NaN.
            </summary>
            <value>The total extent or double.NaN.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.SupportsNestedLines">
            <summary>
            Gets whether the host supports nesting.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.SupportsInsertRemove">
            <summary>
            Gets whether the host supports inserting and removing lines.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.FooterLineCount">
            <summary>
            Gets or sets the footer line count.
            </summary>
            <value>The footer line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.HeaderLineCount">
            <summary>
            Gets or sets the header line count.
            </summary>
            <value>The header line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost.Item(System.Int32)">
            <summary>
            Gets or sets the line size at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.EmptyLineSizeHost">
            <summary>
            Implements the <see cref="T:Syncfusion.WinRT.Controls.Scroll.ILineSizeHost"/> interface for an empty collection
            that cannot be modified.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.EmptyLineSizeHost.Empty">
            <summary>
            Returns the empty collection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.INestedDistancesHost">
            <summary>
            An object that implements the <see cref="M:Syncfusion.WinRT.Controls.Scroll.INestedDistancesHost.GetDistances(System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.INestedDistancesHost.GetDistances(System.Int32)">
            <summary>
            Gets the nested distances if a line contains a nested lines collection; null otherwise.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis">
            <summary>
            The LineScrollAxis implements scrolling only for whole lines. You can
            hide lines and LineScrollAxis provides a mapping mechanism between the
            index of the line and the scroll index and vice versa. Hidden lines
            are not be counted when the scroll index is determined for a line.
            <para/>
            The LineScrollAxis does not support scrolling in between lines (pixel scrolling).
            This can be of advantage if you have a large number of lines with varying
            line sizes. In such case the LineScrollAxis does not need to maintain
            a collection that tracks line sizes whereas the <see cref="T:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis"/> does need to.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase">
            <summary>
            ScrollAxisBase is an abstract base class and implements scrolling
            logic for both horizontal and vertical scrolling in a <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl"/>.
            Logical units in the ScrollAxisBase are called "Lines". With the 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> a line representes rows in a grid 
            and with <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> a line represents columns in a grid.
            <para/>
            ScrollAxisBase has support for frozen header and footer lines, maintaining a
            scroll position and updating and listening to scrollbars. It also maintains
            a collection of <see cref="T:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo"/> items for all the lines that are
            visible in the viewing area. ScrollAxisBase wires itself with a 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollLinesHost"/> and reacts to changes in line count,
            line sizes, hidden state and default line size.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.#ctor(Syncfusion.WinRT.Controls.Scroll.IScrollBar,Syncfusion.WinRT.Controls.Scroll.ILineSizeHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase"/> class.
            </summary>
            <param name="sb">The sb.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.UpdateScrollBar">
            <summary>
            Updates the scroll bar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetLineHiddenState(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state of the lines.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="hide">if set to <c>true</c> [hide].</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetLineSize(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the size of the lines.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetLineSize(System.Int32,System.Int32@)">
            <summary>
            Gets size from ScrollLinesHost or if the line is being resized then get temporary value
            previously set with <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetLineResize(System.Int32,System.Double)"/>
            </summary>
            <param name="index">The index.</param>
            <param name="repeatSizeCount">The number of subsequent values with same size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetLineSize(System.Int32)">
            <summary>
            Gets the size of the line.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetLineResize(System.Int32,System.Double)">
            <summary>
            Set temporary value for a line size during a resize operation without commiting
            value to SrollLinesHost.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ResetLineResize">
            <summary>
            Resets temporary value for line size after a resize operation 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetScrollLinesHostSize(System.Int32,System.Int32@)">
            <summary>
            Gets size from ScrollLinesHost or if the line is being resized then get temporary value
            previously set with <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetLineResize(System.Int32,System.Double)"/>. If size is negative then <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.DefaultLineSize"/> is returned.
            </summary>
            <param name="index">The index.</param>
            <param name="repeatSizeCount">The number of subsequent values with same size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.OnLinesRemoved(System.Int32,System.Int32)">
            <summary>
            Called when lines were removed in ScrollLinesHost.
            </summary>
            <param name="removeAt">Index of the first removed line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.OnLinesInserted(System.Int32,System.Int32)">
            <summary>
            Called when lines were inserted in ScrollLinesHost.
            </summary>
            <param name="insertAt">Index of the first inserted line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetHeaderLineCount(System.Int32)">
            <summary>
            Sets the header line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetFooterLineCount(System.Int32)">
            <summary>
            Sets the footer line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetScrollLineIndex(System.Int32@,System.Double@)">
            <summary>
            Gets the index of the scroll line.
            </summary>
            <param name="scrollLindeIndex">Index of the scroll linde.</param>
            <param name="scrollLineOffset">The scroll line offset.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.SetScrollLineIndex(System.Int32,System.Double)">
            <summary>
            Sets the index of the scroll line.
            </summary>
            <param name="scrollLindeIndex">Index of the scroll linde.</param>
            <param name="scrollLineOffset">The scroll line offset.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetPreviousScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the previous scroll line.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetNextScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the next scroll line.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollToNextPage">
            <summary>
            Scrolls to next page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollToPreviousPage">
            <summary>
            Scrolls to previous page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollToNextLine">
            <summary>
            Scrolls to next line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollToPreviousLine">
            <summary>
            Scrolls to previous line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.AlignScrollLine">
            <summary>
            Aligns the scroll line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollInView(System.Int32,System.Double)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <param name="lineSize">Size of the line.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollInView(System.Int32)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">Index of the line.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.MouseWheel(System.Int32)">
            <summary>
            This method is called in response to a MouseWheel event.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.MarkDirty">
            <summary>
            Force recalculation of visible lines and scrollbar properties
            next time GetVisibleLines is called.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleLines">
            <summary>
            Gets the visible lines collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ResetVisibleLines">
            <summary>
            Resets the visible lines collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.VisiblePointToLineIndex(System.Double,System.Boolean)">
            <summary>
            Gets the visible line index for a point in the display.
            </summary>
            <param name="point">The point.</param>
            <param name="allowOutsideLines">Set this true if point can be below corner of last line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.VisiblePointToLineIndex(System.Double)">
            <summary>
            Gets the visible line index for a point in the display.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleLineAtPoint(System.Double)">
            <summary>
            Gets the visibles line for a point in the display.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleLineAtLineIndex(System.Int32)">
            <summary>
            Gets the visibles line that displays the line with the given absolut line index.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleLineAtLineIndex(System.Int32,System.Boolean)">
            <summary>
            Gets the visibles line that displays the line with the given absolut line index. If the
            line is outside the view and you specify allowCreateEmptyLineIfNotVisible then
            the method will create an empty line and initializes its LineIndex and LineSize.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <param name="allowCreateEmptyLineIfNotVisible">if set to <c>true</c> and if the
            line is outside the view then
            the method will create an empty line and initializes its LineIndex and LineSize.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.IsLineVisible(System.Int32)">
            <summary>
            Determines if the line with the given absolut line index is visible.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.AnyVisibleLines(System.Int32,System.Int32)">
            <summary>
            Determines if any of the lines with the given absolut line index are visible.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetOriginAndCornerOfBodyRegion(System.Double@,System.Double@)">
            <summary>
            Gets the origin and corner points of body region.
            </summary>
            <param name="origin">The origin.</param>
            <param name="corner">The corner.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.AdjustFooterExtentToAvoidGap(System.Double,System.Double)">
            <summary>
            Adjusts the footer extent to avoid gap between last visible line of body region
            and first line of footer in case the view is larger than the height/width of all
            lines.
            </summary>
            <param name="footerSize">Size of the footer.</param>
            <param name="arrangeSize">Size of the arrange.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleSection(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Return indexes for VisibleLinesCollection for area identified by section.
            </summary>
            <param name="section">0 - Header, 1 - Body, 2 - Footer</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleLinesRange(System.Int32)">
            <summary>
            Returns the first and last VisibleLine.LineIndex for area identified by section.
            </summary>
            <param name="section">0 - Header, 1 - Body, 2 - Footer</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleSection(Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion,System.Int32@,System.Int32@)">
            <summary>
            Return indexes for VisibleLinesCollection for area identified by section.
            </summary>
            <param name="section">0 - Header, 1 - Body, 2 - Footer</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetBorderRangeClipPoints(Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo)">
            <summary>
            Returns the clipping area for the specified visible lines. Only if <see cref="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsClippedOrigin"/> is true for
            first line or if <see cref="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsClippedCorner"/> is true for last line then the area will be clipped. Otherwise
            the whole area from 0 to <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RenderSize"/> is returned.
            </summary>
            <param name="firstLine">The first line.</param>
            <param name="lastLine">The last line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetLineNearCorner(System.Double,System.Double)">
            <summary>
            Gets the line near the given corner point. Use this method for hit-testing row or 
            column lines for resizing cells.
            </summary>
            <param name="point">The point.</param>
            <param name="hitTestPrecision">The hit test precision in points.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetLineNearCorner(System.Double,System.Double,Syncfusion.WinRT.Controls.Scroll.CornerSide)">
            <summary>
            Gets the line near the given corner point. Use this method for hit-testing row or 
            column lines for resizing cells.
            </summary>
            <param name="point">The point.</param>
            <param name="hitTestPrecision">The hit test precision in points.</param>
            <param name="side">The hit test corner.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetLinesAndVisibility(System.Int32,System.Int32,System.Boolean,System.Boolean@,System.Boolean@,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo@,Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo@)">
            <summary>
            Returns points for given absolut line indexes
            </summary>
            <param name="firstIndex">The first index.</param>
            <param name="lastIndex">The last index.</param>
            <param name="allowAdjust">if set to <c>true</c> return the first visible line if firstIndex
            is above viewable area or return last visible line if lastIndex is after viewable area
            (works also for header and footer).
            </param>
            <param name="firstVisible">if set to <c>true</c> indicates the line with index 
            firstIndex is visible in viewable area.</param>
            <param name="lastVisible">if set to <c>true</c> indicates the line with index 
            lastIndex is visible in viewable area..</param>
            <param name="firstLine">The first line or null if allowAdjust is false and line 
            is not in viewable area.</param>
            <param name="lastLine">The last line or null if allowAdjust is false and line 
            is not in viewable area.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetVisibleLinesClipPoints(System.Int32,System.Int32)">
            <summary>
            Gets the visible lines clip points (clipped origin of first line and clipped 
            corner of last line). If both lines are above or below viewable area an empty 
            span is returned. If lines are both above and below viewable are then the 
            range for all viewable lines is returned.
            </summary>
            <param name="firstIndex">The first index.</param>
            <param name="lastIndex">The last index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetClipPoints(Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion)">
            <summary>
            Gets the clip points for a region.
            </summary>
            <param name="region">The region.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RangeToRegionPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an array with 3 ranges indicating the first and last point for the given lines in each region.
            </summary>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <c>true</c> allow estimates for out of view lines.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RangeToPoints(Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the first and last point for the given lines in a region.
            </summary>
            <param name="region">The region.</param>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <c>true</c> allow estimates for out of view lines.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RaiseChanged">
            <summary>
            Raises the changed event.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetNextPage(System.Int32)">
            <summary>
            Determines the line one page down from the given line.
            </summary>
            <param name="lineIndex">The current line.</param>
            <returns>The line index of the line one page down</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.GetPreviousPage(System.Int32)">
            <summary>
            Determines the line one page up from the given line.
            </summary>
            <param name="lineIndex">The current line.</param>
            <returns>The line index of the line one page up</returns>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.Changed">
            <summary>
            Occurs when a property was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.IsPixelScroll">
            <summary>
            Gets a value indicating whether this axis supports pixel scrolling.
            </summary>
            <value>
            	<c>true</c> if this instance supports pixel scrolling; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.StartLineIndex">
            <summary>
            Gets or sets the index of the first line in a parent axis. This is used for shared 
            or nested scroll axis (e.g. a nested grid with shared axis in a covered cell).
            </summary>
            <value>The index of the first line..</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollBar">
            <summary>
            Gets the scroll bar state.
            </summary>
            <value>The scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollLinesHost">
            <summary>
            Gets the scroll lines host.
            </summary>
            <value>The scroll lines host.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RenderSize">
            <summary>
            Gets or sets the size (either height or width) of the parent control.
            </summary>
            <value>The size of the the parent control.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollPageSize">
            <summary>
            Gets the size (either height or width) of the parent control excluding the 
            area occupied by Header and Footer. This size is used for scrolling down
            or up one page.
            </summary>
            <value>The size of the the parent control.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.Clip">
            <summary>
            Gets or sets the clipping region. Depending on the orientation of
            the axis, this is either the left and right or top and bottom
            values of the clipping rectangle in the parent control.
            </summary>
            <value>The clip.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ViewSize">
            <summary>
            Gets the view size of the (either height or width) of the parent control. Normally
            the ViewSize is the same as <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RenderSize"/>. Only if the parent control
            has more space then needed to display all lines, the ViewSize will be less. In 
            such case the ViewSize is the total height for all lines.
            </summary>
            <value>The size of the view.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.HeaderExtent">
            <summary>
            Gets the header extent. This is total height (or width) of the header lines.
            </summary>
            <value>The header extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.HeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <value>The header line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.FooterExtent">
            <summary>
            Gets the footer extent. This is total height (or width) of the footer lines.
            </summary>
            <value>The footer extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.FooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <value>The footer line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ScrollLineIndex">
            <summary>
            Gets or sets the index of the first visible Line in the Body region.
            </summary>
            <value>The index of the scroll line.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.ViewCorner">
            <summary>
            Gets the view corner which is the point after the last visible line
            of the body region.
            </summary>
            <value>The view corner.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.IsFooterVisible">
            <summary>
            Gets a value indicating whether footer lines are visible.
            </summary>
            <value>
            	<c>true</c> if footer lines are visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.FirstFooterLineIndex">
            <summary>
            Gets the index of the first footer line.
            </summary>
            <value>The index of the first footer line.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.LastBodyVisibleLine">
            <summary>
            Gets the last visible line.
            </summary>
            <value>The last visible line.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.LastBodyVisibleLineIndex">
            <summary>
            Gets the index of the last visible line.
            </summary>
            <value>The index of the last visible line.</value>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.distances">
            <summary>
            distances holds the visible lines. Each visible line
            has a distance of 1.0. Hidden lines have a distance of 0.0.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.#ctor(Syncfusion.WinRT.Controls.Scroll.IScrollBar,Syncfusion.WinRT.Controls.Scroll.ILineSizeHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis"/> class.
            </summary>
            <param name="sb">The state of the scrollbar.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.UpdateDistances">
            <summary>
            Updates the linesize for visible lines to be "1" for LineScrollAxis
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.SetHeaderLineCount(System.Int32)">
            <summary>
            Sets the header line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.SetFooterLineCount(System.Int32)">
            <summary>
            Sets the footer line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.GetScrollLineIndex(System.Int32@,System.Double@)">
            <summary>
            Gets the index of the scroll line.
            </summary>
            <param name="scrollLindeIndex">Index of the scroll linde.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.SetScrollLineIndex(System.Int32,System.Double)">
            <summary>
            Sets the index of the scroll line.
            </summary>
            <param name="scrollLindeIndex">Index of the scroll linde.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.SetLineHiddenState(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state of the lines.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="hide">if set to <c>true</c> [hide].</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.SetLineSize(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the size of the lines. Will do nothing for a <see cref="T:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis"/>
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.UpdateScrollBar">
            <summary>
            Initialize scrollbar properties from line count in header, footer and body.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.GetPreviousScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the previous scroll line.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.GetNextScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the next scroll line.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.ScrollToNextPage">
            <summary>
            Scrolls to next page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.ScrollToPreviousPage">
            <summary>
            Scrolls to previous page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.ScrollToNextLine">
            <summary>
            Scrolls to next line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.ScrollToPreviousLine">
            <summary>
            Scrolls to previous line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.AlignScrollLine">
            <summary>
            Aligns the scroll line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.RangeToRegionPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an array with 3 ranges indicating the first and last point for the given lines in each region.
            </summary>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <c>true</c> allow estimates for out of view lines.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.RangeToPoints(Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the first and last point for the given lines in a region.
            </summary>
            <param name="region">The region.</param>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <c>true</c> allow estimates for out of view lines.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.MouseWheel(System.Int32)">
            <summary>
            This method is called in response to a MouseWheel event.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.ScrollInView(System.Int32,System.Double)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <param name="lineSize"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.OnLinesRemoved(System.Int32,System.Int32)">
            <summary>
            Called when lines were removed in ScrollLinesHost.
            </summary>
            <param name="removeAt">Index of the first removed line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.OnLinesInserted(System.Int32,System.Int32)">
            <summary>
            Called when lines were inserted in ScrollLinesHost.
            </summary>
            <param name="insertAt">Index of the first inserted line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.HeaderExtent">
            <summary>
            Gets the header extent. This is total height (or width) of the header lines.
            </summary>
            <value>The header extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.FooterExtent">
            <summary>
            Gets the footer extent. This is total height (or width) of the footer lines.
            </summary>
            <value>The footer extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.ScrollLineIndex">
            <summary>
            Gets or sets the index of the first visible Line in the Body region.
            </summary>
            <value>The index of the scroll line.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.ViewSize">
            <summary>
            Gets the view size of the (either height or width) of the parent control. Normally
            the ViewSize is the same as <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RenderSize"/>. Only if the parent control
            has more space then needed to display all lines, the ViewSize will be less. In
            such case the ViewSize is the total height for all lines.
            </summary>
            <value>The size of the view.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineScrollAxis.IsPixelScroll">
            <summary>
            Gets a value indicating whether this axis supports pixel scrolling.
            </summary>
            <value>
            	<c>true</c> if this instance supports pixel scrolling; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection">
            <summary>
            A collection that manages lines with varying height and hidden state. 
            It has properties for header and footer lines, total line count, default
            size of a line and also lets you add nested collections.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.Empty">
            <summary>
            Returns an empty collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.SetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the line size for a range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.SetHidden(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state for a range of lines.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="hide">if set to <c>true</c> hide the lines.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetNestedLines(System.Int32)">
            <summary>
            Gets the nested lines.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.SetNestedLines(System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)">
            <summary>
            Sets the nested lines. 
            </summary>
            <param name="index">The index.</param>
            <param name="nestedLines">The nested lines. If parameter is null the line will be converted to a normal (not nested) line with default line size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.ResetNestedLines(System.Int32)">
            <summary>
            Reset the line to become a normal (not nested) line with default line size.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetDefaultLineSize">
            <summary>
            Returns the default line size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetLineCount">
            <summary>
            Returns the line count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetSize(System.Int32,System.Int32@)">
            <summary>
            Gets the size.
            </summary>
            <param name="index">The index.</param>
            <param name="repeatValueCount">The number of subsequent values with same size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetHeaderLineCount">
            <summary>
            Gets the header line count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetFooterLineCount">
            <summary>
            Gets the footer line count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetHidden(System.Int32,System.Int32@)">
            <summary>
            Gets the hidden state for a line.
            </summary>
            <param name="index">The index.</param>
            <param name="repeatValueCount">The number of subsequent lines with same state.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.InitializeScrollAxis(Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase)">
            <summary>
            Initializes the scroll axis.
            </summary>
            <param name="scrollAxis">The scroll axis.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.GetDistances(System.Int32)">
            <summary>
            Gets the nested distances if a line contains a nested lines collection; null otherwise.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.InsertLines(System.Int32,System.Int32)">
            <summary>
            Inserts lines in the collection and raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LinesInserted"/> event.
            </summary>
            <param name="insertAtLine">The index of the first line to insert.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.InsertLines(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)">
            <summary>
            Inserts lines in the collection and raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LinesInserted"/> event.
            </summary>
            <param name="insertAtLine">The index of the first line to insert.</param>
            <param name="count">The count.</param>
            <param name="movelines">A container with saved state from a preceeding <see cref="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.RemoveLines(System.Int32,System.Int32)"/> call when lines should be moved. When it is null empty lines with default size are inserted.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.RemoveLines(System.Int32,System.Int32)">
            <summary>
            Removes lines from the collection and raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LinesRemoved"/> event.
            </summary>
            <param name="removeAtLine">The index of the first line to be removed.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.RemoveLines(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.IEditableLineSizeHost)">
            <summary>
            Removes lines from the collection and raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LinesRemoved"/> event.
            </summary>
            <param name="removeAtLine">The index of the first line to be removed.</param>
            <param name="count">The count.</param>
            <param name="movelines">A container to save state for a subsequent <see cref="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.InsertLines(System.Int32,System.Int32)"/> call when lines should be moved.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.CreateMoveLines">
            <summary>
            Creates the object which holds temporary state when moving lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.SetHiddenInterval(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Initialize the collection with a pattern of hidden lines. 
            </summary>
            <param name="start">The index of the first line where the pattern should be
            started to be applied.</param>
            <param name="lineCount">The pattern is applied up to until the lineCount given. 
            The last initialized line is at index lineCount-1.</param>
            <param name="values">The pattern that is applied repeatedly.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.SetHiddenState(System.Boolean[])">
            <summary>
            Set the hidden state all at once in one operation. Use this method if you want to change the hidden
            state of many rows at once since this will be much faster instead of individually setting rows hidden.
            </summary>
            <param name="values">The new hidden state for rows. </param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.TotalExtent">
            <summary>
            Gets the total extent which is the total of all line sizes. Note: This propert only 
            works if the DistanceCollection has been setup for pixel scrolling; otherwise it returns
            double.NaN.
            </summary>
            <value>The total extent or double.NaN.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.HeaderLineCount">
            <summary>
            Gets or sets the header line count.
            </summary>
            <value>The header line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.FooterLineCount">
            <summary>
            Gets or sets the footer line count.
            </summary>
            <value>The footer line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the line size at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.SupportsNestedLines">
            <summary>
            Gets whether the host supports nesting.
            </summary>
            <value></value>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LineSizeChanged">
            <summary>
            Occurs when a lines size was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LineHiddenChanged">
            <summary>
            Occurs when a lines hidden state changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.DefaultLineSizeChanged">
            <summary>
            Occurs when the default line size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LineCountChanged">
            <summary>
            Occurs when the line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.HeaderLineCountChanged">
            <summary>
            Occurs when the header line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.FooterLineCountChanged">
            <summary>
            Occurs when the footer line count was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LinesInserted">
            <summary>
            Occurs when lines were inserted.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.LinesRemoved">
            <summary>
            Occurs when lines were removed.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.Distances">
            <summary>
            Gets or sets the distances.
            </summary>
            <value>The distances.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LineSizeCollection.SupportsInsertRemove">
            <summary>
            Gets whether the host supports inserting and removing lines.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.EmptyLineSizeCollection">
            <summary>
            An empty LineSizeCollection.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.EmptyLineSizeCollection.Empty">
            <summary>
            Returns an empty collection.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis">
            <summary>
            PixelScrollAxis implements scrolling logic for both horizontal and vertical 
            scrolling in a <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl"/>.
            Logical units in the ScrollAxisBase are called "Lines". With the 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> a line representes rows in a grid 
            and with <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> a line represents columns in a grid.
            <para/>
            PixelScrollAxis supports pixel scrolling and calculates the total height or
            width of all lines.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.distances">
            <summary>
            Distances holds the line sizes. Hidden lines
            have a distance of 0.0. 
            </summary>        
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.#ctor(Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase,Syncfusion.WinRT.Controls.Scroll.IScrollBar,Syncfusion.WinRT.Controls.Scroll.ILineSizeHost,Syncfusion.WinRT.Controls.Scroll.IDistancesHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis"/> class which 
            is nested as a single line in a parent scroll axis.
            </summary>
            <param name="parentScrollAxis">The parent scroll axis.</param>
            <param name="sb">The scrollbar state.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
            <param name="distancesHost">The distances host.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.#ctor(Syncfusion.WinRT.Controls.Scroll.IScrollBar,Syncfusion.WinRT.Controls.Scroll.ILineSizeHost,Syncfusion.WinRT.Controls.Scroll.IDistancesHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis"/> class.
            </summary>
            <param name="sb">The scrollbar state.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
            <param name="distancesHost">The distances host.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.SetLineHiddenState(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the hidden state of the lines.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="hide">if set to <c>true</c> hide lines.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.SetLineSize(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the size of the lines.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.SetLineResize(System.Int32,System.Double)">
            <summary>
            Set temporary value for a line size during a resize operation without commiting
            value to SrollLinesHost.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ResetLineResize">
            <summary>
            Resets temporary value for line size after a resize operation
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.SetHeaderLineCount(System.Int32)">
            <summary>
            Sets the header line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.SetFooterLineCount(System.Int32)">
            <summary>
            Sets the footer line count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.UpdateScrollBar">
            <summary>
            Initialize scrollbar properties from header and footer size and total size of lines in body.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.GetScrollLineIndex(System.Int32@,System.Double@)">
            <summary>
            Gets the index of the scroll line.
            </summary>
            <param name="scrollLindeIndex">Index of the scroll linde.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.SetScrollLineIndex(System.Int32,System.Double)">
            <summary>
            Sets the index of the scroll line.
            </summary>
            <param name="scrollLindeIndex">Index of the scroll linde.</param>
            <param name="scrollLineDelta">The scroll line delta.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.GetPreviousScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the previous scroll line.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.GetNextScrollLineIndex(System.Int32)">
            <summary>
            Gets the index of the next scroll line.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ScrollToNextPage">
            <summary>
            Scrolls to next page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ScrollToPreviousPage">
            <summary>
            Scrolls to previous page.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ScrollToNextLine">
            <summary>
            Scrolls to next line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ScrollToPreviousLine">
            <summary>
            Scrolls to previous line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.AlignScrollLine">
            <summary>
            Aligns the scroll line.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.SetNestedLines(System.Int32,Syncfusion.WinRT.Controls.Scroll.IDistanceCounterCollection)">
            <summary>
            Associates a collection of nested lines with a line in this axis.
            </summary>
            <param name="index">The index.</param>
            <param name="nestedLines">The nested lines.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.RangeToRegionPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an array with 3 ranges indicating the first and last point for the given lines in each region.
            </summary>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <c>true</c> allow estimates for out of view lines.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.RangeToPoints(Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the first and last point for the given lines in a region.
            </summary>
            <param name="region">The region.</param>
            <param name="first">The index of the first line.</param>
            <param name="last">The index of the last line.</param>
            <param name="allowEstimatesForOutOfViewLines">if set to <c>true</c> allow estimates for out of view lines.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.GetCumulatedOrigin(Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo)">
            <summary>
            Gets the cumulated origin taking scroll position into account. The
            returned value is between ScrollBar.Minimum and ScrollBar.Maximum.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.GetCumulatedCorner(Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo)">
            <summary>
            Gets the cumulated corner taking scroll position into account. The
            returned value is between ScrollBar.Minimum and ScrollBar.Maximum.
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.MouseWheel(System.Int32)">
            <summary>
            This method is called in response to a MouseWheel event.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ScrollInView(System.Int32,System.Double)">
            <summary>
            Scrolls the line into viewable area.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <param name="lineSize">Size of the line.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.OnLinesRemoved(System.Int32,System.Int32)">
            <summary>
            Called when lines were removed in ScrollLinesHost.
            </summary>
            <param name="removeAt">Index of the first removed line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.OnLinesInserted(System.Int32,System.Int32)">
            <summary>
            Called when lines were inserted in ScrollLinesHost.
            </summary>
            <param name="insertAt">Index of the first inserted line.</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.IsPixelScroll">
            <summary>
            Gets a value indicating whether this axis supports pixel scrolling.
            </summary>
            <value>
            	<c>true</c> if this instance supports pixel scrolling; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.Distances">
            <summary>
            Gets the distances collection which is used internally
            for mapping from a point position to
            a line index and vice versa.
            </summary>
            <value>The distances collection.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.TotalExtent">
            <summary>
            Gets the total extent of all line sizes.
            </summary>
            <value>The total extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <value>The line count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.HeaderExtent">
            <summary>
            Gets the header extent. This is total height (or width) of the header lines.
            </summary>
            <value>The header extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.FooterExtent">
            <summary>
            Gets the footer extent. This is total height (or width) of the footer lines.
            </summary>
            <value>The footer extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ScrollLineIndex">
            <summary>
            Gets or sets the index of the first visible Line in the Body region.
            </summary>
            <value>The index of the scroll line.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis.ViewSize">
            <summary>
            Gets the view size of the (either height or width) of the parent control. Normally
            the ViewSize is the same as <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisBase.RenderSize"/>. Only if the parent control
            has more space then needed to display all lines, the ViewSize will be less. In
            such case the ViewSize is the total height for all lines.
            </summary>
            <value>The size of the view.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventHandler">
            <summary>
            Handles events with <see cref="T:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs">
            <summary>
            Holds <see cref="P:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs.From"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs.To"/> integer properties.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs.From">
            <summary>
            Gets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs.To">
            <summary>
            Gets to.
            </summary>
            <value>To.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventHandler">
            <summary>
            Handles events with <see cref="T:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs">
            <summary>
            Holds <see cref="P:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs.RemoveAt"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs.Count"/> integer properties.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs"/> class.
            </summary>
            <param name="removeAt">RemoveAt.</param>
            <param name="count">Count.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs.RemoveAt">
            <summary>
            Gets removeAt.
            </summary>
            <value>RemoveAt.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LinesRemovedEventArgs.Count">
            <summary>
            Gets count.
            </summary>
            <value>Count.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventHandler">
            <summary>
            Handles events with <see cref="T:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs">
            <summary>
            Holds <see cref="P:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs.InsertAt"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs.Count"/> integer properties.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs"/> class.
            </summary>
            <param name="insertAt">InsertAt.</param>
            <param name="count">Count.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs.InsertAt">
            <summary>
            Gets insertAt.
            </summary>
            <value>InsertAt.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.LinesInsertedEventArgs.Count">
            <summary>
            Gets count.
            </summary>
            <value>Count.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventHandler">
            <summary>
            Handles events with <see cref="T:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs">
            <summary>
            Holds <see cref="P:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs.From"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs.To"/> integer properties.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.RangeChangedEventArgs"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs.From">
            <summary>
            Gets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.HiddenRangeChangedEventArgs.To">
            <summary>
            Gets to.
            </summary>
            <value>To.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex">
            <summary>
            Holds the coordinates for a cell. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Controls.Cells.RowColumnIndex"/> with row and column coordinates.
            </summary>
            <param name="r">The row index.</param>
            <param name="c">The column index.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.ToString">
            <summary>
            Returns the type name with state of this instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.op_Equality(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.op_Inequality(Syncfusion.WinRT.Controls.Cells.RowColumnIndex,Syncfusion.WinRT.Controls.Cells.RowColumnIndex)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="r1">The r1.</param>
            <param name="r2">The r2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.Empty">
            <summary>
            Gets the empty instance with RowIndex and ColumnIndex set to int.MinValue
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.ColumnIndex">
            <summary>
            The column index.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Cells.RowColumnIndex.RowIndex">
            <summary>
            The row index.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.CornerSide">
            <summary>
            Corner side enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.CornerSide.Both">
            <summary>
            Includes both Left and right side or Top and Bottom side.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.CornerSide.Left">
            <summary>
            Left side alone.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.CornerSide.Right">
            <summary>
            Right side alone.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.CornerSide.Top">
            <summary>
            Top side alone.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.CornerSide.Bottom">
            <summary>
            Bottom side alone.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion">
            <summary>
            A scroll axis has three regions: Header, Body and Footer.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion.Header">
            <summary>
            The header (at top or left side)
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion.Body">
            <summary>
            The body (center between header and footer)
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.ScrollAxisRegion.Footer">
            <summary>
            The footer (at bottom or right side)
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis">
            <summary>
            SharedSubsetScrollAxis implements scrolling logic for both horizontal and vertical 
            scrolling in a <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl"/> that is embeded in a parent
            scroll axis control.<para/>
            Logical units in the ScrollAxisBase are called "Lines". With the 
            <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> a line representes rows in a grid 
            and with <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollAxisControl.ScrollRows"/> a line represents columns in a grid.
            <para/>
            SharedSubsetScrollAxis supports pixel scrolling and calculates the total height or
            width of all lines.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.#ctor(Syncfusion.WinRT.Controls.Scroll.PixelScrollAxis,Syncfusion.WinRT.Controls.Scroll.IScrollBar,Syncfusion.WinRT.Controls.Scroll.ILineSizeHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis"/> class.
            </summary>
            <param name="parentScrollAxis">The parent scroll axis.</param>
            <param name="scrollBar">The scroll bar.</param>
            <param name="scrollLinesHost">The scroll lines host.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.GetLineSize(System.Int32,System.Int32@)">
            <summary>
            Gets size from ScrollLinesHost or if the line is being resized then get temporary value
            previously set with <see cref="M:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.SetLineResize(System.Int32,System.Double)"/>
            </summary>
            <param name="index">The index.</param>
            <param name="repeatSizeCount">The number of subsequent values with same size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.SetLineResize(System.Int32,System.Double)">
            <summary>
            Set temporary value for a line size during a resize operation without commiting
            value to SrollLinesHost.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.ResetLineResize">
            <summary>
            Resets temporary value for line size after a resize operation
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.Distances">
            <summary>
            Gets the distances collection which is used internally
            for mapping from a point position to
            a line index and vice versa.
            </summary>
            <value>The distances collection.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.StartLineIndex">
            <summary>
            Gets or sets the index of the first line in a parent axis. This is used for shared
            or nested scroll axis (e.g. a nested grid with shared axis in a covered cell).
            </summary>
            <value>The index of the first line..</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.SharedSubsetScrollAxis.DefaultLineSize">
            <summary>
            Gets or sets the default size of lines.
            </summary>
            <value>The default size of lines.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1">
            <summary>
            Holds a range together with a value assigned to the range.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1"/> class.
            </summary>
            <param name="start">The start and end of the range.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="count">The count.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.CompareTo(System.Object)">
            <summary>
            Compares the current range with the range of the other object. The value is 
            ignored.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> with state information about this object.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> with state information about this object.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.Start">
            <summary>
            Gets or sets the start of the range.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.Count">
            <summary>
            Gets or sets the count of the range.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1.End">
            <summary>
            Gets or sets the end of the range.
            </summary>
            <value>The end.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1">
            <summary>
            A sorted list with <see cref="T:Syncfusion.WinRT.Controls.Scroll.RangeValuePair`1"/> ordered by the
            start index of the ranges. SortedRangeValueList ensures that ranges 
            of the elements inside the list do not overlap and it also ensures
            that there are no empty gaps meaning that the subsequent range will
            always have the Start position be set to the End position of the previous
            range plus one.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1"/> class.
            </summary>
            <param name="defaultValue">The default value used for filling gaps.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.GetRange(System.Int32,System.Int32@)">
            <summary>
            Gets a range that countains the specified index and also 
            returns a count indicating the delta between the index and the 
            end of the range.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a range intialized with <see cref="P:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.DefaultValue"/> at
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Insert(System.Int32,System.Int32,`0)">
            <summary>
            Inserts a range intialized with a given value at
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Insert(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList{`0})">
            <summary>
            Inserts a range intialized with <see cref="P:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.DefaultValue"/> at
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count.</param>
            <param name="moveRanges">Allocate this object before a preceeding Remove call when moving ranges. 
            Otherwise specify null.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Insert(System.Int32,System.Int32,`0,Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList{`0})">
            <summary>
            Inserts a range intialized with a given value at
            the specified index. When necessary it splits a range and creates
            a new range value pair.
            </summary>
            <param name="insertAt">The insertion point.</param>
            <param name="count">The count.</param>
            <param name="value">The value.</param>
            <param name="moveRanges">Allocate this object before a preceeding Remove call when moving ranges. 
            Otherwise specify null.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Remove(System.Int32,System.Int32)">
            <summary>
            Removes a range at the specified index. When necessary ranges
            are merged when preceeding and subsquent ranges have the same
            value.
            </summary>
            <param name="removeAt">The index for the range to be removed.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Remove(System.Int32,System.Int32,Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList{`0})">
            <summary>
            Removes a range at the specified index. When necessary ranges
            are merged when preceeding and subsquent ranges have the same
            value.
            </summary>
            <param name="removeAt">The index for the range to be removed.</param>
            <param name="count">The count.</param>
            <param name="moveRanges">Allocate this object before a Remove call when moving ranges
            and pass it to a subsequent Insert call. Otherwise specify null.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.SetRange(System.Int32,System.Int32,`0)">
            <summary>
            Sets the value for a range at the specified index. When necessary ranges
            are split or merged to make sure integrity of the list is maintained.
            (SortedRangeValueList ensures that ranges
            of the elements inside the list do not overlap and it also ensures
            that there are no empty gaps meaning that the subsequent range will
            always have the Start position be set to the End position of the previous
            range plus one.)
            </summary>
            <param name="index">The index for the range to be changed.</param>
            <param name="count">The count.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.System#Collections#Generic#IEnumerable{Syncfusion#WinRT#Controls#Scroll#RangeValuePair{T}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.DefaultValue">
            <summary>
            Gets or sets the default value used for filling gaps.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Count">
            <summary>
            Gets the count which is the same as the end position of
            the last range.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.SortedRangeValueList`1.Item(System.Int32)">
            <summary>
            Gets the value of the range that contains the specified index
            or changes the value of the range. When necessary it splits a range and creates
            a new range value pair to hold the new value for the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo">
            <summary>
            Contains information about a visible line (can also be a row or column).
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo"/> class.
            </summary>
            <param name="visibleIndex">Visible index of the line.</param>
            <param name="lineIndex">Absolute index of the line.</param>
            <param name="size">The size.</param>
            <param name="clippedOrigin">The clipped origin.</param>
            <param name="scrollOffset">The scroll offset.</param>
            <param name="isHeader">if set to <c>true</c> line is a header.</param>
            <param name="isFooter">if set to <c>true</c> line is a footer.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo"/> class. Used for BinarySearch.
            </summary>
            <param name="clippedOrigin">The clipped origin.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo"/> class. Used for BinarySearch.
            </summary>
            <param name="lineIndex">Index of the line.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.ToString">
            <summary>
            Returns the type name with state of this instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.CompareTo(Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.VisibleIndex">
            <summary>
            Gets the visible index of the line.
            </summary>
            <value>The visible index of the line.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsVisible">
            <summary>
            Determines if the line is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.LineIndex">
            <summary>
            Gets the index of the line.
            </summary>
            <value>The index of the line.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.ClippedSize">
            <summary>
            Gets the size of the clipped area.
            </summary>
            <value>The size of the clipped area.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.Corner">
            <summary>
            Gets the corner.
            </summary>
            <value>The corner.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.ClippedCorner">
            <summary>
            Gets the clipped corner.
            </summary>
            <value>The clipped corner.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.ClippedOrigin">
            <summary>
            Gets the clipped origin.
            </summary>
            <value>The clipped origin.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.Origin">
            <summary>
            Gets the origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.ScrollOffset">
            <summary>
            Gets the scroll offset.
            </summary>
            <value>The scroll offset.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.ClippedCornerExtent">
            <summary>
            Gets the clipped corner extent.
            </summary>
            <value>The clipped corner extent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsClipped">
            <summary>
            Gets a value indicating whether this instance is clipped.
            </summary>
            <value>
            	<c>true</c> if this instance is clipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsClippedCorner">
            <summary>
            Gets a value indicating whether this instance corner is clipped.
            </summary>
            <value>
            	<c>true</c> if this instance corner is clipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsClippedOrigin">
            <summary>
            Gets a value indicating whether this instance origin is clipped.
            </summary>
            <value>
            	<c>true</c> if this instance origin is clipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsClippedBody">
            <summary>
            Determines whether this instance is clipped taking into consideration whether it is the the first or last visible line 
            and no clipping is needed for these cases.
            </summary>
            <param name="isFirstRow"></param>
            <param name="isLastRow"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.Region">
            <summary>
            Gets the axis region this line belongs to.
            </summary>
            <value>The axis region.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsHeader">
            <summary>
            Gets a value indicating whether this instance is a header.
            </summary>
            <value><c>true</c> if this instance is a header; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo.IsFooter">
            <summary>
            Gets a value indicating whether this instance is a footer.
            </summary>
            <value><c>true</c> if this instance is a footer; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection">
            <summary>
            A strong-typed collection of <see cref="T:Syncfusion.WinRT.Controls.Scroll.VisibleLineInfo"/> items.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.GetVisibleLineAtPoint(System.Double)">
            <summary>
            Gets the visible line at point.
            </summary>
            <param name="point">The point.</param>
            <returns>visible line at point.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.GetVisibleLineAtLineIndex(System.Int32)">
            <summary>
            Gets the the visible line at line index.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns>visible line at line index.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.GetVisibleLineNearLineIndex(System.Int32)">
            <summary>
            Gets the visible line for a line index. If the line specified
            line is hidden the next visible line is returned.
            </summary>
            <param name="lineIndex">Index of the line.</param>
            <returns>The first visible line for a line index that is not hidden.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.VisibleLineIndexes">
            <summary>
            Gets the visible line indexes.
            </summary>
            <value>The visible line indexes.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.FirstBodyVisibleIndex">
            <summary>
            Gets the index of the first visible line in the body region.
            </summary>
            <value>The index of the first visible line in the body region.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.FirstFooterVisibleIndex">
            <summary>
            Gets the index of the first visible line in the footer region.
            </summary>
            <value>The index of the first visible line in the footer region.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.VisibleLinesCollection.LastBodyVisibleIndex">
            <summary>
            Gets the index of the last visible line in the body region.
            </summary>
            <value>The index of the last visible line in the body region.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.AutoScroller">
            <summary>
            Provides automatic scrolling of content when the user drags the pressed
            mouse to an edge of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.AutoScroller.#ctor(Syncfusion.WinRT.Controls.Scroll.IScrollBarProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.AutoScroller"/> class.
            </summary>
            <param name="scrollControl">The scroll control.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.AutoScroller.OnAutoScrollingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.AutoScroller.AutoScrollingChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.AutoScroller.ResetInsideScrollMargins">
            <summary>
            Resets the <see cref="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.InsideScrollMargins"/> property to its default value.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.WinRT.Controls.Scroll.AutoScroller"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.InMouseDragScroll">
            <summary>
            Gets a value indicating whether a scroll operation is triggered by this object
            </summary>
            <value><c>true</c> if mouse drag scrolling; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.HScrollBar">
            <summary>
            Gets the state describing for the horizontal scroll bar.
            </summary>
            <value>The horizontal scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.VScrollBar">
            <summary>
            Gets the state describing for the vertical scroll bar.
            </summary>
            <value>The vertical scroll bar state.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.AutoScrolling">
            <summary>
            Disables or specifies the direction for automatic scrolling when the user drags
            the mouse cursor out of the scrolling area.
            </summary>
            <remarks>
            <list type="">
            <item>ScrollBars.None will disable scrolling.</item>
            <item>ScrollBars.Horizontal will enable horizontal scrolling.</item>
            <item>ScrollBars.Vertical will enable vertical scrolling.</item>
            <item>ScrollBars.Horizontal|ScrollBars.Vertical will enable both horizontal and vertical scrolling.</item>
            </list>
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.AutoScroller.AutoScrollingChanged">
            <summary>
            Occurs when the AutoScrolling property is changed.
            </summary>
            <remarks>
            If you want to prevent autoscrolling, you should handle this event
            and reset the AutoScrolling property to ScrollBars.None.
            </remarks>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.AutoScrollBounds">
            <summary>
            Gets or sets the outer scrolling area. Typically the client area of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.InsideScrollBounds">
            <summary>
            Gets the inside scrolling area. The control will scroll if the user drags
            the mouse outside this area.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.InsideScrollMargins">
            <summary>
            Gets or sets the default margins for the scrolling area when the user moves the mouse to the
            margin between InsideScrollBounds and AutoScrollBounds.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScroller.AllowScrollOutsideBounds">
            <summary>
            Gets or sets a value indicating whether the parent control should
            scroll when the user drags the mouse outside the parent controls 
            client area.
            </summary>
            <value>
            	<c>true</c> if allow to scroll outside bounds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.AutoScrollerValueChangedEventArgs">
            <summary>
            Provides data about AutoScroller update
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScrollerValueChangedEventArgs.IsLineLeft">
            <summary>
            Indicates Scrolling Left
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScrollerValueChangedEventArgs.IsLineRight">
            <summary>
            Indicates Scrolling Right
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScrollerValueChangedEventArgs.IsLineUp">
            <summary>
            Indicates Scrolling Up
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.AutoScrollerValueChangedEventArgs.IsLineDown">
            <summary>
            Indicates Scrolling down
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.AutoScrollOrientation">
            <summary>
            Specifies horizontal or vertical autoscrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.AutoScrollOrientation.None">
            <summary>
            No autoscrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.AutoScrollOrientation.Horizontal">
            <summary>
            Only horizontal autoscrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.AutoScrollOrientation.Vertical">
            <summary>
            Only vertical autoscrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.AutoScrollOrientation.Both">
            <summary>
            Both horizontal and vertical autoscrolling.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.IScrollBar">
            <summary>
            Defines an interface that provides all properties to configure a scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBar.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the value of the property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBar.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBar.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBar.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the value of the property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBar.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.IScrollBar.Enabled">
            <summary>
            Gets or sets a number that represents the current position of the scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame">
            <summary>
            Implements a child frame in a <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollControl"/> that can be placed at the top, bottom,
            left and right side of the control so that contents do scroll similiar to the Internet Explorer
            frames concept. Each frame remembers its placement.<para/>
            Adding and removing elements from the children collection does not trigger
            calls to InvalidateMeasure. This allows adding and removing elements
            on the fly. A derived control is responsible to call Measure and Arrange
            on child elements since this base class will not do this by itsself.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.VisualContainer">
            <summary>
            VisualContainer maintains a collection of child elements. Adding
            and removing elements from the children collection does not trigger
            calls to InvalidateMeasure. This allows adding and removing elements
            on the fly. A derived control is responsible to call Measure and Arrange
            on child elements since this base class will not do this by itsself.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.VisualContainer.WantsMouseInputProperty">
            <summary>
            <see cref="T:Syncfusion.WinRT.Controls.Scroll.MouseControllerDispatcher"/> checks this attached property for the UIElement returned by
            MouseDevice.DirectlyOver when the user hovers the mouse over an element. When
            it is true the MouseControllerDispatcher assumes the child UI Element wants to 
            handle mouse events itsself. In such case each MouseController will take this 
            into consideration. The default value is null. TextBox and Checkbox renderers
            usually set this property to true. <para/>
            If the property is true the SelectCellsMouseController.HitTest method will return 0 
            and thus indicating that it will not want to take control. Another MouseController 
            might decide to handle the mouse action anyway and in such case the UIElement will 
            not get the mouse action. <para/>
            When the value is null the parent element is queried. <para/>
            When the value is false the parent element is not queried. <para/>
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisualContainer.GetWantsMouseInput(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.UIElement)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Scroll.VisualContainer.WantsMouseInputProperty"/> attached dependency property value.
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <param name="falseIfParent">Abprt search parent elements when the parent matches the given UIElement.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisualContainer.SetWantsMouseInput(Windows.UI.Xaml.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Scroll.VisualContainer.WantsMouseInputProperty"/>  attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.WinRT.Controls.Scroll.VisualContainer.CellRenderBoundsProperty">
            <summary>
            The value of this property represents the distance between the left side of an element 
            and the left side of its parent Canvas. When the editor
            inside a cell has children and you query this attached property for a child it will query the top-most 
            parent element of the cell renderer for the value of the property.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisualContainer.GetRenderBoundsInherited(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="F:Syncfusion.WinRT.Controls.Scroll.VisualContainer.CellRenderBoundsProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be queried for the effective value of the dependency property.</param>
            <returns>
            Returns the effective value for the given instance.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisualContainer.SetRenderBounds(Windows.UI.Xaml.DependencyObject,Windows.Foundation.Rect)">
            <summary>
            Sets the <see cref="F:Syncfusion.WinRT.Controls.Scroll.VisualContainer.CellRenderBoundsProperty"/> attached dependency property value. 
            </summary>
            <param name="dpo">The instance to be assigned the value of the dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisualContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.VisualContainer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisualContainer.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Returns the same exact same size as specified by constraint.
            </summary>
            <param name="constraint">The maximum size limit for the control.</param>
            <returns>Same size as given in constraint.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.VisualContainer.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Returns the same exact same size as specified by finalSize without arranging
            child elements.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>Same size as given in finalSize.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.SetState(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the state.
            </summary>
            <param name="isAtLeftSide">if set to <c>true</c> frame is at left side.</param>
            <param name="isAtTop">if set to <c>true</c> frame is at top.</param>
            <param name="isAtRightSide">if set to <c>true</c> is at right side.</param>
            <param name="isAtBottom">if set to <c>true</c> frame is at bottom.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.CompareState(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Determines if this child frame that matches the given parameters.
            </summary>
            <param name="isAtLeftSide">if set to <c>true</c> frame is at left side.</param>
            <param name="isAtTop">if set to <c>true</c> frame is at top.</param>
            <param name="isAtRightSide">if set to <c>true</c> is at right side.</param>
            <param name="isAtBottom">if set to <c>true</c> frame is at bottom.</param>
            <returns>true if state matches; fakse otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.RowSection">
            <summary>
            The row section with 0 being at the left side, 1 being the center, 2 being at the right side and 3 spanning across multiple sections.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.ColumnSection">
            <summary>
            The column section with 0 being at the top side, 1 being the center, 2 being at the bottom and 3 spanning across multiple sections.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.IsAtTop">
            <summary>
            Gets a value indicating whether this instance is at top.
            </summary>
            <value><c>true</c> if this instance is at top; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.IsAtLeftSide">
            <summary>
            Gets a value indicating whether this instance is at left side.
            </summary>
            <value>
            	<c>true</c> if this instance is at left side; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.IsAtBottom">
            <summary>
            Gets a value indicating whether this instance is at bottom.
            </summary>
            <value>
            	<c>true</c> if this instance is at bottom; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.IsAtRightSide">
            <summary>
            Gets a value indicating whether this instance is at right side.
            </summary>
            <value>
            	<c>true</c> if this instance is at right side; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.IsScrollFrame">
            <summary>
            Gets a value indicating whether <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.SetState(System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> has been called.
            </summary>
            <value>
            	<c>true</c> if this <see cref="M:Syncfusion.WinRT.Controls.Scroll.ScrollControlChildFrame.SetState(System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> was called; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo">
            <summary>
            Provides all properties to configure a scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.OnPropertyChanged(System.String)">
            <summary>
            Called when a property is changed and raises the <see cref="E:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.CopyTo(Syncfusion.WinRT.Controls.Scroll.ScrollInfo)">
            <summary>
            Copies current settings to another object.
            </summary>
            <param name="sb">another object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo"/> is equal to the current <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo"/>.
            </summary>
            <param name="obj">The <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo"/> to compare with the current <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo"/>.</param>
            <returns>
            true if the specified <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo"/> is equal to the current <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Syncfusion.WinRT.Controls.Scroll.ScrollInfo"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Enabled">
            <summary>
            Gets or sets a number that represents the current position of the scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the value of the property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the value of the property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.ValueChanged">
            <summary>
             <para>Occurs when the <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Value"/> property has changed.</para>
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.ValueChanging">
            <summary>
             <para>Occurs before the <see cref="P:Syncfusion.WinRT.Controls.Scroll.ScrollInfo.Value"/> property is changed.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventHandler">
            <summary>
            Handles events with <see cref="T:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs">
            <summary>
            Holds <see cref="P:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs.NewValue"/> and <see cref="P:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs.OldValue"/> properties.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs"/> class.
            </summary>
            <param name="newValue">NewValue.</param>
            <param name="oldValue">OldValue.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs.NewValue">
            <summary>
            Gets newValue.
            </summary>
            <value>NewValue.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Controls.Scroll.ValueChangingEventArgs.OldValue">
            <summary>
            Gets oldValue.
            </summary>
            <value>OldValue.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.BitVectorInt32">
            <devdoc>
               <para>Provides a simple light bit vector with easy integer or Boolean access to
                  a 32 bit storage.</para>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.#ctor(System.Int32)">
            <devdoc>
            <para>Initializes a new instance of the BitVectorInt32 structure with the specified internal data.</para>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.#ctor(Syncfusion.WinRT.Collections.BitVectorInt32)">
            <devdoc>
            <para>Initializes a new instance of the BitVectorInt32 structure with the information in the specified 
               value.</para>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.CreateMask">
            <devdoc>
               <para> Creates the first mask in a series.</para>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.CreateMask(System.Int32)">
            <devdoc>
                Creates the next mask in a series.
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.CreateMaskFromHighValue(System.Int16)">
            <devdoc>
                Given a highValue, creates the mask
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.CreateSection(System.Int16)">
            <devdoc>
               <para>Creates the first section in a series, with the specified maximum value.</para>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.CreateSection(System.Int16,Syncfusion.WinRT.Collections.BitVectorInt32.Section)">
            <devdoc>
               <para>Creates the next section in a series, with the specified maximum value.</para>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.ToString(Syncfusion.WinRT.Collections.BitVectorInt32)">
            <devdoc>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.ToString">
            <devdoc>
            </devdoc>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.BitVectorInt32.Item(System.Int32)">
            <devdoc>
               <para>Gets or sets a value indicating whether all the specified bits are set.</para>
            </devdoc>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.BitVectorInt32.Item(Syncfusion.WinRT.Collections.BitVectorInt32.Section)">
            <devdoc>
               <para>Gets or sets the value for the specified section.</para>
            </devdoc>
        </member>
        <member name="P:Syncfusion.WinRT.Collections.BitVectorInt32.Data">
            <devdoc>
               returns the raw data stored in this bit vector...
            </devdoc>
        </member>
        <member name="T:Syncfusion.WinRT.Collections.BitVectorInt32.Section">
            <devdoc>
               <para> 
                  Represents an section of the vector that can contain a integer number.</para>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.Section.ToString(Syncfusion.WinRT.Collections.BitVectorInt32.Section)">
            <devdoc>
            </devdoc>
        </member>
        <member name="M:Syncfusion.WinRT.Collections.BitVectorInt32.Section.ToString">
            <devdoc>
            </devdoc>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity">
            <summary>
            Provides style identity information for nested expandable objects of the GridStyleInfo and TreeStyleInfo classes.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity">
            <summary>
            Provides style identity information for subobjects.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoIdentityBase">
            <summary>
            This is an abstract base class that provides identity information
            for <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>  objects.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.GetBaseStyle(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Loops through all base styles until it finds a style that has a specific property initialized.
            </summary>
            <param name="thisStyleInfo"></param>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <returns>A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> that has the property initialized.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.GetBaseStyleNotEmptyExpandable(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Loops through all base styles until it finds an expandable <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/>
            that has one or more properties initialized.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <returns>A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> that has the property initialized.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.GetBaseStyles(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>An array of style objects that are base styles for the current style object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Occurs when a property in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> has changed.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> instance that has changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.OnStyleChanging(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Occurs before a property in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> is changing.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> instance that is changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.InnerIdentity">
            <summary>
            Gets / sets another identity object to be used for determining base styles.
            GetBaseStyle will call InnerIdentity.GetBaseStyle if this object is not NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoIdentityBase.IsDisposable">
            <summary>
            Gets or sets a value indicating whether this object is disposable.
            </summary>
            <value>
            	<c>true</c> if this object is disposable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity.#ctor(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Instantiates a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity"/> for a 
            given owner and <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/>.
            </summary>
            <param name="owner">The owner style of the sub object.</param>
            <param name="sip">The identifier of the subobject in the owner object.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity.GetBaseStyles(Syncfusion.WinRT.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>
            An array of style objects that are base styles for the current style object.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity.Owner">
            <summary>
            Returns the owner style of the subobject.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity.Sip">
            <summary>
            Returns the identifier of the subobject in the owner object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity.#ctor(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Creates a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectIdentity"/> object and associates it with a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> that owns this subobject.</param>
            <param name="sip">The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> descriptor for this expandable subobject.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity.GetBaseStyles(Syncfusion.WinRT.Styles.IStyleInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.CachedStyleInfoSubObjectIdentity.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoBase,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Internal.FrugalMapBase.Search(System.Int32)">
            <summary>
            Looks for an entry that contains the given key, null is returned if the
            key is not found. 
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Internal.FrugalMapBase.Sort">
            <summary> 
            A routine used by enumerators that need a sorted map
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Internal.FrugalMapBase.GetKeyValuePair(System.Int32,System.Int32@,System.Object@)">
            <summary>
            A routine used by enumerators to iterate through the map 
            </summary> 
        </member>
        <member name="M:Syncfusion.WinRT.Internal.FrugalMapBase.Iterate(System.Collections.Generic.List{System.Object},Syncfusion.WinRT.Internal.FrugalMapIterationCallback)">
            <summary>
            A routine used to iterate through all the entries in the map
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Internal.FrugalMapBase.Promote(Syncfusion.WinRT.Internal.FrugalMapBase)">
            <summary> 
            Promotes the key/value pairs in the current collection to the next larger 
            and more complex storage model.
            </summary> 
        </member>
        <member name="P:Syncfusion.WinRT.Internal.FrugalMapBase.Count">
            <summary>
            Size of this data store 
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Internal.SingleObjectMap">
            <summary>
            A simple class to handle a single key/value pair
            </summary> 
        </member>
        <member name="T:Syncfusion.WinRT.Internal.ThreeObjectMap">
            <summary>
            A simple class to handle a single object with 3 key/value pairs.  The pairs are stored unsorted 
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array. 
            </summary> 
            <remarks>
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need 
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Internal.SixObjectMap">
            <summary>
            A simple class to handle a single object with 6 key/value pairs.  The pairs are stored unsorted 
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array.
            </summary>
            <remarks> 
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair. 
            </remarks> 
        </member>
        <member name="T:Syncfusion.WinRT.Internal.ArrayObjectMap">
            <summary>
            A simple class to handle an array of between 6 and 12 key/value pairs.  It is unsorted 
            and uses a linear search.  Perf analysis showed that this was the optimal size for both 
            memory and perf.  The values may need to be adjusted as the CLR and Avalon evolve.
            </summary> 
        </member>
        <member name="T:Syncfusion.WinRT.Internal.FrugalMapIterationCallback">
            <summary> 
                FrugalMapIterationCallback
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StaticDataFieldAttribute">
            <summary>
            Allows you to specify a custom name for the StaticData field
            in a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/>. 
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StaticDataFieldAttribute.Default">
            <summary>
            Specifies the default field name as "staticDataStore".
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticDataFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Styles.StaticDataFieldAttribute"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticDataFieldAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticDataFieldAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StaticDataFieldAttribute.FieldName">
            <summary>
            Returns the field name in the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> class 
            that identifies the static data store.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleChangedEventArgs.#ctor(Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Initializes the object with the property that has changed.
            </summary>
            <param name="sip">Identifies the property that has changed.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleChangedEventArgs.Sip">
            <summary>
            Returns the property that has changed.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleChangedEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoBase.Changed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.WinRT.Styles.StyleChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.CreateSubObjectHandler">
            <exclude/>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.SerializePropertyAttribute">
            <summary>
            Specifies whether a property should be serialized.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.SerializePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be serialized. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.SerializePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should not be serialized. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.SerializePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.SerializePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Styles.SerializePropertyAttribute"/> class.</para>
            </summary>
            <param name="serializeProperty">
              <see langword="True"/> if a property should be serialized; <see langword="False"/> otherwise. The default is <see langword="True"/>.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.SerializePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.SerializePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.SerializePropertyAttribute.IsSerializeProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.WinRT.Styles.SerializePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>True if property has a <see cref="T:Syncfusion.WinRT.Styles.SerializePropertyAttribute"/>; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.SerializePropertyAttribute.SerializeProperty">
            <summary>
              <para>Indicates whether a property is shown in the ToString result.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.CloneablePropertyAttribute">
            <summary>
            Specifies whether a property should be cloned.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be cloned if the assigned object implements ICloneable. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should never be cloned even if the assigned object implements ICloneable
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Styles.CloneablePropertyAttribute"/> class.</para>
            </summary>
            <param name="cloneableProperty">
              <see langword="True"/> if a property should be should be cloned if the assigned object implements ICloneable; <see langword="False"/> otherwise. The default is <see langword="True"/></param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.IsCloneableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.WinRT.Styles.CloneablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>True if property has a <see cref="T:Syncfusion.WinRT.Styles.CloneablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.CloneablePropertyAttribute.CloneableProperty">
            <summary>
              <para>Indicates whether a property should be cloned if the assigned object implements ICloneable.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute">
            <summary>
            Specifies whether a property should be disposed.
            </summary>
            <seealso cref="T:Syncfusion.WinRT.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be disposed if the assigned object implements IDisposeable. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should never be disposed even if the assigned object implements IDisposeable
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute"/> class.</para>
            </summary>
            <param name="disposeableProperty">
              <see langword="True"/> if a property should be should be disposed if the assigned object implements IDisposeable; <see langword="False"/> otherwise. The default is <see langword="True"/></param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.IsDisposeableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>True if property has a <see cref="T:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute.DisposeableProperty">
            <summary>
              <para>Indicates whether a property should be disposed if the assigned object implements IDisposeable.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.IStyleCloneable">
            <summary>
            Implement this interface if you want to assign this class to a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object's
            property and you need to control whether the object should be cloned.
            </summary>
            <remarks>
            This interface is only considered if the <see cref="T:Syncfusion.WinRT.Styles.CloneablePropertyAttribute"/> of
            <see cref="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsCloneable"/> of the <seea cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> is True. 
            (This is the default.) 
            </remarks>
            <seealso cref="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsCloneable"/> 
            <seealso cref="T:Syncfusion.WinRT.Styles.CloneablePropertyAttribute"/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleCloneable.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns>A reference to a clone of this object.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleCloneable.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleCloneable.ShouldClone">
            <summary>
            Returns True if this object should be cloned if you assign it to a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object's
            property; false otherwise.
            </summary>
            <returns>True if this object should be cloned if you assign it to a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object's
            property; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleCloneable.ShouldDispose">
            <summary>
            Returns True if this object should be disposed if it is reset in a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object's
            property; false otherwise.
            </summary>
            <returns>True if this object should be disposed if it is reset in a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object's
            property; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.IStyleChanged">
            <summary>
            Implements the <see cref="M:Syncfusion.WinRT.Styles.IStyleChanged.StyleChanged(Syncfusion.WinRT.Styles.StyleChangedEventArgs)"/> method which is called from
            <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoProperty)"/> of a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/>
            if the object is in <see cref="P:Syncfusion.WinRT.Styles.StyleInfoBase.WeakReferenceChangedListeners"/>
            collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.IStyleChanged.StyleChanged(Syncfusion.WinRT.Styles.StyleChangedEventArgs)">
            <summary>
            Called from <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.WinRT.Styles.StyleInfoProperty)"/> of a 
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> object.
            </summary>
            <param name="e">The <see cref="!:Syncfusion.Windows.Styles.StyleChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoObjectStore">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoProperty">
            <summary>
            Provides a unique identifier for a property in a style object and stores
            information about the associated property.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> is allocated once on the global heap for each
            property in a style object. Type safe <see cref="T:Syncfusion.WinRT.Styles.StyleInfoBase"/> wrappers make
            use of StyleInfoProperty to query, set or reset specific properties.
            <para/>
            Holds information about the property: PropertyType, Name, how to load and save
            its state in StyleInfoStore, attributes, etc.
            </remarks>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.ComponentType">
            <summary>
            The type of the component this property is bound to.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.PropertyType">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.CreateObject">
            <summary>
            Represents a method that creates a Subobject of this type and associates it with a parent style object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsExpandable">
            <summary>
            Indicates whether this is an object derived from <see cref="T:Syncfusion.WinRT.Styles.StyleInfoSubObjectBase"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsSerializable">
            <summary>
            Indicates whether this object supports being serialized. The value can be set
            with a <see cref="T:Syncfusion.WinRT.Styles.SerializePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsCloneable">
            <summary>
            Indicates whether this object should call ICloneable.Clone when an assigned object implements
            the ICloneable or <see cref="T:Syncfusion.WinRT.Styles.IStyleCloneable"/> interface. The value can be set
            with a <see cref="T:Syncfusion.WinRT.Styles.CloneablePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsDisposable">
            <summary>
            Indicates whether this object should call ICloneable.Clone when an assigned object implements
            the IDisposable or <see cref="T:Syncfusion.WinRT.Styles.IStyleCloneable"/> interface. The value can be set
            also with a <see cref="T:Syncfusion.WinRT.Styles.DisposeablePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsBrowsable">
            <summary>
            If property is marked with Browsable(true), custom attribute of this flag allows you
            to specify whether the property should appear in PropertyGrid. If property is marked
            with Browsable(false), then this setting will have no effect. Default is true.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsAnyObject">
            <summary>
            Indicates whether type information should be included when <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Format"/> is called. Use
            this if PropertyType is System.Obbject and you want to be able to parse written values.
            An example is GridStyleInfo.CellValue. Default is false.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.IsConvertibleToBase64">
            <summary>
            Indicates whether type information should be converted to Base64 if associated
            Type converter supports converting value to and from Base64. An example is a bitmap assigned to GridStyleInfo.CellValue.
            If IsConvertibleToBase64String is true, then the grid will convert the bitmap to a Base64 string
            and write out the information in the GridStyleInfo.ToString() method and also in the WriteXml method. Default is false.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.SerializeXmlBehavior">
            <summary>
            Defines how to serialize property when style data is serialized to or from an XML stream
            with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoProperty.GetPropertyInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> of this property.
            </summary>
            <returns>Property info of this property.</returns>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.DataVectorIndex">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.DataVectorSection">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.MaxValue">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.ObjectStoreKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.ExpandableObjectStoreKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.PropertyKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.BitVectorMask">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.BitVectorIndex">
            <exclude/>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.DoNotInvalidateCellWhenChanged">
            <summary>
            Set this for "behind the scenes" properties that when changed
            do not affect the appearance of a cell.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoProperty.Index">
            <exclude/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoProperty.#ctor(System.Type,System.String,System.Int16,System.Type)">
            <summary>
            Initializes a new StyleInfoProperty.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoProperty.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoProperty.FormatValue(System.Object)">
            <summary>
            Formats a given value that is of the same type as the <see cref="F:Syncfusion.WinRT.Styles.StyleInfoProperty.PropertyType"/>.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>A string with formatted text.</returns>
            <remarks><see cref="M:Syncfusion.WinRT.Styles.StyleInfoStore.ToString"/> calls this method.
            <para/>
            The <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Format"/> event lets you customize the formatting of this property but care
            should be taken that the formatted text can be consumed by the <see cref="M:Syncfusion.WinRT.Styles.StyleInfoProperty.ParseValue(System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoProperty.ParseValue(System.String)">
            <summary>
            Overloaded. Parses a given value that is of the same type as the <see cref="F:Syncfusion.WinRT.Styles.StyleInfoProperty.PropertyType"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>An object of the same type as the <see cref="F:Syncfusion.WinRT.Styles.StyleInfoProperty.PropertyType"/> created from the parsed string information.</returns>
            <remarks>
            <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ParseString(System.String)"/> calls this method.
            <para/>
            The <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Parse"/> event lets you customize the parsing of this property.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoProperty.ParseValue(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Parses a given value and converts it to a requested <see cref="T:System.Type"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="resultType">The <see cref="T:System.Type"/> for the resulting object.</param>
            <param name="provider">A format provider.</param>
            <returns>An object of type "resultType" created from the parsed string information.</returns>
            <remarks>
            The <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Parse"/> event lets you customize the parsing of this property.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Parse">
            <summary>
            Handles parse requests for this property.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Format">
            <summary>
            Handles formatting requests for this property.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Styles.StyleInfoProperty.WriteXml">
            <summary>
            Handles requests to serialize this property to an XML stream during an
            <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)"/> operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            class.
            </summary>
            <remarks>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream, you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="E:Syncfusion.WinRT.Styles.StyleInfoProperty.ReadXml">
            <summary>
            Handles requests to deserialize this property from an XML stream during an
            <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)"/> operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            class.
            </summary>
            <remarks>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.SerializeXmlBehavior">
            <summary>
            Defines how to serialize property when style data is serialized to or from an XML stream.
            with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.SerializeXmlBehavior.Default">
            <summary>
            Default. Serialize as string when type is simple. Using XmlSerializer for complex types
            or properties where the actual type is not known at compile-time (e.g. CellValue).
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.SerializeXmlBehavior.Skip">
            <summary>
            Skip this property. Do not serialize.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.SerializeXmlBehavior.SerializeAsString">
            <summary>
            Serialize this property as string using <see cref="M:Syncfusion.WinRT.Styles.StyleInfoProperty.FormatValue(System.Object)"/> and
            <see cref="M:Syncfusion.WinRT.Styles.StyleInfoProperty.ParseValue(System.String)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.SerializeXmlBehavior.SerializeWithXmlSerializer">
            <summary>
            Serialize this property using <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Format"/> and <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Parse"/> events.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs"/> is used to format and unformat values represented by
            a property in a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object. The Format event occurs whenever a property
            is written out as string and the Parse event occurs whenever the value is read back in from a string.
            <para/>
            If you handle this event, store the resulting value into <see cref="P:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs.Value"/> and
            set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs"/> class.
            </summary>
            <param name="value">An Object that contains the value of the current property.</param>
            <param name="desiredType">The Type of the value.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs.Value">
            <summary>
            Gets / sets the value of the <see cref="T:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventArgs.DesiredType">
            <summary>
            Returns the data type of the desired value.
            </summary>
            <remarks>
            The DesiredType property enables you to check the type of the property that the value is being converted to.
            </remarks>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoPropertyConvertEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Format"/> or <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.Parse"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.WriteXml"/> event of <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.WriteXml"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs"/> is used to serialize a property of a
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object. The WriteXml event occurs whenever a property
            is serialized to an XML stream during an <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)"/> operation
            of the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
            <para/>
            If you handle this event, you set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            Handling this event allows you to customize the way the object is serialized or skip
            serialization.
            <para/>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects' DataSource property). With such a scenario, you could write out a
            identifier and when the property is deserialized from an XML stream, you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs.#ctor(System.Xml.XmlWriter,Syncfusion.WinRT.Styles.StyleInfoStore,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> for the XML stream.</param>
            <param name="store">The style object that is being serialized.</param>
            <param name="sip">The property that is being serialized.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs.Writer">
            <summary>
            Returns the <see cref="T:System.Xml.XmlWriter"/> for the XML stream.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs.Store">
            <summary>
            Returns the style object that is being serialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs.Sip">
            <summary>
            Returns the property that is being serialized. Call <see cref="M:Syncfusion.WinRT.Styles.StyleInfoStore.GetValue(Syncfusion.WinRT.Styles.StyleInfoProperty)"/> of
            the <see cref="P:Syncfusion.WinRT.Styles.StyleInfoPropertyWriteXmlEventArgs.Store"/> to get the value for this property.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.ReadXml"/> event of <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.WinRT.Styles.StyleInfoProperty.ReadXml"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs"/> is used to deserialize a property of a
            <see cref="T:Syncfusion.WinRT.Styles.StyleInfoStore"/> object. The ReadXml event occurs whenever a property
            is deserialized from an XML stream during an <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)"/>
            operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
            <para/>
            If you handle this event, you set <see cref="P:Syncfusion.WinRT.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            Call <see cref="M:Syncfusion.WinRT.Styles.StyleInfoStore.SetValue(Syncfusion.WinRT.Styles.StyleInfoProperty,System.Object)"/> of
            the <see cref="P:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs.Store"/> to save the value for this property into the style object.
            Handling this event allows you to customize the way the object is deserialized or skip
            serialization.
            <para/>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs.#ctor(System.Xml.XmlReader,Syncfusion.WinRT.Styles.StyleInfoStore,Syncfusion.WinRT.Styles.StyleInfoProperty)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> for the XML stream.</param>
            <param name="store">The style object that is deserialized.</param>
            <param name="sip">The property that is being deserialized.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs.Reader">
            <summary>
            Returns the <see cref="T:System.Xml.XmlReader"/> for the XML stream.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs.Store">
            <summary>
            Returns the style object that is deserialized.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs.Sip">
            <summary>
            Returns the property that is being deserialized. Call <see cref="M:Syncfusion.WinRT.Styles.StyleInfoStore.SetValue(Syncfusion.WinRT.Styles.StyleInfoProperty,System.Object)"/> of
            the <see cref="P:Syncfusion.WinRT.Styles.StyleInfoPropertyReadXmlEventArgs.Store"/> to save the value for this property into the style object.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.WinRT.Styles.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo,System.IFormatProvider)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.TryConvertToBase64String(System.Object)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a base64 string from a byte array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.WinRT.Styles.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo,System.IFormatProvider)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StaticData">
            <summary>
            Holds all StyleInfoProperties used by derived classes.
            This should go in a product specific StaticData.<para/>
            The concrete Style class could provide a static memory StaticData that belongs
            to the process and library.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.WinRT.Styles.StaticData"/> object with information about the parent style class.
            </summary>
            <param name="type"></param>
            <param name="styleInfoType">Will be used to access the PropertyInfo and its custom attributes for a property.</param>
            <param name="sortProperties"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.CreatePropertyGridSortOrder(System.String[])">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.AllocateDataVectorSection(System.Int16,System.Int32@)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String)">
            <overload>
            Registers a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> for the specified property.
            </overload>
            <summary>
            Registers a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,Syncfusion.WinRT.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16)">
            <summary>
            Registers a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean)">
            <summary>
            Registers a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean,Syncfusion.WinRT.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean,System.Type,Syncfusion.WinRT.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <param name="componentType">The component type that hosts the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StaticData.StyleInfoProperties">
            <summary>
            Returns a collection with <see cref="T:Syncfusion.WinRT.Styles.StyleInfoProperty"/> objects.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StaticData.PropertyGridSortOrder">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.WinRT.Styles.StaticData.IsEmpty">
            <summary>
            Indicates whether properties have been registered. Returns True if not registered; False otherwise.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleInfoPropertyOptions">
            <summary>
            Specifies the options for style properties.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoPropertyOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoPropertyOptions.Serializable">
            <summary>
            The property supports serialization.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoPropertyOptions.Cloneable">
            <summary>
            The property should be cloned when the parent style object is copied.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoPropertyOptions.Disposable">
            <summary>
            The property should be disposed when the parent style object is disposed.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoPropertyOptions.CloneableAndDisposable">
            <summary>
            The property should be disposed when the parent style object is disposed
            and cloned when the parent style object is copied.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleInfoPropertyOptions.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Styles.StyleModifyType">
            <summary>
            StyleModifyType defines style operations for <see cref="M:Syncfusion.WinRT.Styles.StyleInfoBase.ModifyStyle(Syncfusion.WinRT.Styles.IStyleInfo,Syncfusion.WinRT.Styles.StyleModifyType)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleModifyType.Override">
            <summary>
            Copies all initialized properties.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleModifyType.ApplyNew">
            <summary>
            Copies only properties that have not been initialized in the target style object.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleModifyType.Copy">
            <summary>
            Copies all properties and resets properties in the target style.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleModifyType.Exclude">
            <summary>
            Resets properties in the target style that have been marked as initialized in the source style.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleModifyType.Remove">
            <summary>
            Clears out all properties.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Styles.StyleModifyType.Changes">
            <summary>
            Copies and resets all properties in the target style when the property has been marked as changed in the source style.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.DependencyObjectExtensions.FindElementsOfType``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Searches the subtree of an element (including that element) 
            for an element of a particluar type.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.DependencyObjectExtensions.FindElementOfType``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
                Searches the subtree of an element (including that element) 
                for an element of a particluar type.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.DependencyObjectExtensions.FindParentElementOfType``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Finds the type of the parent element of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.GridCommon.DoubleSpan">
            <summary>
            Holds a start and end value with double precision.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.GridCommon.DoubleSpan.Empty">
            <summary>
            An empty object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.DoubleSpan.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.GridCommon.DoubleSpan"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.DoubleSpan.ToString">
            <summary>
            Returns a string with start and end values.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.DoubleSpan.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.DoubleSpan.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.DoubleSpan.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.DoubleSpan.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.WinRT.GridCommon.GridUtil">
            <summary>
            Helper routines.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.GetSurroundingRect(Windows.Foundation.Point,Windows.Foundation.Size)">
            <summary>
            Gets the surrounding rect.
            </summary>
            <param name="pt">The pt.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.IsDoubleClick(Windows.Foundation.Point,System.Int32,Windows.Foundation.Point)">
            <summary>
            Determines whether a point is within double click range of another point and also ensures that the click was within double click time.
            </summary>
            <param name="pt">The pt.</param>
            <param name="mouseDownTick">The mouse down tick (Environment.TickCount at time of click).</param>
            <param name="mouseDownPoint">The mouse down point.</param>
            <returns>
            	<c>true</c> if this is matches double click criteria; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.SetClipRect(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Rect)">
            <summary>
            Sets the clip rect.
            </summary>
            <param name="el">The element.</param>
            <param name="r">The clip recangle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a rectangle.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.SubtractBorderMargins(Windows.Foundation.Rect,Windows.UI.Xaml.Thickness)">
            <summary>
            Remove border margins to get cells client area.
            </summary>
            <param name="cellRect"></param>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.IsSet(System.Int32,System.Int32)">
            <summary>
            Determines whether any of the specified flags are set.
            </summary>
            <param name="value">The value.</param>
            <param name="flags">The flags.</param>
            <returns>
            	<c>true</c> if the specified value is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.IsNotSet(System.Int32,System.Int32)">
            <summary>
            Determines whether none of the the specified flags is set.
            </summary>
            <param name="value">The value.</param>
            <param name="flags">The flags.</param>
            <returns>
            	<c>true</c> if none of the the specified flags is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.AllSet(System.Int32,System.Int32)">
            <summary>
            Determines if all of the specified flags are set.
            </summary>
            <param name="value">The value.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.ClearBits(System.Int32@,System.Int32)">
            <summary>
            Resets the specified flags.
            </summary>
            <param name="value">The value.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.MinMax(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the value not smaller and not larger than a specified range.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="min">The smallest value.</param>
            <param name="max">The largest value.</param>
            <returns>
            The value not smaller than min and and not larger than max.
            </returns>
            <overload>
            Returns the value not smaller and not larger than a specified range.
            </overload>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.MinMax(System.Single,System.Single,System.Single)">
            <summary>
            Returns the value not smaller and not larger than a specified range.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="min">The smallest value.</param>
            <param name="max">The largest value.</param>
            <returns>
            The value not smaller than min and and not larger than max.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.MinMax(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value not smaller and not larger than a specified range.
            </summary>
            <param name="value">The value to compare.</param>
            <param name="min">The smallest value.</param>
            <param name="max">The largest value.</param>
            <returns>
            The value not smaller than min and and not larger than max.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.MinMax(Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Returns the value not smaller and not larger than a specified range.
            </summary>
            <param name="point">The value to compare.</param>
            <param name="min">The smallest value.</param>
            <param name="max">The largest value.</param>
            <returns>
            The value not smaller than min and and not larger than max.
            </returns>
            <remarks>
            The calculation is made for both the X and Y coordinates separately.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.MinMax(Windows.Foundation.Point,Windows.Foundation.Rect)">
            <summary>
            Returns the value not smaller and not larger than a specified range.
            </summary>
            <param name="point">The value to compare.</param>
            <param name="bounds">The rectangle with bounds.</param>
            <returns>
            The value not smaller than min and and not larger than max.
            </returns>
            <remarks>
            The calculation is made for both the X and Y coordinates separately and compared
            with the rectangles boundaries.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.Min(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Returns the point with smaller value for X and Y coordinates each of two points.
            </summary>
            <param name="point1">The first point to compare.</param>
            <param name="point2">The second point to compare.</param>
            <returns>
            The point with smaller value for X and Y coordinates each of two points
            </returns>
            <overload>
            Returns the point with smaller value for X and Y coordinates each of two points.
            </overload>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.Max(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Returns the point with larger value for X and Y coordinates each of two points.
            </summary>
            <param name="point1">The first point to compare.</param>
            <param name="point2">The second point to compare.</param>
            <returns>
            The point with larger value for X and Y coordinates each of two points.
            </returns>
            <overload>
            Returns the point with larger value for X and Y coordinates each of two points.
            </overload>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.Min(Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Returns the size with smaller value for Width and Height coordinates for each of two values.
            </summary>
            <param name="size1">The first size to compare.</param>
            <param name="size2">The second size to compare.</param>
            <returns>
            The size with smaller value for Width and Height coordinates for each of two values.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.Max(Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Returns the size with larger value for Width and Height coordinates for each of two values.
            </summary>
            <param name="size1">The first size to compare.</param>
            <param name="size2">The second size to compare.</param>
            <returns>
            The size with larger value for Width and Height coordinates for each of two values.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.GetValueInherited(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,System.Object)">
            <summary>
            Gets the value from the specified object. If the value was not set
            for the object then the method will walk up parent nodes until
            it finds a parent object with the value set.
            </summary>
            <param name="dpo">The dependency object.</param>
            <param name="dp">The dp.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.IsObjectDescendantOfParent(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determines whether a given object is a descendant of a parent in the visual or logical tree.
            </summary>
            <param name="parent">The parent object to be tested.</param>
            <param name="obj">The descendant object to be tested.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.TopLeft(Windows.Foundation.Rect)">
            <summary>
            TopLeft of the rect
            </summary>
            <param name="rect">Rect</param>
            <returns>TopLeft Point</returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.TopRight(Windows.Foundation.Rect)">
            <summary>
            TopRight of the rect
            </summary>
            <param name="rect">Rect</param>
            <returns>TopRight Point</returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.BottomLeft(Windows.Foundation.Rect)">
            <summary>
            BottomLeft of the rect
            </summary>
            <param name="rect">Rect</param>
            <returns>BottomLeft Point</returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.BottomRight(Windows.Foundation.Rect)">
            <summary>
            BottomRight of the rect
            </summary>
            <param name="rect">Rect</param>
            <returns>BottomRight Point</returns>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.GridUtil.GetSize(Windows.Foundation.Rect)">
            <summary>
            Size of rect
            </summary>
            <param name="rect">Rect</param>
            <returns>Size</returns>        
        </member>
        <member name="T:Syncfusion.WinRT.GridCommon.Int32Span">
            <summary>
            Holds a start and end value with integer precision.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.GridCommon.Int32Span.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.GridCommon.Int32Span"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.Int32Span.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.Int32Span.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.Int32Span.Count">
            <summary>
            Gets or sets the count (equals end - start + 1)
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Syncfusion.WinRT.GridCommon.SystemInformation">
            <summary>
            Wraps native method calls to determine system settings.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.SystemInformation.DoubleClickTime">
            <summary>
            Gets the double click time.
            </summary>
            <value>The double click time.</value>
        </member>
        <member name="P:Syncfusion.WinRT.GridCommon.SystemInformation.DoubleClickSize">
            <summary>
            Gets the size of the double click area.
            </summary>
            <value>The size of the double click.</value>
        </member>
    </members>
</doc>
