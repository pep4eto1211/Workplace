<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Linq.WinRT</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.WinRT.Data.IPropertyAccessProvider">
            <summary>
            Exposes method to Get/Set from the underlying object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IPropertyAccessProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IPropertyAccessProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Data.FilterPredicate">
            <summary>
            Holds values for Filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.FilterPredicate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.FilterPredicate"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.FilterPredicate.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.FilterPredicate.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.FilterPredicate.PredicateType">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.FilterPredicate.FilterBehavior">
            <summary>
            Gets or sets the type of the filterbehavior.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.FilterPredicate.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case sensitive.
            </summary>
            <value>
            	<c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.PredicateType">
            <summary>
            Predicate type defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.PredicateType.And">
            <summary>
            Does an AND operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.PredicateType.Or">
            <summary>
            Does an OR operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.FilterOperatorType">
            <summary>
            Default Filter Operator is defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.FilterOperatorType.Equals">
            <summary>
            Does an Equals operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.FilterOperatorType.StartsWith">
            <summary>
            Does an StartsWith operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.FilterOperatorType.Contains">
            <summary>
            Does an Contains operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.IGroupList">
            <summary>
            Interface that exposes method to the TopLevelGroup for Add / Remove / Contains /
            IndexOf methods with the underlying bound object.
            </summary>
            <remarks>
            This interface will only interact with the underlying bound object that can be
            found in RecordEntry.Data.
            </remarks>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupList.Add(System.Object)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupList.Insert(System.Object,System.Int32)">
            <summary>
            Insert the record in the specified position.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupList.Remove(System.Object)">
            <summary>
            Removes the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupList.Contains(System.Object)">
            <summary>
            Determines whether the record is found in the DisplayElements of the TopLevelGroup.
            </summary>
            <param name="record">The record.</param>
            <returns>
            	<c>true</c> if [contains] [the specified record]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupList.IndexOf(System.Object)">
            <summary>
            Finds the index of the record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.#ctor(Syncfusion.WinRT.Data.TopLevelGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.GroupDisplayElements"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.IndexOf(Syncfusion.WinRT.Data.NodeEntry)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.Insert(System.Int32,Syncfusion.WinRT.Data.NodeEntry)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.Add(Syncfusion.WinRT.Data.NodeEntry)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.Contains(Syncfusion.WinRT.Data.NodeEntry)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.CopyTo(Syncfusion.WinRT.Data.NodeEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.Remove(Syncfusion.WinRT.Data.NodeEntry)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupDisplayElements.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupDisplayElements.TopLevelGroup">
            <summary>
            Gets or sets the top level group.
            </summary>
            <value>The top level group.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupDisplayElements.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.WinRT.Data.NodeEntry"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupDisplayElements.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupDisplayElements.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.WinRT.Data.GroupEntry">
            <summary>
            GroupEntry contains the list of groups for each sub-groups populated for the <see cref="T:Syncfusion.WinRT.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.NodeEntry">
            <summary>
            NodeEntry is the base class for the Grouping data structure used by <see cref="T:Syncfusion.WinRT.Data.ICollectionViewAdv"/> interface. It exposes some base level
            details for the derived constructs to use.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.NodeEntry.#ctor(Syncfusion.WinRT.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.NodeEntry"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.NodeEntry.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.WinRT.Data.NodeEntry"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.NodeEntry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.NodeEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Data.NodeEntry.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.NodeEntry.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.NodeEntry.IsGroups">
            <summary>
            Gets or sets a value indicating whether this instance is groups.
            </summary>
            <value><c>true</c> if this instance is groups; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.NodeEntry.IsRecords">
            <summary>
            Gets or sets a value indicating whether this instance is records.
            </summary>
            <value>
            	<c>true</c> if this instance is records; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupEntry.#ctor(Syncfusion.WinRT.Data.GroupEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.GroupEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupEntry.ToSummaryArray">
            <summary>
            returns an array of SummaryDetails for each group.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupEntry.Groups">
            <summary>
            Gets or sets the groups.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.OnGroupExpanded">
            <summary>
            Called when group.IsExpanded = true;.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.OnGroupCollapsed">
            <summary>
            Called when group.IsExpanded = false;.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Linq.GroupResult})">
            <summary>
            Populates the specified groups to populate.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Linq.GroupResult},System.Collections.Generic.List{Syncfusion.WinRT.Data.Group},Syncfusion.WinRT.Data.Group,System.Int32)">
            <summary>
            Populates the specified groups to populate.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <param name="groups">The groups.</param>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.CreateNewGroup(Syncfusion.WinRT.Data.Group,Syncfusion.Linq.GroupResult,System.Int32)">
            <summary>
            Creates the new group.
            </summary>
            <param name="parent">The parent.</param>
            <param name="groupResult">The group result.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.CreateNewGroup(Syncfusion.WinRT.Data.Group,System.Object,System.Int32)">
            <summary>
            Creates the new group.
            </summary>
            <param name="parent">The parent.</param>
            <param name="Key">The key.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.CreateDetailsForRecords(Syncfusion.WinRT.Data.Group,System.Int32)">
            <summary>
            Creates the details for records.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.CreateDetailsForRecords(Syncfusion.WinRT.Data.Group,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Creates the details for records.
            </summary>
            <param name="parent">The parent.</param>
            <param name="source">The source.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.CreateDetailsForGroups(System.Int32)">
            <summary>
            Creates the details for groups.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.SetDirty">
            <summary>
            Sets the dirty. When this is set to true, the YAmountCache will be re-computed for the whole group structure.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.GetYAmountCache">
            <summary>
            Each group knows the exact height of its child nodes. The YAmountCache returns the y height of each group based on its inner node levels.and their expanded states
            </summary>
            <returns>Calculated YAmount</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.GetSourceYAmountCache">
            <summary>
            Gets the source Y amount cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.GetParentYAmountCache">
            <summary>
            Gets the parent Y amount cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.GetRecordCount">
            <summary>
            Gets the record count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.GetGroupsCount">
            <summary>
            Gets the groups count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.Group.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.Key">
            <summary>
            Gets or sets the key for the Group.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>The items count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.IsBottomLevel">
            <summary>
            Gets or sets a value indicating whether this instance is bottom level. Bottom-Level group will have the list of records for the Group.
            </summary>
            <value>
            	<c>true</c> if this instance is bottom level; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether this instance is top level group. Top-Level Group will be the first-level group.
            </summary>
            <value>
            	<c>true</c> if this instance is top level group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.Details">
            <summary>
            Gets or sets the details for this group. This could be Groups / Records collection.
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.Records">
            <summary>
            Gets the records when Group.Details is list of records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.Groups">
            <summary>
            Gets the groups when Group.Details is list of Groups.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="E:Syncfusion.WinRT.Data.Group.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.Group.SummaryDetails">
            <summary>
            Contains summary record for this group
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.GroupComparer">
            <summary>
            IComparer implemented for <see cref="T:Syncfusion.WinRT.Data.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupComparer.Compare(Syncfusion.WinRT.Data.Group,Syncfusion.WinRT.Data.Group)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.DisplayElementEnumerator.#ctor(Syncfusion.WinRT.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.DisplayElementEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.DisplayElementEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.DisplayElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.WinRT.Data.DisplayElementEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.WinRT.Data.DisplayElementEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.DisplayElementEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.DisplayElementEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.WinRT.Data.GroupEnumerator">
            <summary>
            Enumerates any <see cref="P:Syncfusion.WinRT.Data.GroupEnumerator.Group"/> class and lists out all the elements in a one-dimensional array.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupEnumerator.#ctor(Syncfusion.WinRT.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.GroupEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.WinRT.Data.GroupingExtensions">
            <summary>
            Extensions for <see cref="T:Syncfusion.WinRT.Data.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupingExtensions.ExpandAllAtLevel(Syncfusion.WinRT.Data.Group,System.Int32)">
            <summary>
            Expands all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupingExtensions.CollapseAllAtLevel(Syncfusion.WinRT.Data.Group,System.Int32)">
            <summary>
            Collapses all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupingExtensions.ExpandAll(Syncfusion.WinRT.Data.Group)">
            <summary>
            Expands all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupingExtensions.CollapseAll(Syncfusion.WinRT.Data.Group)">
            <summary>
            Collapses all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupingExtensions.GetTopLevelGroup(Syncfusion.WinRT.Data.NodeEntry)">
            <summary>
            Gets the top level group.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Data.GroupRecordEntry">
            <summary>
            Contains a list of records with its related summaries and unfiltered records. The <see cref="T:Syncfusion.WinRT.Data.Group"/> class uses
            GroupRecordEntry if the group.IsBottomLevel = true;.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.#ctor(Syncfusion.WinRT.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.GroupRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.#ctor(Syncfusion.WinRT.Data.NodeEntry,System.Int32,System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.GroupRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.PopulateRecords(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Populates the records.
            </summary>
            <param name="source">The source.</param>
            <param name="filterPredicate">The filter predicate.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.PopulateRecords(System.Collections.IEnumerable,System.Predicate{System.Object},System.Boolean)">
            <summary>
            This overload Method used to find the GroupRecords for paging Support
            </summary>
            <param name="source"></param>
            <param name="filterPredicate"></param>
            <param name="isViewLevelPaging"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.CreateRecord(System.Object)">
            <summary>
            Creates the record.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.GetRecordsCount">
            <summary>
            Gets the records count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.GroupRecordEntry.ToArray">
            <summary>
            returns the underlying objects array from the record entries.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupRecordEntry.UnfilteredRecords">
            <summary>
            Gets the unfiltered records.
            </summary>
            <value>The unfiltered records.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupRecordEntry.Records">
            <summary>
            Gets or sets the records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.GroupRecordEntry.Summaries">
            <summary>
            Gets the summaries for the bottom level records.
            </summary>
            <value>The summaries.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.NestedRecordEntry">
            <summary>
            Contains a list of nested records for each <see cref="T:Syncfusion.WinRT.Data.RecordEntry"/> and nested <see cref="T:Syncfusion.WinRT.Data.ICollectionViewAdv"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.NestedRecordEntry.#ctor(Syncfusion.WinRT.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.NestedRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Data.NestedRecordEntry.NestedLevel">
            <summary>
            Gets or sets the nested level.
            </summary>
            <value>The nested level.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.NestedRecordEntry.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.NestedRecordEntry.NestedRecords">
            <summary>
            Gets the nested records.
            </summary>
            <value>The nested records.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.RecordEntry">
            <summary>
            Contains the underlying business object bound to <see cref="T:Syncfusion.WinRT.Data.ICollectionViewAdv"/> instance. 
            Nested records can be specified / controlled using the PopulateChildView method.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.RecordEntry.#ctor(Syncfusion.WinRT.Data.NodeEntry,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.RecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.RecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.RecordEntry.OnExpanded">
            <summary>
            Called when RecordEntry.IsExpanded = true;
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.RecordEntry.SetExpanded">
            <summary>
            Called when RecordEntry.IsExpanded = false;
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.RecordEntry.SetCollapsed">
            <summary>
            Sets IsExpanded = false without any calls to the events or overrides.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.RecordEntry.PopulateChildView(Syncfusion.WinRT.Data.ICollectionViewAdv,System.Int32,System.String)">
            <summary>
            Populates the child view.
            </summary>
            <param name="collectionView">The collection view.</param>
            <param name="level">The level.</param>
            <param name="relationName">Name of the relation.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.RecordEntry.OnCollapsed">
            <summary>
            Called when [collapsed].
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.RecordEntry.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.RecordEntry.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.RecordEntry.ChildViews">
            <summary>
            Gets or sets the child views.
            </summary>
            <value>The child views.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.SummaryRecordEntry">
            <summary>
            Contains the list of Summary aggregates computed using <see cref="T:Syncfusion.WinRT.Data.ISummaryRow"/> instance in this class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.SummaryRecordEntry.#ctor(Syncfusion.WinRT.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.SummaryRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.SummaryRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.WinRT.Data.SummaryRecordEntry.SummaryValues">
            <summary>
            Gets the summary values.
            </summary>
            <value>The summary values.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.SummaryRecordEntry.SummaryRow">
            <summary>
            Gets or sets the summary row.
            </summary>
            <value>The summary row.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.SummaryValue">
            <summary>
            Instance to cache the summary aggregate values into the <see cref="T:Syncfusion.WinRT.Data.SummaryRecordEntry"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.SummaryValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.SummaryValue"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.SummaryValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.SummaryValue.AggregateValues">
            <summary>
            Gets or sets the aggregate values.
            </summary>
            <value>The aggregate values.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.ISummaryRow">
            <summary>
            Common properties exposed through ISummaryRow for getting information on the
            summary values to be computed for the Groups in <see cref="T:Syncfusion.WinRT.Data.TopLevelGroup"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryRow.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryRow.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryRow.ShowSummaryInRow">
            <summary>
            Gets or sets a value indicating whether [show summary in row].
            </summary>
            <value><c>true</c> if [show summary in row]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryRow.SummaryColumns">
            <summary>
            Gets the summary columns.
            </summary>
            <value>The summary columns.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryRow.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryRow.TitleColumnCount">
            <summary>
            Gets or sets the title column count.
            </summary>
            <value>The title column count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryColumn.CustomAggregate">
            <summary>
            Gets or sets the custom aggregate. Should implement <see cref="T:Syncfusion.WinRT.Data.ISummaryAggregate"/> interface to delegate the custom summaries.
            </summary>
            <value>The custom aggregate.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryColumn.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryColumn.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ISummaryColumn.SummaryType">
            <summary>
            Gets or sets the type of the summary.
            </summary>
            <value>The type of the summary.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.SummaryType">
            <summary>
            Different Enum types of SummaryType.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.SummaryType.CountAggregate">
            <summary>
            Specify the count aggregate for the <see cref="T:Syncfusion.WinRT.Data.ISummaryColumn"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.SummaryType.DoubleAggregate">
            <summary>
            Specify Double value aggregate for the <see cref="T:Syncfusion.WinRT.Data.ISummaryColumn"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.SummaryType.Int32Aggregate">
            <summary>
            Specify Int32 value aggregate for the <see cref="T:Syncfusion.WinRT.Data.ISummaryColumn"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.WinRT.Data.SummaryType.Custom">
            <summary>
            Specify custom aggregate for the <see cref="T:Syncfusion.WinRT.Data.ISummaryColumn"/>. Implement <see cref="T:Syncfusion.WinRT.Data.ISummaryAggregate"/> or <see cref="T:Syncfusion.WinRT.Data.ISummaryExpressionAggregate"/> interface to delegate the summary computation.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ISummaryAggregate.CalculateAggregateFunc">
            <summary>
            Calculates the aggregate func.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ISummaryExpressionAggregate.CalculateAggregateExpressionFunc">
            <summary>
            Calculates the aggregate expression func.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.WinRT.Data.ISummaryParallelizable">
            <summary>
            Implement this interface to know if the Summary expressions can use PLINQ
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.DoubleAggregate">
            Count, Minimum, Maximum, Sum, and Average for double fields.
        </member>
        <member name="T:Syncfusion.WinRT.Data.TopLevelGroup">
            <summary>
            TopLevelGroup is the first-level of the Groups present in <see cref="T:Syncfusion.WinRT.Data.ICollectionViewAdv"/>. It maintains the data structure for Grouping with <see cref="T:Syncfusion.WinRT.Data.ICollectionViewAdv"/>. Iterate the DisplayElements property to get one-to-one mapping of the index with the TopLevelGroup items. Access all the Bottom-level and other nested level groups with the Groups property.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.IGroupRefresh">
            <summary>
            Implement this interface to control refresh done with the <see cref="T:Syncfusion.WinRT.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupRefresh.RefreshSortingOrder">
            <summary>
            Refreshes the sorting order.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupRefresh.RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IGroupRefresh.DeferRefresh">
            <summary>
            returns an IDisposable object to specify controlled updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.#ctor(Syncfusion.WinRT.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.WinRT.Data.TopLevelGroup"/> class.
            </summary>
            <param name="collectionView">The collection view.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Invalidate(System.Int32,System.Int32)">
            <summary>
            Invalidates the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Syncfusion#WinRT#Data#IGroupRefresh#RefreshSortingOrder">
            <summary>
            Refreshes the sorting order.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Syncfusion#WinRT#Data#IGroupRefresh#RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.SuspendEvents">
            <summary>
            Suspends the events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.ResumeEvents">
            <summary>
            Resumes the events.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Syncfusion#WinRT#Data#IGroupRefresh#DeferRefresh">
            <summary>
            returns an IDisposable object to specify controlled updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Add(System.Object)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Remove(System.Object)">
            <summary>
            Removes the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.Contains(System.Object)">
            <summary>
            Determines whether the record is found in the DisplayElements of the TopLevelGroup.
            </summary>
            <param name="record">The record.</param>
            <returns>
            	<c>true</c> if [contains] [the specified record]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.IndexOf(System.Object)">
            <summary>
            Finds the index of the record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.ResetDisplayElements">
            <summary>
            Resets the display elements.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.GetMaxLevel">
            <summary>
            Gets the max level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.GetGroupCaptionText(Syncfusion.WinRT.Data.Group,System.String,System.String)">
            <summary>
            Gets the group caption text for the specified <see cref="T:Syncfusion.WinRT.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
            <param name="groupSpecifierText">The group specifier text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.GetGroupCaptionTextList(Syncfusion.WinRT.Data.Group,System.String,System.String)">
            <summary>
            Gets the group caption text for the specified <see cref="T:Syncfusion.WinRT.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
            <param name="groupSpecifierText">The group specifier text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.UpdateCaptionSummaries">
            <summary>
            Updates the caption summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.UpdateSummaries(Syncfusion.WinRT.Data.Group)">
            <summary>
            Updates the summaries for the specified <see cref="T:Syncfusion.WinRT.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.TopLevelGroup.HasDetailsView">
            <summary>
            Determines whether [has details view].
            </summary>
            <returns>
            	<c>true</c> if [has details view]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Syncfusion.WinRT.Data.TopLevelGroup.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether this instance is top level group. Top-Level Group will be the first-level group.
            </summary>
            <value>
            	<c>true</c> if this instance is top level group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.TopLevelGroup.RelationsCount">
            <summary>
            Gets or sets the relations count.
            </summary>
            <value>The relations count.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.TopLevelGroup.CollectionView">
            <summary>
            Gets the collection view.
            </summary>
            <value>The collection view.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.TopLevelGroup.GroupDescriptions">
            <summary>
            Gets the group descriptions.
            </summary>
            <value>The group descriptions.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.TopLevelGroup.DisplayElements">
            <summary>
            Gets the display elements.
            </summary>
            <value>The display elements.</value>
        </member>
        <member name="E:Syncfusion.WinRT.Data.TopLevelGroup.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.ICollectionViewAdv">
            <summary>
            ICollectionViewAdv is an extended interface from ICollectionView that implements
            support for Grouping structure, Summaries, Table Summaries, Filters.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ICollectionViewAdv.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ICollectionViewAdv.CreateRecordEntry(System.Object)">
            <summary>
            Creates the record entry.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ICollectionViewAdv.GetPropertyAccessProvider">
            <summary>
            Gets the property access provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ICollectionViewAdv.GetItemProperties">
            <summary>
            Gets the item properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ICollectionViewAdv.SetCustomExpressionFunc(Syncfusion.WinRT.Data.IUnboundExpressionFunc)">
            <summary>
            Enable customization for runtime dynamic objects in LINQ queries.
            </summary>
            <param name="expressionFunctor"></param>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ICollectionViewAdv.Suspend">
            <summary>
            Suspends this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ICollectionViewAdv.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.Records">
            <summary>
            Gets the records list structure.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.TopLevelGroup">
            <summary>
            Gets the top level group.
            </summary>
            <value>The top level group.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.CaptionSummaryRow">
            <summary>
            Gets or sets the caption summary row.
            </summary>
            <value>The caption summary row.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.SummaryRows">
            <summary>
            Gets the summary rows.
            </summary>
            <value>The summary rows.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.FilterPredicates">
            <summary>
            Gets or sets the filter predicates.
            </summary>
            <value>The filter predicates.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.TableSummaryRows">
            <summary>
            Gets the table summary rows.
            </summary>
            <value>The table summary rows.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.SortComparers">
            <summary>
            Gets the sort comparers for the sort description.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.ICollectionViewAdv.GroupComparer">
            <summary>
            Defines the custom group comparer to enable customization of the group sort order.
            </summary>
        </member>
        <member name="E:Syncfusion.WinRT.Data.ICollectionViewAdv.RecordPropertyChanged">
            <summary>
            Record Property Changed event handler
            </summary>
        </member>
        <member name="T:Syncfusion.WinRT.Data.IUnboundExpressionFunc">
            <summary>
            Returns an Expression to embed in LINQ operation queries implemented by <see cref="T:Syncfusion.WinRT.Data.ICollectionViewAdv"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IUnboundExpressionFunc.GetFunc(System.String)">
            <summary>
            Custom Functor to enable runtime customized objects over default operations other than LINQ queries.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IUnboundExpressionFunc.GetExpressionFunc(System.String)">
            <summary>
            Custom expression functor to enable runtime customized objects into LINQ queries.
            </summary>
            <param name="expressionFunc"></param>
        </member>
        <member name="T:Syncfusion.WinRT.Data.IRecordsList">
            <summary>
            Implements an IList structure to contain the list of RecordEntry.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IRecordsList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index for the underlying record.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IRecordsList.GetItemAt(System.Int32)">
            <summary>
            Gets the item at index specified.
            </summary>
            <param name="recordIndex">Index of the record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IRecordsList.GetRecord(System.Object)">
            <summary>
            Gets the <see cref="T:Syncfusion.WinRT.Data.RecordEntry"/> for the underlying business object.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IRecordsList.CreateRecordEntry(System.Object)">
            <summary>
            Creates the <see cref="T:Syncfusion.WinRT.Data.RecordEntry"/> for the business object.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.IRecordsList.ReomveAll">
            <summary>
            Dispose all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.IRecordsList.TableSummaries">
            <summary>
            Gets the table summaries.
            </summary>
            <value>The table summaries.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.IFilterDefinition">
            <summary>
            Specifies properties for filtering with <see cref="T:Syncfusion.WinRT.Data.ICollectionViewAdv"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.WinRT.Data.IFilterDefinition.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:Syncfusion.WinRT.Data.IFilterDefinition.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Syncfusion.WinRT.Data.ItemPropertiesProvider">
            <summary>
            Implements <see cref="T:Syncfusion.WinRT.Data.IPropertyAccessProvider"/> to Get / Set value on the underlying object.
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ItemPropertiesProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.ItemPropertiesProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.PropertyInfoExtensions.GetPropertyDescriptor(Syncfusion.WinRT.Data.PropertyInfoCollection,System.String)">
            <summary>
            Generate the Property Descriptot for corresponding Property it may be simple or complex property
            </summary>
            <param name="pdc"></param>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Data.EnumerableRecordsWrapper.Add(System.Object)">
            <summary>
            Adds the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:Syncfusion.WinRT.Common.TypeHelper">
            <summary>
            Utility class for Type related operations
            </summary>
        </member>
        <member name="M:Syncfusion.WinRT.Common.TypeHelper.GetDefaultMemberName(System.Type)">
            <summary>
            Gets the default member name that is used for an indexer (e.g. "Item").
            </summary>
            <param name="type">Type to check.</param>
            <returns>Default member name.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Common.TypeHelper.GetNestedProperty(System.Type,System.String,System.Exception@,System.Object@)">
            <summary>
            Retrieves the value and type of a property. That property can be nested and its path
            can include indexers. Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">The parent Type</param>
            <param name="propertyPath">Property path</param>
            <param name="exception">Potential exception</param>
            <param name="item">Parent item which will be set to the property value if non-null.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.WinRT.Common.TypeHelper.GetNestedPropertyType(System.Type,System.String)">
            <summary>
            Extension method that returns the type of a property. That property can be nested and
            its path can include indexers. Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">Type that exposes that property</param>
            <param name="propertyPath">Property path</param>
            <returns>Property type</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Type,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested and its path can
            include indexers. Each element of the path needs to be a public instance property.
            The return value will either be of type propertyType or it will be null.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Common.TypeHelper.GetPropertyOrIndexer(System.Type,System.String,System.Object[]@)">
            <summary>
            Returns the PropertyInfo for the specified property path.  If the property path
            refers to an indexer (e.g. "[abc]"), then the index out parameter will be set to the value
            specified in the property path.  This method only supports indexers with a single parameter
            that is either an int or a string.  Int parameters take priority over string parameters.
            </summary>
            <param name="type">Type to search.</param>
            <param name="propertyPath">Property path.</param>
            <param name="index">Set to the index if return value is an indexer, otherwise null.</param>
            <returns>PropertyInfo for either a property or an indexer.</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Common.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The type to get the name from</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="M:Syncfusion.WinRT.Common.TypeHelper.SplitPropertyPath(System.String)">
            <summary>
            Returns a list of substrings where each one represents a single property within a nested
            property path which may include indexers.  For example, the string "abc.d[efg][h].ijk"
            would return the substrings: "abc", "d", "[efg]", "[h]", and "ijk".
            </summary>
            <param name="propertyPath">Path to split.</param>
            <returns>List of property substrings.</returns>
        </member>
        <member name="M:Syncfusion.Linq.Data.DataSetExtensions.EscapeLikeValue(System.String)">
            <summary>
            Insert [ wildcard ] in LIKE Queries.
            http://msdn.microsoft.com/en-us/library/ms179859.aspx
            </summary>
        </member>
        <member name="T:Syncfusion.Linq.FunctionalExtensions">
            <summary>
            Functional method extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates over an IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over a generic IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.IterateIndex``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.IterateIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.True``1">
            <summary>
            Trues this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.False``1">
            <summary>
            Falses this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the left.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the right.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.MoveTo(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Moves to.
            </summary>
            <param name="list">The list.</param>
            <param name="src">The SRC.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="T:Syncfusion.Linq.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Linq.FilterBehavior">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Linq.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.IsComplexType(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Linq.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Linq.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Linq.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Linq.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Linq.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="T:Syncfusion.Linq.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source. 
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable(); </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as, </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Type)">
            <summary>
            Generates the GroupBy Expression
            </summary>
            <param name="groupByName"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Linq.FilterType,Syncfusion.Linq.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="propertyName"></param>
            <param name="constValue"></param>
            <param name="filterType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Select(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new string[]{
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new List&lt;string&gt;() {
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            <para></para>
            <para>It returns a dynamic class generated thru ReflectionEmit, Use reflection
            to identify the properties and values.</para>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Linq.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName">Name of the property.</param>
            <param name="value"></param>
            <param name="filterType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda. 
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext db = new DataClasses1DataContext();
            <para></para>            var orders = db.Orders.Skip(0).Take(100).ToList();
            <para></para>            var queryable = orders.AsQueryable();
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);
            <para></para>            var binaryExp = queryable.Predicate(parameter,
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExp);
            <para></para>            foreach (var order in filteredOrders)
            <para></para>            {
            <para></para>                Console.WriteLine(order);
            <para></para>            }
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,
            <para></para>
            <para></para>            IQueryable queryable = nw.Orders.AsQueryable();
            <para></para>            var parameter = queryable.Parameter();
            <para></para>            var exp1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);
            <para></para>            var exp2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);
            <para></para>            var andExp = exp2.OrPredicate(exp1);
            <para></para>            var filters = queryable.Where(parameter, andExp);
            <para></para>            foreach (Orders item in filters)
            <para></para>            {
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);
            <para></para>            }
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="predicateExpression"></param>
        </member>
    </members>
</doc>
